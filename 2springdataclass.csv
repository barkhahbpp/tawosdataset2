Name,Title,Description,Type,Priority,Status,Creation_Date,Estimation_Date,Story_Point
"Spring DataCass","Initial test-cleanup","Tests in Spring Data Cassandra are hard to debug within the IDE, and the test setup fails in certain IDEs. Initialization code for Embedded Cassandra is spread across multiple tests. Test settings are set in multiple resources, the majority of tests does not clean up after the test. This makes it impossible to run tests on an external Cassandra instance.  Todo: * Consolidate initializer code in a {{CassandraRule}} * Help the tests to become better citizens again by adding cleanup code and allowing conditional create/drop of keyspaces, tables, etc. * Consolidate port properties * Create profiles for embedded (managed by the tests) and external (managed outside the tests) Cassandra instances",Task,Minor,Closed,"2016-02-17 09:08:51","2016-02-17 09:08:51",0
"Spring DataCass","Release 1.3.4 (Gosling SR4)",,Task,Minor,Closed,"2016-02-11 15:51:28","2016-02-11 15:51:28",3
"Spring DataCass","CachedPreparedStatementCreator class is not threadsafe","see this stackoverlow posting http://stackoverflow.com/questions/34979916/spring-cassandra-is-cachedpreparedstatementcreator-class-threadsafe  There is a race condition in the code.  ",Bug,Major,Closed,"2016-02-08 17:37:45","2016-02-08 17:37:45",8
"Spring DataCass","Add code of conduct",,"New Feature",Minor,Closed,"2016-02-02 09:21:33","2016-02-02 09:21:33",0
"Spring DataCass","Release 1.4 M1 (Hopper)",,"New Feature",Minor,Closed,"2016-01-27 15:20:14","2016-01-27 15:20:14",1
"Spring DataCass","Support lightweight transactions (if [not] exists)","It would be nice to support lightweight transactions. At least in CassandraOperations, so that they can be used by custom repository methods.  Something like this:   Or this (note the exceptions):   Or perhaps simply adding it to WriteOptions:   With some Enum like this:   Or as two separate options (but then have to ensure only one is specified).  With insert/update automatically chosen based on which option is specified, if any. And exceptions thrown in case of WriteOptions.","New Feature",Minor,Closed,"2016-01-20 16:36:00","2016-01-20 16:36:00",5
"Spring DataCass","CDI support can fail due to Set.toString() used as Map key","Current CDI support sometimes fails, because it stores CassandraOperation instances in a map with String key representing a set of Qualifiers:    However, Set doesn't define iteration order (or even String representation for that matter), so with 2+ Qualifiers there's a good chance to get them in the wrong order and fail to find operations:    Example:  {{\[@javax.enterprise.inject.Default(), @javax.enterprise.inject.Any()]}} != {{\[@javax.enterprise.inject.Any(), @javax.enterprise.inject.Default()]}}",Bug,Minor,Closed,"2016-01-19 16:50:04","2016-01-19 16:50:04",2
"Spring DataCass","@PrimaryKeyColumn does not work when applied to methods","This code works:  {code:java} public class Entity {          @PrimaryKeyColumn(ordinal = 0, type = PrimaryKeyType.PARTITIONED)     private String col1;     public String getCol1() { return col1; }          @PrimaryKeyColumn(ordinal = 1)     private String col2;     public String getCol2() { return col2; }      } {code}  This code doesn't:  {code:java} public class Entity {          private String col1;     @PrimaryKeyColumn(ordinal = 0, type = PrimaryKeyType.PARTITIONED)     public String getCol1() { return col1; }          private String col2;     @PrimaryKeyColumn(ordinal = 1)     public String getCol2() { return col2; }      } {code}  Exception is:    This becomes a particular problem when the Entity is in a class hierarchy, as methods can be overridden but fields cannot. ",Bug,Minor,Closed,"2016-01-07 12:08:14","2016-01-07 12:08:14",0
"Spring DataCass","Optional return type for Repositories returns Optional of resultset instead of Optional of Objectype","In JAVA 8 when the return type of a repository call Optional<T>, the actual return type is Optional<ResultSet>  Upon invoking Optional::get, I get a: java.lang.ClassCastException: com.datastax.driver.core.ArrayBackedResultSet$SinglePage cannot be cast to classType  Class: AbstractCassandraQuery",Bug,Major,Closed,"2016-01-05 11:28:42","2016-01-05 11:28:42",5
"Spring DataCass","Release 1.3.2 (Gosling)",,Improvement,Minor,Closed,"2015-12-17 07:15:58","2015-12-17 07:15:58",1
"Spring DataCass","Adapt to API changes in Spring Data Commons",,"New Feature",Major,Closed,"2015-12-14 19:34:19","2015-12-14 19:34:19",3
"Spring DataCass","Allow Lazy loading for EnableCassandraRepositories just like ComponentScan","Hi,  I am having an issue where I cannot run my Integration tests because my app fails to load. My apps fails to load via mvn tomcat7:run because EnableCassandraRepositories is trying to connect to Cassandra when the app is loading up. For my Integration Tests I start Cassandra via cassandra-unit, so no Cassandra instance exists until Integration Tests start. It would be awesome if the connections were made/seeked lazily, so that my app starts up and my tests would provide the Cassandra connection via Cassandra unit. Does the description above make sense?  Below is the stack trace. I appreciate the product. In fact I love it. Lazy loading of repos via EnableCassandraRepositories would help me a lot!     ","New Feature",Minor,Closed,"2015-12-11 03:53:01","2015-12-11 03:53:01",5
"Spring DataCass","Avoid git checkout problems by shorten too long test classnames.","One cannot checkout and build SD Cassandra on windows ( :-( ) due to long test case names like: ForceQuotedCompositePrimaryKeyRepositoryXmlConfigIntegrationTests.    One could workaround by using {{subst s: d:\path\to\repository}} to shorten the path a bit but this shouldn't be needed with a bit more pragmatic naming.",Improvement,Minor,Closed,"2015-12-07 17:46:24","2015-12-07 17:46:24",2
"Spring DataCass","Shutdown Script issue with XML Configuration","There is a typo bug at line 173 in the class CassandraCqlClusterParser :     builder.addPropertyValue(shutdownScripts, startupScripts);  It should be     builder.addPropertyValue(shutdownScripts, shutdownScripts);",Bug,Major,Closed,"2015-12-07 11:26:12","2015-12-07 11:26:12",1
"Spring DataCass","The SchemaAction.RECREATE doesn't drop tables","Let's start from the code!  The {{mappingContext.usesTable(table)}} returns {{false}} because of:  but {{table.getName()}} returns {{String}}. So, we can't reach the equality on the {{key}} because of different hash codes for {{String}} and {{CqlIdentifier}}.  ",Bug,Minor,Closed,"2015-12-03 21:34:02","2015-12-03 21:34:02",10
"Spring DataCass","@Query annotation | String type parameters are mishandled | Implementation does not work for IN where clause","Below is the code present in my repository interface.   The above piece of code does not work because of the mishandling of string parameters in StringBasedCassandraQuery class of the library. Below is the code snippet present in replacePlaceholders method of StringBasedCassandraQuery.java.    The escapeSingle does this :   It just puts surrounding single quotes and escapes any single quote (by replacing it with single quotes two times) present in any of the string parameters provided. But this does not help in the queries with IN clause in WHERE condition of the query.  There is absolutely no way we can provide our input to such query.  e.g. * foo,bar becomes 'foo,bar' * 'foo','bar' becomes '''foo'',''bar''' * foo','bar becomes 'foo'',''bar'",Bug,Major,Closed,"2015-11-27 11:55:18","2015-11-27 11:55:18",5
"Spring DataCass","Upgrade to latest Cassandra drivers","Update the project to use: # cassandra-unit 2.1.9.2 # dse-driver 2.1.7.1 # cassandra-all 2.1.11  Exclude conflicting netty libraries from the dse-driver dependency.","New Feature",Minor,Closed,"2015-11-23 21:58:52","2015-11-23 21:58:52",21
"Spring DataCass","Update CassandraCqlClusterFactoryBean to support setting TimestampGenerator","Update {{CassandraCqlClusterFactoryBean}} to include a {{setTimestampGenerator(:TimestampGenerator)}} method and update the {{afterPropertiesSet()}} method to set on the {{Cluster.Builder}}.   Example {{TimestampGenerator}} usage:  ",Improvement,Minor,Closed,"2015-11-18 18:30:04","2015-11-18 18:30:04",1
"Spring DataCass","Release 1.3.1 (Gosling)",,Improvement,Minor,Closed,"2015-11-13 18:34:33","2015-11-13 18:34:33",1
"Spring DataCass","Upgrade Datastax Driver","# Upgrade Datastax Driver to latest stable 2.1.9. # Clean up POMs # Verify Tests are passing.","New Feature",Minor,Closed,"2015-11-13 00:39:04","2015-11-13 00:39:04",1
"Spring DataCass","Release 1.1.4 (Evans)",,Improvement,Minor,Closed,"2015-10-14 09:55:51","2015-10-14 08:55:51",1
"Spring DataCass","Documentation about query methods promises a lot that isn't there","The current Spring Data Cassandra documentation section about queries seems to be a direct copy from some other Spring Data project.  Specifically it claims that you can define query methods on repositories. But that will specifically throw an exception in the CassandraQueryLookupStrategy.  And it also mentions Java 8 Stream support. But trying to create a find method that produces a Stream will fail with an exception like this:    Seems it would be better with no documentation than something that is really misleading",Bug,Minor,Closed,"2015-09-10 12:37:23","2015-09-10 11:37:23",5
"Spring DataCass","CassandraCqlClusterFactoryBean won't allow configuration of username/password unless authProvider also given.","{{CassandraCqlClusterFactoryBean.afterPropertiesSet()}} only utilizes the {{username}} property when the {{authProvider}} property is also set.  Looking at the Javadoc for the methods called {{withAuthProvider()}} and {{withCredentials()}} on {{Cluster.Builder}} indicates that you should only ever call one or the other, not both.  I suspect that the intended behavior should be something like:    but unfortunately, there are no unit tests for this class.",Bug,Major,Closed,"2015-09-08 21:00:53","2015-09-08 20:00:53",1
"Spring DataCass","Release 1.3 GA (Gosling)",,Improvement,Minor,Closed,"2015-09-01 05:50:26","2015-09-01 04:50:26",1
"Spring DataCass","Update CassandraCqlClusterFactoryBean so the ProtocolVersion can be set","Update CassandraCqlClusterFactoryBean to include a setProtocolVersion method and update the afterPropertiesSet method to set on the builder.",Improvement,Minor,Closed,"2015-08-13 09:46:53","2015-08-13 08:46:53",1
"Spring DataCass","Release 1.3 RC1 (Gosling)",,Improvement,Minor,Closed,"2015-08-04 01:18:29","2015-08-04 00:18:29",1
"Spring DataCass","Release 1.2.2 (Fowler)",,Improvement,Minor,Closed,"2015-07-28 05:49:09","2015-07-28 04:49:09",1
"Spring DataCass","Simple CassandraRepository implementation is not working","POJO:  ---------   Repository : ----------------   spring-context-config.xml: ----------------------------------   *When i runs the  code,which throws an error message saying like :*  Here is the link: --------------------- http://stackoverflow.com/questions/26710114/cannot-resolve-reference-to-bean-cqltemplate-while-setting-bean-property-cass  Here is the stacktrace: ------------------------------   ",Bug,Major,Closed,"2015-07-27 03:45:55","2015-07-27 02:45:55",26710114
"Spring DataCass","Switch from BeanWrapper to PersistentPropertyAccessor",,Improvement,Minor,Closed,"2015-07-22 11:04:03","2015-07-22 10:04:03",3
"Spring DataCass","Enable CassandraCqlClusterFactoryBean to set QueryOptions at cluster level","Since CassandraCqlClusterFactoryBean has not being able to set consistency level at cluster connection, I add the possibility to set QueryOptions on bean creation.  Pull Request: https://github.com/spring-projects/spring-data-cassandra/pull/31",Improvement,Minor,Closed,"2015-07-08 15:03:08","2015-07-08 14:03:08",1
"Spring DataCass","VerifierMappingException thrown when saving entity with Set of User-Defined Types","Currently it is not possible to save an entity that contains a collection of user-defined types if you explicitly put the type argument <UDTValue> on the field. For example:  *Cassandra Schema:* {code:sql} CREATE KEYSPACE IF NOT EXISTS runtime  WITH REPLICATION = { 'class' : 'NetworkTopologyStrategy', 'datacenter1' : 1 };  USE runtime;  CREATE TYPE IF NOT EXISTS asset (  asset_id bigint,  asset_name text );  CREATE TABLE IF NOT EXISTS customer (  key uuid primary key,  assets set<FROZEN<asset>>, ); {code} *Spring Data Entity:*  {code:java} @Table(customer) public class CustomerEntity implements Serializable {   private static final long serialVersionUID = 1L;   @PrimaryKey(key)  private UUID key;   @Column(assets)  private Set<UDTValue> assets = new HashSet<>();   // omitting getters/setters/equals/etc } {code} *Spring Data Repository:* {code:java} public interface CassandraCustomerRepository extends CassandraRepository<CustomerEntity> { }{code} *Test to reproduce bug:* {code:java} @RunWith(SpringJUnit4ClassRunner.class) public class CassandraCustomerRepositoryTest extends RuntimeEventsTestBase {   @Inject  private CassandraCustomerRepository repository;   @Inject  private CassandraTemplate cassandraTemplate;   @Test  public void testUdtValueBug() {   KeyspaceMetadata keyspaceMetadata = cassandraTemplate.getSession().getCluster().getMetadata().getKeyspace(runtime);   UDTValue asset = keyspaceMetadata.getUserType(asset).newValue();   asset.setLong(asset_id, 1L);   asset.setString(asset_name, Asset 1);    CustomerEntity customer = new CustomerEntity();   customer.setKey(UUID.randomUUID());   customer.getAssets().add(asset);    repository.save(customer);  } } {code} *Stacktrace:* {code:java} Error creating bean with name 'cassandraCustomerRepository': Invocation of init method failed; nested exception is org.springframework.data.cassandra.mapping.VerifierMappingExceptions: com.datastax.driver.core.DataType: Cassandra entities must have the @Table, @Persistent or @PrimaryKeyClass Annotation   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1566)  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)  at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)  at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)  at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:743)  at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)  at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)  at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:125)  at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60)  at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:109)  at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:261)  at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:68)  at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:86)  ... 38 more Caused by: org.springframework.data.cassandra.mapping.VerifierMappingExceptions: com.datastax.driver.core.DataType: Cassandra entities must have the @Table, @Persistent or @PrimaryKeyClass Annotation   at org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityMetadataVerifier.verify(BasicCassandraPersistentEntityMetadataVerifier.java:45)  at org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity.verify(BasicCassandraPersistentEntity.java:198)  at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:297)  at org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator.createAndRegisterProperty(AbstractMappingContext.java:469)  at org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator.doWith(AbstractMappingContext.java:426)  at org.springframework.util.ReflectionUtils.doWithFields(ReflectionUtils.java:607)  at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:294)  at org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator.createAndRegisterProperty(AbstractMappingContext.java:469)  at org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator.doWith(AbstractMappingContext.java:426)  at org.springframework.util.ReflectionUtils.doWithFields(ReflectionUtils.java:607)  at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:294)  at org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator.createAndRegisterProperty(AbstractMappingContext.java:469)  at org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator.doWith(AbstractMappingContext.java:426)  at org.springframework.util.ReflectionUtils.doWithFields(ReflectionUtils.java:607)  at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:294)  at org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator.createAndRegisterProperty(AbstractMappingContext.java:469)  at org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator.doWith(AbstractMappingContext.java:426)  at org.springframework.util.ReflectionUtils.doWithFields(ReflectionUtils.java:607)  at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:294)  at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:180)  at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:140)  at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:67)  at org.springframework.data.cassandra.repository.support.CassandraRepositoryFactory.getEntityInformation(CassandraRepositoryFactory.java:85)  at org.springframework.data.cassandra.repository.support.CassandraRepositoryFactory.getTargetRepository(CassandraRepositoryFactory.java:75)  at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:170)  at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.initAndReturn(RepositoryFactoryBeanSupport.java:239)  at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:225)  at org.springframework.data.cassandra.repository.support.CassandraRepositoryFactoryBean.afterPropertiesSet(CassandraRepositoryFactoryBean.java:61)  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1625)  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1562)  ... 53 more {code}  If the field is changed to just be an un-typed Set without the <UDTValue> parameter: {code:java} @Column(assets) private Set assets = new HashSet(); {code} then this will work, but it would be ideal to be able to provide the proper type arguments to all fields.",Bug,Major,Closed,"2015-06-30 09:56:29","2015-06-30 08:56:29",1
"Spring DataCass","Release 1.2.1 (Fowler)",,Improvement,Minor,Closed,"2015-06-29 23:50:01","2015-06-29 22:50:01",1
"Spring DataCass","Release 1.1.3 (Evans)",,Improvement,Minor,Closed,"2015-06-29 23:49:29","2015-06-29 22:49:29",1
"Spring DataCass","Release 1.0.6 (Dijkstra)",,Improvement,Minor,Closed,"2015-06-29 23:49:01","2015-06-29 22:49:01",1
"Spring DataCass","Supporm @Param to be locate in string  with %:parmName%","This syntax %:name% is used in oracle like embedded expression. When extending cql to support lucene features e.g. via Stratio cassandra-lucene-index the Accessor should also replace embedded argument e.g in this example @Accesor  select * from x,y where startio_col='{...... value : %:name%,..}'  public getList(@Param(name) String name...)  It should out the data if string  as double quote String, java.util.Date as long date.getTime(), and other as their number or true/false, compatible to json convention for such basic object. It can be a special JsonAccessor via Factory or a general default one",Improvement,Major,Closed,"2015-06-24 14:25:31","2015-06-24 13:25:31",4
"Spring DataCass","Upgrade to latest Cassandra driver",,Improvement,Major,Closed,"2015-06-19 04:20:42","2015-06-19 03:20:42",3
"Spring DataCass","On startup CREATE TABLE from entities should only add 'if not exists'.","When setting schema-action=create, the creation of the column family on startup from the entity mapping works only when the table does not already exists. As a consequence, a spring data cassandra app starts up properly and creates the table on its very first startup but will consequently crash on subsequent startups with an AlreadyExistsException.  This happens because CassandraSessionFactoryBean does not ad the if not exists on table creation - line 99 https://github.com/spring-projects/spring-data-cassandra/blob/master/spring-data-cassandra/src/main/java/org/springframework/data/cassandra/config/CassandraSessionFactoryBean.java#L99  Here's a PR to remedy this : https://github.com/spring-projects/spring-data-cassandra/pull/40",Bug,Major,Closed,"2015-06-19 02:04:40","2015-06-19 01:04:40",1
"Spring DataCass","java.lang.NoSuchMethodError: org.springframework.data.mapping.model.BeanWrapper.getProperty","Calling cassandraOperations.insertAsynchronously with a Cassandra entity, a write listener, and write options keeps resulting to the below exception. I'm using spring-data-cassandra 1.2.0.RELEASE with Spring 4.1.5.RELEASE. No other spring-data artifacts are in the project dependency.  ",Bug,Blocker,Closed,"2015-06-16 10:00:40","2015-06-16 09:00:40",1
"Spring DataCass","Add support for LZ4 compression","Add support for LZ4 compression.  This is the default compression in c* and the datastax driver supports it as well.",Improvement,Major,Closed,"2015-06-15 13:27:26","2015-06-15 12:27:26",1
"Spring DataCass","BasicCassandraPersistentProperty.isCompositePrimaryKey produces NPE when getField() returns null","Please, pay attention how supper class ({{AbstractPersistentProperty}}) gets deal with {{field}} property.",Bug,Major,Closed,"2015-06-11 18:33:46","2015-06-11 17:33:46",1
"Spring DataCass","Release 1.3 M1 (Gosling)",,Improvement,Minor,Closed,"2015-06-01 02:10:21","2015-06-01 01:10:21",1
"Spring DataCass","Adapt API to API changes in Spring Data Commons","DATACMNS-542 introduces some API changes that we need to adapt to. Update instructions can be found in the [Spring Data developer group|https://groups.google.com/d/msg/spring-data-dev/iSUX9CujpLA/iIqVt-yYH0UJ].","New Feature",Minor,Closed,"2015-05-19 09:59:37","2015-05-19 08:59:37",3
"Spring DataCass","Add index creation to table creation","Although the 1.2 version contains the @Indexed annotation, when you let Spring Data Cassandra create the table structures, it does not create the necessary secondary indexes on the annotated fields/columns.  I use the following sample code in a custom class of my project to achieve this:   I am able to do this, since my project requires to be able to pilot the creation of the database structure, which forced me to create my own class using the not-so-public CassandraAdminOperations API.  As a side note, it would be nice if the CassandraAdminOperations could be as easily instantiated with Spring XML configuration as the regular CassandraOperations ({{<cassandra:template/>}}).",Improvement,Minor,Closed,"2015-05-18 08:51:14","2015-05-18 07:51:14",1
"Spring DataCass","Add slack integration",,Improvement,Minor,Closed,"2015-05-14 11:48:46","2015-05-14 10:48:46",1
"Spring DataCass","Adapt to changes in Spring Data Commons","We need to tweak to signature of CassandraRepositoryFactory to reflect the changes of DATACMNS-542.  We also need to use the newly introduced {{getTragetRepositoryViaReflection(…)}} to obtain the repository instance via the super class.","New Feature",Minor,Closed,"2015-05-06 13:33:57","2015-05-06 12:33:57",5
"Spring DataCass","Allow application to start if cassandra is unavailable","If cassandra is not available at boot time, CassandraCqlSessionFactoryBean.afterPropertiesSet() causes the application to exit before completing the startup process. It is desirable for my application to complete booting and allow the application to start and report specific errors.  This can be accomplished by making the factory beans operate lazily, retrying the connection on demand and storing the session object once a connection is successfully made.",Improvement,Minor,Open,"2015-04-27 08:54:04","2015-04-27 07:54:04",8
"Spring DataCass","Support statement binding operations in MappingCassandraConverter","MappingCassandraConverter does not support binding mapping POJO instances to prepared statements. This is desirable when using prepared statements.","New Feature",Minor,Closed,"2015-04-27 08:46:13","2015-04-27 07:46:13",8
"Spring DataCass","Remove obsolete Liquibase dependency from Spring CQL",,Improvement,Minor,Closed,"2015-04-13 05:43:31","2015-04-13 04:43:31",1
"Spring DataCass","Release 1.2 GA",,Improvement,Minor,Closed,"2015-03-22 23:56:48","2015-03-22 23:56:48",1
"Spring DataCass","CassandraTemplate @PrimaryKeyColumn annotation, name property, not working on delete","This appears to be pretty much exactly the same as DATACASS-142 that should have been fixed. But I am getting it in 1.1.2 with the attached class  The debug log for inserts looks like this: o.s.cassandra.core.CqlTemplate           : executing [INSERT INTO user_tokens(user_id,token) VALUES (cc375622-9e13-43c7-86f9-963242162ef3,e79db430-d6f3-4ea2-87f5-46a77c42dc8c) USING TTL 599;]  And then the delete look like this: o.s.cassandra.core.CqlTemplate           : executing [DELETE FROM user_tokens WHERE userID=cc375622-9e13-43c7-86f9-963242162ef3 AND token=e79db430-d6f3-4ea2-87f5-46a77c42dc8c;]  Haven't been able to test with 1.2.0.RC1 due to it not working at all (consistently getting java.lang.ClassNotFoundException: org.springframework.cassandra.core.Cancellable for that one.) ",Bug,Critical,Closed,"2015-03-16 05:03:56","2015-03-16 05:03:56",5
"Spring DataCass","Release 1.2 RC1","Please add to Sprint Fowler RC1","New Feature",Minor,Closed,"2015-03-05 00:27:37","2015-03-05 00:27:37",3
"Spring DataCass","Enable CassandraCqlClusterFactoryBean to set QueryOptions at connection level","The only option to set consistency level on Spring Data Cassandra is at query level, but DataStax driver has support to set consistency level at connection (cluster).   Would be good to add support to set consistency level on CassandraCqlClusterFactoryBean.  Pull Request: https://github.com/spring-projects/spring-data-cassandra/pull/31 ",Improvement,Minor,Closed,"2015-02-26 03:39:28","2015-02-26 03:39:28",1
"Spring DataCass","There is no converter registered to convert HeapByteBuffer to byte[]","below is the stack trace:  ",Bug,Critical,Closed,"2015-02-20 10:20:04","2015-02-20 10:20:04",10
"Spring DataCass","Fix misspelled ConsistencyLevel enum constants","Quorum is spelled as {{QUOROM}} for all {{ConsistencyLevel}} enum constants.",Bug,Minor,Closed,"2015-02-16 12:25:27","2015-02-16 12:25:27",1
"Spring DataCass","Use queryBuilder.Update for update operations","Currently the API does not allow to update collections inside the tables. It only allows add,remove and replace operations over collections. Expose com.datastax.driver.core.querbuilder.Update from CassandraOperations and use it to update existing collections in the tables.  Expose com.datastax.driver.core.querbuilder.Update from CassandraOperations. <T> List<T> update(Update update, Class<T> type);  Pull request created. https://github.com/spring-projects/spring-data-cassandra/pull/30  Unit tests included ",Improvement,Minor,Closed,"2015-02-07 09:06:07","2015-02-07 09:06:07",1
"Spring DataCass","<cql:template/> has wrong bean reference","<cql:template/> tag in XML configuration now exports org.springframework.cassandra.CqlTemplate bean, but org.springframework.cassandra.core.CqlTemplate is the right one.",Bug,Minor,Closed,"2015-01-29 07:15:23","2015-01-29 07:15:23",1
"Spring DataCass","ColumnMapper maps varint to Integer","BigInteger columns map to varint in Cassandra.  ColumnReader attempts to read varint columns back as Integers, which throws an exception.  I have submitted a pull request with a test for this condition and a fix.  Stack trace on failure follows:  testQueryWithReference(org.springframework.data.cassandra.test.integration.querymethods.bigintparam.BigIntParamIntegrationTests)  Time elapsed: 0.212 sec  <<< ERROR! com.datastax.driver.core.exceptions.InvalidTypeException: Value number is of type varint  at com.datastax.driver.core.AbstractGettableByIndexData.checkType(AbstractGettableByIndexData.java:73)  at com.datastax.driver.core.AbstractGettableByIndexData.getInt(AbstractGettableByIndexData.java:119)  at com.datastax.driver.core.AbstractGettableData.getInt(AbstractGettableData.java:24)  at org.springframework.data.cassandra.convert.ColumnReader.get(ColumnReader.java:71)  at org.springframework.data.cassandra.convert.ColumnReader.get(ColumnReader.java:38)  at org.springframework.data.cassandra.convert.ColumnReader.get(ColumnReader.java:30)  at org.springframework.data.cassandra.convert.BasicCassandraRowValueProvider.getPropertyValue(BasicCassandraRowValueProvider.java:64)  at org.springframework.data.cassandra.convert.MappingCassandraConverter.readPropertyFromRow(MappingCassandraConverter.java:186)  at org.springframework.data.cassandra.convert.MappingCassandraConverter$1.doWithPersistentProperty(MappingCassandraConverter.java:150)  at org.springframework.data.cassandra.convert.MappingCassandraConverter$1.doWithPersistentProperty(MappingCassandraConverter.java:145)  at org.springframework.data.mapping.model.BasicPersistentEntity.doWithProperties(BasicPersistentEntity.java:309)  at org.springframework.data.cassandra.convert.MappingCassandraConverter.readPropertiesFromRow(MappingCassandraConverter.java:145)  at org.springframework.data.cassandra.convert.MappingCassandraConverter.readEntityFromRow(MappingCassandraConverter.java:137)  at org.springframework.data.cassandra.convert.MappingCassandraConverter.readRow(MappingCassandraConverter.java:114)  at org.springframework.data.cassandra.convert.MappingCassandraConverter.read(MappingCassandraConverter.java:202)  at org.springframework.data.cassandra.repository.query.AbstractCassandraQuery.getSingleEntity(AbstractCassandraQuery.java:176)  at org.springframework.data.cassandra.repository.query.AbstractCassandraQuery.execute(AbstractCassandraQuery.java:133)  at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:395)  at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:373)  at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)  at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)  at com.sun.proxy.$Proxy52.findThingByBigInteger(Unknown Source)  at org.springframework.data.cassandra.test.integration.querymethods.bigintparam.BigIntParamIntegrationTests.testQueryWithReference(BigIntParamIntegrationTests.java:45)","New Feature",Major,Closed,"2015-01-26 17:18:49","2015-01-26 17:18:49",1
"Spring DataCass","Upgrade for Cassandra 2.1 Support","Update the project dependencies to support Cassandra 2.1:  # Update POM version in parent POM for cassandra and dse # Update TableSpecification to use Map<String, Object> for cachingOptions # Remove old support for single String CachingOption # Remove `replicate_on_write` table option (Removed in C* 1.2) # update to deserialize() method calls on DSE driver to pass ProtocolVersion enum as second arg.","New Feature",Critical,Closed,"2015-01-26 11:18:05","2015-01-26 11:18:05",8
"Spring DataCass","Reconsider usage of ingestions for general CQL test cases","The test cases in {{CQLOperationsTests}} are using {{CqlTemplate.ingest(…)}} to ingest data into Cassandra. This is an asynchronous operation but the test cases assert on the presence of the just inserted data right after the ingestion.  This causes the test cases to be likely to fail in case the machine isn't able to insert the data right away.",Bug,Minor,Closed,"2015-01-26 06:17:52","2015-01-26 06:17:52",3
"Spring DataCass","Release 1.1.2",,"New Feature",Minor,Closed,"2015-01-20 01:39:33","2015-01-20 01:39:33",5
"Spring DataCass","Release 1.0.5",,"New Feature",Minor,Closed,"2015-01-20 01:38:59","2015-01-20 01:38:59",5
"Spring DataCass","Add ability to update/store null into fields","Spring Data REST supports Spring Data Cassandra. Doing a PUT with a subset of fields causes non-specified fields to be nulled out. But when the save() operation is sent over to Spring Data Cassandra, the null fields get filtered out.   We need a way to empty out fields through a repository.save() operation to support the semantics of PUT.",Bug,Minor,Closed,"2015-01-16 11:23:14","2015-01-16 11:23:14",1
"Spring DataCass","update cassandra-driver-core dependency to 2.1","Apache cassandra 2.1.x has bean release with a lot [features|http://www.datastax.com/documentation/cassandra/2.1/cassandra/features2.html] such as Collection indexes which is very useful.    Wish spring-data-cassandra can  update  cassandra-driver-core dependency to [2.1|https://github.com/datastax/java-driver] . It's [changelog |https://github.com/datastax/java-driver/blob/2.1/driver-core/CHANGELOG.rst] should be referenced. ",Improvement,Minor,Closed,"2015-01-03 21:25:41","2015-01-03 21:25:41",10
"Spring DataCass","AlterTableSpecification add column produces syntax error","spring-data-cassandra : 1.0.4-RELEASE Cassandra : 2.0.4 DataStax Java Driver for Apache Cassandra - Core : 2.0.2     Above code produce the following syntax : {quote} ALTER TABLE document ADD tid TYPE varchar; {quote} The correct syntax should be: {quote} alter table document add tid varchar; {quote} The stacktrace : com.datastax.driver.core.exceptions.SyntaxError: line 1:39 no viable alternative at input 'TYPE'  at com.datastax.driver.core.exceptions.SyntaxError.copy(SyntaxError.java:35)  at com.datastax.driver.core.DefaultResultSetFuture.extractCauseFromExecutionException(DefaultResultSetFuture.java:256)  at com.datastax.driver.core.DefaultResultSetFuture.getUninterruptibly(DefaultResultSetFuture.java:172)  at com.datastax.driver.core.SessionManager.execute(SessionManager.java:92)  at com.datastax.driver.core.SessionManager.execute(SessionManager.java:84) ",Bug,Minor,Closed,"2014-12-09 22:50:51","2014-12-09 22:50:51",1
"Spring DataCass","async* method signatures returning Cancelable Vs AsyncResult","Apologies in advance if I'm missing something obvious here, but wouldn't returning something along the lines of     make more sense than returning something that can only be cancelled and forces you to pass a callback (the various Read/Write Listeners)?  The following has popped up in testing, so realize the use case is a bit artificial but illustrates my problem (as a Spock Test Case):  {code:groovy:title=SpockSpec.groovy}      void Test Insert EmotiveScore() {          setup:         int records = 1000000         int partitionSize = 10000          Random random = new Random()         Date date = new Date()          List<EmotiveScore> scores = new ArrayList<>(records)          for (int i = 0; i < records; i++) {             EmotiveScore es = new EmotiveScore()              // --- Details omitted for brevity             scores[i] = es         }          final WriteOptions writeOptions = new WriteOptions(consistencyLevel: ConsistencyLevel.QUOROM, retryPolicy: RetryPolicy.LOGGING, ttl: 30000)          def collated = scores.collate(partitionSize)         scores.clear()          // Yes, I know I should just use Cancelable here         List<ResultSetFutureCancellable> results = new ArrayList<ResultSetFutureCancellable>(records)          collated.eachWithIndex { it, i ->             it.stream().forEach(new Consumer<EmotiveScore>() {                 @Override                 void accept(EmotiveScore emotiveScore) {                    results << essTemplate.insertAsynchronously(emotiveScore, null, writeOptions)                 }             })             it.clear()           }         /////////////////////////////////////////////////////////////////////////////////////////////////////////         // The only way I can wait for the entire collection to complete is  //         // via the magic of Groovy being able to get the private rsf object.//         // AFAIK, in Java this would be impossible given the interface     //         /////////////////////////////////////////////////////////////////////////////////////////////////////////         results*.rsf*.getUninterruptibly(10, TimeUnit.SECONDS)                when:         // And yes, realize this is a bad idea in general with Cassandra         def c = essTemplate.count(EmotiveScore)          then:         c == records         println c     } {code}  Realizing I could code up some bespoke solution using the callbacks/listeners and a counter or something similar, but that feels incredibly odd.  Am I missing some context on why the chosen approach makes more sense or am I just totally off base with this?  _Just a final thanks in general, tackling any kind of standard abstraction over Cassandra is truly God's work._",Improvement,Minor,Closed,"2014-12-06 19:44:21","2014-12-06 19:44:21",100
"Spring DataCass","The document is not updated Overriding default mapping with custom converters","The document is not updated http://docs.spring.io/spring-data/cassandra/docs/current/reference/html/#cassandra.custom-converters  Its lot of trouble using the custom converters without any info in the documents. ","New Feature",Major,Resolved,"2014-12-05 19:07:23","2014-12-05 19:07:23",1
"Spring DataCass","Add test for @Transient property handling","See http://stackoverflow.com/questions/26775427/how-to-ignore-an-entity-field-in-spring-data-cassandra.  This involves two things:   * Write a test to make sure the functionality remains like this.  * Mention this in documentation.",Improvement,Minor,Closed,"2014-12-02 02:23:45","2014-12-02 02:23:45",0
"Spring DataCass","Support table options when creating tables","Thought I had reported this previously, but couldn't find any mention of it. https://github.com/spring-projects/spring-data-cassandra/blob/ff41674809f2fa27362d361ad78730da1d6ebbd8/spring-data-cassandra/src/main/java/org/springframework/data/cassandra/config/CassandraSessionFactoryBean.java#L99 mentions a TODO for this, so it does not seem to be supported.  Specifically, I'd like to be able to set compaction strategy. This is a showstopper for us to use the SchemaActions functionality that Spring Data Cassandra comes with. Currently I have implemented table creation as a custom repository method.  Let me know if this is a duplicate of preexisting ticket.",Improvement,Minor,Open,"2014-12-02 01:32:24","2014-12-02 01:32:24",0
"Spring DataCass","SchemaAction: Support for adding/removing columns","Currently Spring Data Cassandra allows creation and recreation of keyspaces on startup (SchemaAction). Spring Data JPA also supports this but on a column level. That is, on startup is issues  on startup.  I'm not sure they support removal of columns, and I leave that up to the implementer whether to implement in this ticket or not.",Improvement,Minor,Open,"2014-12-02 01:13:02","2014-12-02 01:13:02",0
"Spring DataCass","Release 1.2 M1",,Improvement,Minor,Closed,"2014-11-28 02:33:31","2014-11-28 02:33:31",1
"Spring DataCass","Investigate support for datastax annotation metamodel","datastax has some basic crud / object mapping already build in the datastax driver: http://www.datastax.com/documentation/developer/java-driver/2.1/java-driver/reference/crudOperations.html they also have an annotation based metamodel: https://github.com/datastax/java-driver/tree/2.1/driver-mapping/src/main/java/com/datastax/driver/mapping/annotations We should investigate whether it would make sense to support that in SD Cassandra as well.","New Feature",Minor,Closed,"2014-11-28 01:54:04","2014-11-28 01:54:04",1000
"Spring DataCass","Cassandra-All has test scope in pom.xml","When upgrading from 1.0.4.RELEASE to 1.1.1.RELEASE there seems to be an issue where I cannot compile my project due to cassandra-all not being included on the classpath. When looking at the pom.xml file it was marked as test scope.",Bug,Blocker,Closed,"2014-11-14 12:21:36","2014-11-14 12:21:36",10
"Spring DataCass","BLOB to ByteBuffer gives incorrect data.","I couldn't find a report on this(http://stackoverflow.com/questions/25359928/spring-data-cassandra-2-0-select-blob-column-returns-incorrect-bytebuffer-data) issue here, so I'll just leave the link here.","New Feature",Minor,Closed,"2014-11-13 03:53:41","2014-11-13 03:53:41",2
"Spring DataCass","Ability to null out column values","Sometimes there is a need to null out values previously set column values.  Also, since in cassandra an insert is treated as an upsert. It would be good to have the option to clear out previously set values in the case where an insert is actually an update.  ","New Feature",Minor,Closed,"2014-11-12 08:30:55","2014-11-12 08:30:55",2
"Spring DataCass","cassandraTemplate.select() method doesnt take Statement as an argument","It is not possible to call cassandraTemplate.select() method after creating a Statement via QueryBuilder, as it takes only Select as an argument  //example val select: Statement = QueryBuilder.select().all().from(tableName).setFetchSize(maxResults)  Statement appears as a Base Class for Select and others, cassandraTemplate is tailored specifically for Select.   ",Improvement,Minor,Closed,"2014-11-02 14:18:10","2014-11-02 14:18:10",3
"Spring DataCass","Transaction Management Support in Spring Data Cassandra","Spring Data Cassandra does not support Transaction Management.This should be implemented as a full fledged support so that transactions can be supported in a way supported by Spring instead of the user handling transaction management separately.This should be included with the Spring Data Cassandra module.",Improvement,Critical,Closed,"2014-10-31 09:37:45","2014-10-31 09:37:45",3
"Spring DataCass","Missing 'this' qualifier in BasicMapId constructor that takes a Map","Created for https://github.com/spring-projects/spring-data-cassandra/pull/27","New Feature",Trivial,Closed,"2014-10-31 06:37:25","2014-10-31 06:37:25",1
"Spring DataCass","Release 1.1.1",,"New Feature",Major,Closed,"2014-10-30 03:56:01","2014-10-30 03:56:01",1
"Spring DataCass","Release 1.1.1",,Improvement,Minor,Closed,"2014-10-30 02:45:39","2014-10-30 02:45:39",1
"Spring DataCass","CassandraCqlClusterFactoryBean doesn't consider maxConnections while validating coreConnection values","The max values should be set before setting core values. Otherwise the core values will be compared with the default max values which is 8.  The stacktrace as below   Caused by: java.lang.IllegalArgumentException: Core connections for LOCAL hosts must be less than max (100 > 8)  at com.datastax.driver.core.PoolingOptions.checkConnectionsPerHostOrder(PoolingOptions.java:323)  at com.datastax.driver.core.PoolingOptions.setCoreConnectionsPerHost(PoolingOptions.java:203)  at org.springframework.cassandra.config.PoolingOptionsFactoryBean.afterPropertiesSet(PoolingOptionsFactoryBean.java:70)  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1613)  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1550)  ... 19 more  Also when modifying min & max simultaneous connections  Caused by: java.lang.IllegalArgumentException: Min simultaneous requests per connection for LOCAL hosts must be less than max (110 > 100) at com.datastax.driver.core.PoolingOptions.checkRequestsPerConnectionOrder(PoolingOptions.java:317) at com.datastax.driver.core.PoolingOptions.setMinSimultaneousRequestsPerConnectionThreshold(PoolingOptions.java:118) at org.springframework.cassandra.config.PoolingOptionsFactoryBean.afterPropertiesSet(PoolingOptionsFactoryBean.java:62) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1613) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1550) ... 19 more   I have provided the pull request for the fix https://github.com/spring-projects/spring-data-cassandra/pull/26",Bug,Critical,Closed,"2014-10-29 05:49:48","2014-10-29 05:49:48",1
"Spring DataCass","Simple Person example using queryForObject not working","I was trying CassandraTemplate queryForObject function, queryForList function etc, with example of Person from http://docs.spring.io/spring-data/cassandra/docs/1.1.0.RELEASE/reference/html/  template.insert(new Person(1234567890, <USER>, 40)); Select s = QueryBuilder.select().from(person);  s.where(QueryBuilder.eq(id, 1234567890));  System.out.println(template.queryForObject(s, Person.class));  While inserting the record gets inserted, though while querying only id is returned not the Person class, whereas cqlsh returns data properly  12142 DEBUG o.s.cassandra.core.CqlTemplate - executing [SELECT * FROM person WHERE id='1234567890';] System.out.println -> 1234567890  cqlsh> select * from person;   id         | age | name ------------+-----+-------  1234567890 |  40 | <USER> (1 rows)",Bug,Major,Closed,"2014-10-10 02:02:21","2014-10-10 01:02:21",3
"Spring DataCass","StackOverflowError in CassandraAdminTemplate#dropTable(Class<?>)","{{CassandraTemplate#determineTableName}} is called recursively which leads to a StackOverflow. This happens on {{CassandraAdminTemplate#dropTable}}  ",Bug,Minor,Closed,"2014-10-09 11:26:37","2014-10-09 10:26:37",0
"Spring DataCass","CassandraAdminTemplate#createTable does not honor ifNotExists argument","Method argument {{ifNotExists}} is not used in {{CassandraAdminTemplate#createTable}}. This leads to errors if tables should be created only if they do not exist.",Bug,Minor,Closed,"2014-10-09 05:03:33","2014-10-09 04:03:33",0
"Spring DataCass","Add support for User-defined types.","CQL 3 supports User Defined types, and I was able to create these types in CASSANDRA, but from Java driver perspective ArrayBackedRow has no handling specified for DataType.Name.CUSTOM, neither any annotations which can be used for storing / loading custom types in cassandra.  Not sure if I m missing something pls help, otherwise lets implement this feature as well",Improvement,Major,Closed,"2014-10-09 04:58:59","2014-10-09 03:58:59",3
"Spring DataCass","General documentation fixes","Several of the links from this page are broken or don't exist, and should be removed or point to such documentation is available:  http://projects.spring.io/spring-data-cassandra.  Also there are several unfinished sections of http://docs.spring.io/spring-data/cassandra/docs/1.1.0.RELEASE/reference/html/ -- one request for more information about Cassandra repositories (one of the missing sections) is already here:  http://bit.ly/1nvu4mk",Improvement,Minor,Closed,"2014-09-28 21:06:00","2014-09-28 20:06:00",1
"Spring DataCass","Add Documentation / Examples for SimpleCassandraRepository to Reference Guide","It would be helpful if http://docs.spring.io/spring-data/cassandra/docs/1.1.0.RELEASE/reference/html/ mentioned the SimpleCassandraRepository, and showed a basic example of using it, especially, how to configure and wire up the constructor arguments (especially EntityInformation).  ",Improvement,Minor,Closed,"2014-09-28 21:00:32","2014-09-28 20:00:32",1
"Spring DataCass","Deal with breaking changes introduced in cassandra-driver-dse 2.1.0 & later","The Datastax team introduced breaking changes to public APIs in version 2.1.0.  This issue tracks dealing with those.","New Feature",Major,Closed,"2014-09-27 10:26:59","2014-09-27 09:26:59",5
"Spring DataCass","Enable cancellation of asynchronous CqlOperations methods",,"New Feature",Minor,Closed,"2014-09-22 09:14:17","2014-09-22 08:14:17",5
"Spring DataCass","Support for embeddable types","Note:  taken from https://github.com/spring-projects/spring-data-cassandra/issues/16  Background: http://stackoverflow.com/questions/24265791/how-to-use-composite-entity-in-spring-data-cassandra  Request: Support for embeddable types that map to a subset of table columns. ","New Feature",Minor,Closed,"2014-09-17 05:19:57","2014-09-17 04:19:57",5
"Spring DataCass","Throw IllegalArgumentException if a column is requested that isn't in the table","See https://github.com/spring-projects/spring-data-cassandra/pull/19","New Feature",Minor,Closed,"2014-09-17 03:48:37","2014-09-17 02:48:37",2
"Spring DataCass","Release 1.1 GA",,"New Feature",Minor,Closed,"2014-09-04 04:32:44","2014-09-04 03:32:44",1
"Spring DataCass","Support strongly-typed, user-defined primary key interfaces","Users can define primary key classes themselves, which is kind of a pain.  Alternatively, they can use SDC's convenient {{MapId}} interface and {{BasicMapId}} class, however, these are not typesafe.  This request is to allow a user to define a strongly-typed primary key interface, annotated with a new annotation like {{@PrimaryKey}} or similar or that extends or implements interface {{MapId}} for which SDC scans at application initialization time and generates an implementation, probably via JDK dynamic proxies.  An SDC-provided primary key interface factory class would also have to be provided so that application code can easily instantiate said generated implementations of primary key interfaces.","New Feature",Minor,Closed,"2014-09-02 15:03:46","2014-09-02 14:03:46",5
"Spring DataCass","SDC*-provided repository interfaces are missing @NoRepositoryBean annotation","{{TypedIdCassandraRepository}} & {{CassandraRepository}} should be annotated with {{@NoRepositoryBean}}","New Feature",Trivial,Closed,"2014-08-29 10:01:55","2014-08-29 09:01:55",1
"Spring DataCass","XML <mapping> attribute entity-base-packages is ignored","{{CassandraMappingContextParser}} is ignoring the {{entity-base-packages}} attribute, causing the {{initialEntitySet}} property on {{BasicCassandraMappingContext}} to not be populated.  This can cause downstream errors if {{SchemaAction}} is set to a value that causes tables to be created.","New Feature",Major,Closed,"2014-08-29 08:16:52","2014-08-29 07:16:52",3
"Spring DataCass","Saving too many items fails","Problem: When I call `CassandraRepository#save(...)` with too many items I get an exception:  ERROR [2014-08-29 10:13:54,906] my.project.Klazz: Could not store stuff ! com.datastax.driver.core.exceptions.DriverInternalError: An unexpected error occurred server side on /10.11.1.32:9042: java.lang.IndexOutOfBoundsException: Index: 5482, Size: 5482 ! at com.datastax.driver.core.exceptions.DriverInternalError.copy(DriverInternalError.java:42) ! at com.datastax.driver.core.DefaultResultSetFuture.extractCauseFromExecutionException(DefaultResultSetFuture.java:256) ! at com.datastax.driver.core.DefaultResultSetFuture.getUninterruptibly(DefaultResultSetFuture.java:172) ! at com.datastax.driver.core.SessionManager.execute(SessionManager.java:92) ! at org.springframework.cassandra.core.CqlTemplate$12.doInSession(CqlTemplate.java:518) ! at org.springframework.cassandra.core.CqlTemplate$12.doInSession(CqlTemplate.java:509) ! at org.springframework.cassandra.core.CqlTemplate.doExecute(CqlTemplate.java:486) ! at org.springframework.cassandra.core.CqlTemplate.doExecute(CqlTemplate.java:509) ! at org.springframework.cassandra.core.CqlTemplate.execute(CqlTemplate.java:1197) ! at org.springframework.data.cassandra.core.CassandraTemplate.batchInsert(CassandraTemplate.java:547) ! at org.springframework.data.cassandra.core.CassandraTemplate.insert(CassandraTemplate.java:201) ! at org.springframework.data.cassandra.core.CassandraTemplate.insert(CassandraTemplate.java:196) ! at org.springframework.data.cassandra.repository.support.SimpleCassandraRepository.save(SimpleCassandraRepository.java:64) ! at org.springframework.data.cassandra.repository.support.SimpleCassandraRepository.save(SimpleCassandraRepository.java:36) ! at sun.reflect.GeneratedMethodAccessor414.invoke(Unknown Source) ! at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ! at java.lang.reflect.Method.invoke(Method.java:606) ! at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:405) ! at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:390) ! at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:344) ! at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) ! at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) ! at com.sun.proxy.$Proxy157.save(Unknown Source) ! at my.project.SomeOtherKlazz.process(SomeOtherKlazz.java:319) ! at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) ! at java.util.concurrent.FutureTask.run(FutureTask.java:262) ! at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) ! at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) ! at java.lang.Thread.run(Thread.java:745) Caused by: ! com.datastax.driver.core.exceptions.DriverInternalError: An unexpected error occurred server side on /10.11.1.32:9042: java.lang.IndexOutOfBoundsException: Index: 5482, Size: 5482 ! at com.datastax.driver.core.Responses$Error.asException(Responses.java:86) ! at com.datastax.driver.core.DefaultResultSetFuture.onSet(DefaultResultSetFuture.java:108) ! at com.datastax.driver.core.RequestHandler.setFinalResult(RequestHandler.java:235) ! at com.datastax.driver.core.RequestHandler.onSet(RequestHandler.java:367) ! at com.datastax.driver.core.Connection$Dispatcher.messageReceived(Connection.java:571) ! at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70) ! at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564) ! at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791) ! at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296) ! at org.jboss.netty.handler.codec.oneone.OneToOneDecoder.handleUpstream(OneToOneDecoder.java:70) ! at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564) ! at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791) ! at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296) ! at org.jboss.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:462) ! at org.jboss.netty.handler.codec.frame.FrameDecoder.callDecode(FrameDecoder.java:443) ! at org.jboss.netty.handler.codec.frame.FrameDecoder.messageReceived(FrameDecoder.java:303) ! at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70) ! at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564) ! at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559) ! at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268) ! at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255) ! at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88) ! at org.jboss.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:109) ! at org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:312) ! at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:90) ! at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178) ! at org.jboss.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108) ! at org.jboss.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:42) !... 3 common frames omitted  In Cassandra I am getting:      WARN [Native-Transport-Requests:683742] 2014-08-29 10:22:14,838 BatchStatement.java (line 223) Batch of prepared statements for [mykeyspace.mytable] is of size 229558, exceeding specified threshold of 65536 by 164022.  I would expect spring-data-cassandra to take care of the smaller batching for me.  Workaround: Implement a custom repository method that saves the items in small batches.",Bug,Minor,Closed,"2014-08-29 06:31:06","2014-08-29 05:31:06",0
"Spring DataCass","Paging support for findAll()","This issue came out of http://stackoverflow.com/a/25531203/260805. Currently `findAll()` calls on a `CassandraRepository` will fetch all items into memory. This does not sound sane when using Cassandra, since it's built for massive data storage capabilities.","New Feature",Minor,Closed,"2014-08-29 06:24:12","2014-08-29 05:24:12",0
"Spring DataCass","NPE in CqlTemplate due to uninitialized exception translator",,"New Feature",Minor,Closed,"2014-08-27 09:03:42","2014-08-27 08:03:42",1
"Spring DataCass","Clarify javadoc for CqlOperations methods involving PreparedStatements",,"New Feature",Minor,Closed,"2014-08-27 07:52:56","2014-08-27 06:52:56",1
"Spring DataCass","CqlTemplate execute(PreparedStatementCreator,PreparedStatementCallback<T>) swallows translated exception","There's an inadvertent missing throw directive in {{CqlTemplate#execute(PreparedStatementCreator,PreparedStatementCallback<T>)}} & needs to be added.","New Feature",Minor,Closed,"2014-08-26 16:38:20","2014-08-26 15:38:20",1
"Spring DataCass","CqlOperations' ingest method signatures taking WriteOptions need to be changed to take QueryOptions","It is impossible for {{CqlTemplate}}'s implementation of {{ingest}} methods to apply any options other than those in {{QueryOptions}} to the given query.  As such, the signature of the {{ingest}} methods that take a {{WriteOptions}} should be changed to take a {{QueryOptions}} instead.","New Feature",Minor,Closed,"2014-08-26 14:33:50","2014-08-26 13:33:50",5
"Spring DataCass","Add option for TIMESTAMP in WriteOptions","Class WriteOptions doesn't support TIMESTAMP.  Needs to be added.","New Feature",Minor,Closed,"2014-08-26 12:05:50","2014-08-26 11:05:50",5
"Spring DataCass","Release 1.0.4",,Improvement,Minor,Closed,"2014-08-26 05:25:06","2014-08-26 04:25:06",0
"Spring DataCass","Polish reference documentation",,Improvement,Minor,Closed,"2014-08-22 07:49:30","2014-08-22 06:49:30",1
"Spring DataCass","CqlTemplate should not manually call its own afterPropertiesSet() method","CqlTemplate is calling afterPropertiesSet() in its constructor, which it shouldn't be.  This should be left to the Spring container to do.",Bug,Trivial,Closed,"2014-08-19 08:56:01","2014-08-19 07:56:01",1
"Spring DataCass","Release 1.1 RC1","Please set fix version to 1.1 RC1 (Evans) and add to current Sprint 52 (RC1)","New Feature",Minor,Closed,"2014-08-12 04:39:31","2014-08-12 03:39:31",1
"Spring DataCass","Move to Asciidoctor for reference documentation",,Improvement,Minor,Closed,"2014-08-07 07:34:43","2014-08-07 06:34:43",1
"Spring DataCass","Add support for custom implementations in CDI repositories",,"New Feature",Minor,Closed,"2014-08-07 06:11:47","2014-08-07 05:11:47",3
"Spring DataCass","Can't save empty list","A `CassandraRepository` throws an `AssertionException` when an empty list is save by calling `CassandraRepository#save(...)`. We recently migrated from Spring Data JPA that silently handles an empty list.  Proposal: That `CassandraRepository` makes it a no-op saving an empty list.",Improvement,Minor,Closed,"2014-08-06 03:22:10","2014-08-06 02:22:10",0
"Spring DataCass","Nobody knows what a Story Point is","When creating an issue here in JIRA I am required to fill out a Story Points field. As a submitter and non-contributer to the project I have _no_ idea what I should fill out in this field.  Proposal: Either remove it or make it optional for a maintainer to fill out.",Improvement,Minor,Closed,"2014-08-06 03:18:37","2014-08-06 02:18:37",3.141592654
"Spring DataCass","Enhance repository methods to accept QueryOptions as arguments","Background:  * https://groups.google.com/d/msg/spring-data-cassandra/DbW2sp0jg9k/uWLaaERH_3QJ  * http://stackoverflow.com/q/25066566/260805  Currently it looks the only way to use a custom consistency level is to implement a custom repository. This makes much of the common functionality that spring-data usually comes with unusable.",Improvement,Major,Resolved,"2014-07-31 15:13:39","2014-07-31 14:13:39",0
"Spring DataCass","Support for QueryOptions and WriteOptions with repository query methods","Background:  * https://groups.google.com/d/msg/spring-data-cassandra/DbW2sp0jg9k/uWLaaERH_3QJ  * http://stackoverflow.com/questions/25066566/what-is-the-default-consistency-level-in-spring-data-cassandra/25067501#25067501  Currently it looks the only way to use a custom consistency level is to implement a custom repository. This makes much of the common functionality that spring-data usually comes with unusable.",Improvement,Major,Closed,"2014-07-31 15:10:54","2014-07-31 14:10:54",0
"Spring DataCass","async repository operations be overloaded to take optional callbacks.","in CassaandraTemplate we have the insertAsynchronously and deleteAsynchronously methods. both doesn't have an overloading method that accepts a callback for success/failure when completed (in both cases the underlying CQLTemplate doesn't support callback parameter as well).  also missing is a selectAsynchronously method. the underlying CQLTemplate does offers the queryAsynchronously method which works well but it doesn't support the automatically data conversion to the entity type (as the select method offers).  as a general request it would be nice if you can overload the method with the CompletableFuture (java.util.concurrent) argument that will make the API even simpler to use.","New Feature",Major,Closed,"2014-07-29 09:48:11","2014-07-29 08:48:11",2
"Spring DataCass","Release 1.0.2",,Improvement,Minor,Closed,"2014-07-28 01:15:22","2014-07-28 00:15:22",1
"Spring DataCass","CassandraTemplate @PrimaryKeyColumn annotation, name property, not working on delete","I am using spring-data-cassandra module.  I have an annotated bean using the @Table annotation and a primary class using the @PrimaryKeyClass  the primary key class has 5 primary key columns (2 partitioned and 3 clustered). 2 of my columns has the name property i.e.:  @PrimaryKeyColumn(name=correlated_type, ordinal = 2, type= PrimaryKeyType.CLUSTERED) private String correlatedType; When using the CassandraTemplate insert operation everything is working fine but when i am using the cassandraTemplate.deleteAsynchronously(List<entities> list) the columns name are not parsed using the name property but maintain the field name (correlatedType instead of correlated_type).  i tried using a regular delete operation for a single object and tried to use the forceQuote = true property both didn't help.  insert log sample: [o.s.cassandra.core.CqlTemplate]     asynchronously executing [INSERT INTO identity_correlations(type,value,**correlated_type**,ts,**correlated_value**,extra) VALUES ('Participant','p5','Visitor',4,'R3',{'v':'1','labels':'b,c'}) USING TTL 34128000;  delete log sample: [o.s.cassandra.core.CqlTemplate]     asynchronously executing [BEGIN BATCH DELETE  FROM identity_correlations WHERE **correlatedValue**='p5' AND **correlatedType**='Participant' AND type='Visit' AND value='v1' AND ts=1;DELETE  FROM identity_correlations WHERE correlatedValue='R3' AND correlatedType='Visitor' AND type='Participant' AND value='p5' AND ts=4;DELETE  FROM identity_correlations WHERE correlatedValue='R3' AND correlatedType='Visitor' AND type='Participant' AND value='p5' AND ts=3;APPLY BATCH;] ",Bug,Critical,Closed,"2014-07-27 03:14:47","2014-07-27 02:14:47",5
"Spring DataCass","Support for enumeration mapping","Trying to save an entity with an enumeration field yields to   java.lang.IllegalArgumentException: Invalid value SOMEVALUE of type unknown to the query builder  in com.datastax.driver.core.querybuilder.Utils:134  IMHO there are two ways to solve this bug: 1. Map enum values in spring-data-cassandra 2. Have Datastax Java Driver map enums  If you decide to go 2. please add a link to the remote tracker to this issue",Improvement,Minor,Closed,"2014-07-23 16:27:47","2014-07-23 15:27:47",5
"Spring DataCass","Release 1.1 M1","Release SD Cassandra 1.1 M1.  Please add to Spring 50 - Evans M1 and set fix version to 1.1 M1.","New Feature",Minor,Closed,"2014-07-08 03:31:41","2014-07-08 02:31:41",1
"Spring DataCass","ingest() methods do not cache PreparedStatements causing performance bottleneck","in CQLOperations/CQLTemplate, the ingest methods take only a CQL String a a multidimensional data structure, and they convert the CQL to a PreparedStatement.   Currently, the module prepares the statement for every call and this is not the proper way to use PreparedStatements with Cassandra.  Figure out a way to cache the preparedStatements based on the CQL String value to prevent preparing the statement with each call to ingest().",Bug,Blocker,Closed,"2014-07-04 12:45:32","2014-07-04 11:45:32",5
"Spring DataCass","Release 1.0.1","Please add to Spring 49 and set fix version to 1.0.1 (Dijkstra SR1)","New Feature",Minor,Closed,"2014-06-27 05:45:23","2014-06-27 04:45:23",1
"Spring DataCass","Add new ConsistencyLevels to CqlTemplate","The latest DataStax driver added 3 new ConsistencyLevels that need to be added to the ConsistencyLevelResolver.  # LOCAL_ONE # SERIAL # LOCAL_SERIAL","New Feature",Critical,Closed,"2014-06-11 22:11:40","2014-06-11 21:11:40",1
"Spring DataCass","Cassandra-all dependency","Documentation states that spring-data-cassandra is datastax-driver based. Are you sure you need  org.apache.cassandra:cassandra-all:2.0.6 as dependency? It makes the output unreasonably fat...    ",Improvement,Minor,Closed,"2014-06-08 06:19:53","2014-06-08 05:19:53",1
"Spring DataCass","Reference documentation build broken",,Bug,Major,Closed,"2014-05-20 13:28:59","2014-05-20 12:28:59",3
"Spring DataCass","Add plugin repository to pom.xml to make sure Bundlor can be resolved",,Improvement,Minor,Closed,"2014-05-20 11:20:21","2014-05-20 10:20:21",1
"Spring DataCass","Binding Dates fails with DSE 2.0.1 Driver","    After upgrading the server to DSE 3.1.6, we now get the following error from the driver when trying to bind a Date to a preparedStatement. We do not see this issue when using the 2.0.1 driver with DSE 4.0.2. Please advise.      Caused by: com.datastax.driver.core.exceptions.InvalidQueryException: unable to coerce '2014-05-17T00:00:00.000+0000' to a formatted date (long)     at com.datastax.driver.core.Responses$Error.asException(Responses.java:96) ~[cassandra-driver-core-2.0.1.jar:na]     at com.datastax.driver.core.DefaultResultSetFuture.onSet(DefaultResultSetFuture.java:108) ~[cassandra-driver-core-2.0.1.jar:na]     at com.datastax.driver.core.RequestHandler.setFinalResult(RequestHandler.java:228) ~[cassandra-driver-core-2.0.1.jar:na]     at com.datastax.driver.core.RequestHandler.onSet(RequestHandler.java:354) ~[cassandra-driver-core-2.0.1.jar:na]     at com.datastax.driver.core.Connection$Dispatcher.messageReceived(Connection.java:571) ~[cassandra-driver-core-2.0.1.jar:na]",Bug,Blocker,Closed,"2014-05-19 12:38:48","2014-05-19 11:38:48",1
"Spring DataCass","Remove obsolete CGLib dependency","CGLib shouldn't be required as dependency anymore as Spring's JavaConfig mechanism (previously requiring the lib) now ships with an inlined CGLib anyway.",Improvement,Minor,Closed,"2014-05-19 03:53:54","2014-05-19 02:53:54",1
"Spring DataCass","Release 1.0 GA",,"New Feature",Minor,Closed,"2014-05-19 03:53:18","2014-05-19 02:53:18",1
"Spring DataCass","NPE on CassandraSessionFactoryBean when schemaAction not set","The CassandraSessionFactoryBean has a protected attribute schemaAction.  afterPropertiesSet() does not ensure this is not null, and performSchemaAction() throws a NPE when this is not set.  Solution: When initializing the attribute, default to NONE.  ",Bug,Minor,Closed,"2014-05-18 13:50:26","2014-05-18 12:50:26",1
"Spring DataCass","CassandraTemplate in XML Config defaulting to cqlTemplate bean id.","The CassandraTemplateParser extends CassandraCqlTemplateParser, and the resolveId() method in CassandraTemplateParser calls super.resolveId().  In the case where you create a <cassandra:template/> in XML Configuration, the bean gets the id cqlTemplate instead of the desired name cassandraTemplate.  ","New Feature",Critical,Closed,"2014-05-18 08:13:09","2014-05-18 07:13:09",1
"Spring DataCass","Improve mapping specifications between Cassandra & Java","{{CassandraSimpleTypeHolder}}'s static block initializes Cassandra/Java type mappings by iterating over the value returned by Cassandra's {{DataType.allPrimitiveTypes()}}.  The order in which {{DataType}} instances are returned is not guaranteed, and, further, multiple Cassandra types map to a single Java type.  Cassandra types {{ASCII}}, {{VARCHAR}} & {{TEXT}} map to {{java.lang.String}}; {{BIGINT}} & {{COUNTER}} map to {{java.lang.Long}}; {{BLOB}} & {{CUSTOM}} map to {{java.nio.ByteBuffer}}; {{UUID}} & {{TIMEUUID}} map to {{java.util.UUID}}.  This means that if, during schema generation, the generator encounters a Java type that maps to multiple C* types ({{String}}, {{Long}}, {{ByteBuffer}}, or {{UUID}}), the generator can't know the C* type that should be used; it must be told.  We'll consider adding an attribute {{??? dataType() default ???}} with an appropriate default to the {{@Column}} annotation so that developers can disambiguate the C* type to be used.  We can't use {{DataType.Name}} for the attribute's type since there's no enum value meaning no type.  If schema generation is *not* being used, then this issue is moot, provided that the Java type of the property is mapped appropriately to the target column's type by the DataStax driver.",Improvement,Minor,Closed,"2014-05-14 09:29:20","2014-05-14 08:29:20",3
"Spring DataCass","Release 1.0 RC1",,"New Feature",Minor,Closed,"2014-04-29 03:11:45","2014-04-29 02:11:45",1
"Spring DataCass","Upgrade DS Driver to 2.0.X","Upgrade the DS Java Driver for compatibility with Cassandra 2.0","New Feature",Blocker,Closed,"2014-04-25 13:58:50","2014-04-25 12:58:50",13
"Spring DataCass","Write reference guide for 1.0",,"New Feature",Major,Closed,"2014-04-07 08:10:22","2014-04-07 07:10:22",8
"Spring DataCass","String parameters to @Query annotations do not automatically add single quotes","When providing a String to the @Query annotation, it doesn't automatically add the single quotes to the parameter value. Currently you have to manually add the single quotes between the numeric placeholder.",Improvement,Minor,Closed,"2014-04-03 10:10:12","2014-04-03 09:10:12",10
"Spring DataCass","@Query annotation does not support integers as parameters","The @Query annotation doesn't support the int primitive or the Integer wrapper class as input for the CQL.",Improvement,Minor,Closed,"2014-04-03 10:07:04","2014-04-03 09:07:04",10
"Spring DataCass","@Query annotation does not support collection types as parameters","Currently the @Query annotation does not support collections as parameters to be used as input for the CQL. An instance where we might want a collection would be when you are using an IN clause on the partition key.",Improvement,Minor,Closed,"2014-04-03 10:05:27","2014-04-03 09:05:27",10
"Spring DataCass","Automatically quote string-like parameter values in @Query methods","@Query strings shouldn't require users to use the form '?0' for parameters that are string-like.  Issue created from suggestion in comments of DATACASS-117.","New Feature",Minor,Closed,"2014-04-03 10:05:18","2014-04-03 09:05:18",2
"Spring DataCass","Ability to configure cluster name.","I looked through the code and found that there is no support for being able to configure the cluster name.  In the CassandraCqlClusterFactoryBean.afterPropertiesSet method, there is no option for setting the name. My preference for the Java config would be the ability to override a method in AbstractCassandraConfiguration like the other properties.",Improvement,Minor,Closed,"2014-04-03 08:56:59","2014-04-03 07:56:59",5
"Spring DataCass","Umlauts (and probably other special characters) are not saved correctly","If you save some umlaut like ü to a text field, it will not be saved correctly. Instead of 'ä ö ü ß Ä Ö Ü' cassandra returns 'Ã¤ Ã¶ Ã¼ Ã\x9f Ã\x84 Ã\x96 Ã\x9c' If you insert above umlauts using cqlsh they are correctly stored and returned (by cqlsh and spring-data-cassandra). IMHO this is a UTF-8 conversion problem in spring-data-cassandra  ",Bug,Blocker,Closed,"2014-04-02 17:23:25","2014-04-02 16:23:25",3
"Spring DataCass","Release 1.0 M1",,"New Feature",Major,Closed,"2014-03-31 08:54:57","2014-03-31 07:54:57",1
"Spring DataCass","Support named and expression parameters in String-based repository query methods","I tried creating a repository method with parameters but it seems that it doesn't work. This is the following query I wanted:    Here is the stacktrace for the above query:    Also tried indexes instead of bind parameter names    The above query gave me the following stacktrace:  ",Improvement,Major,Closed,"2014-03-31 06:22:22","2014-03-31 05:22:22",10
"Spring DataCass","Add Runnable and Executor override to executeAsynchronously in CqlTemplate","Add Runnable and Executor override to executeAsyncronously in CqlTemplate.  ","New Feature",Critical,Closed,"2014-03-27 10:38:18","2014-03-27 10:38:18",3
"Spring DataCass","Calling Cassandra repository exists method fails","I found an issue with the exists method call, in the code in the CQLTemplate for the count method the parameter says tableName but the value is a CQL statement. Here's the stacktrace that I got:  ",Bug,Minor,Closed,"2014-03-21 12:09:07","2014-03-21 12:09:07",10
"Spring DataCass","Support the capability to add TTL and other options on a save","I need the ability to save data to Cassandra with a TTL. There seems to be no parameter in the Cassandra repository to provide a TTL when saving data. It was mentioned to me that Cassandra Template also does not support this which the Cassandra repositories use.",Improvement,Major,Closed,"2014-03-21 03:34:19","2014-03-21 03:34:19",10
"Spring DataCass","Adapt to latest changes in BeanWrapper API",,Improvement,Major,Closed,"2014-03-19 04:07:12","2014-03-19 04:07:12",1
"Spring DataCass","CassandraQueryMethod.isSliceQuery() doesn't exist","When trying to use @Query annotations in a Cassandra Repository, I ran into the following error:    I took a look at the code and it fails in the verify method in that class.    This issue seems to be related to when I started creating a custom repository method that is annotated with the Query annotation.",Bug,Major,Closed,"2014-03-18 07:12:45","2014-03-18 07:12:45",10
"Spring DataCass","Dependency spring-data-commons has incompatible changes in BeanWrapper","spring-data-commons changed the method getProperty of BeanWrapper.  From their commit message: {quote} The BeanWrapper doesn't take a useFieldAccess attribute anymore as the access type is solely derived from the given PersistentProperty now. AnnotationBasedPersistentProperty now also rejects properties with the very same annotation both on the field and on an accessor. {quote} https://github.com/spring-projects/spring-data-commons/commit/4c6afc5c30fe35a22e8c3534dd6601ff5f84c0a4",Bug,Blocker,Closed,"2014-03-08 15:26:50","2014-03-08 15:26:50",5
"Spring DataCass","Enhance XML schema to allow for named queries","The <entity> element of the XML schema needs to be expanded to allow for the specification of named queries.  The element should support a value attribute and value content.  Examples:  ","New Feature",Minor,Closed,"2014-03-03 09:47:51","2014-03-03 09:47:51",5
"Spring DataCass","Can't compile project unless I have Cassandra running","I found an issue where I can't compile my database project unless I have Cassandra already running. It gets to my JPA unit tests and fails with the following stacktrace:    Here is my configuration:  ",Bug,Blocker,Closed,"2014-03-03 04:47:52","2014-03-03 04:47:52",10
"Spring DataCass","Support declarative query methods",,"New Feature",Minor,Closed,"2014-02-27 08:35:58","2014-02-27 08:35:58",8
"Spring DataCass","Support persistence lifecycle callbacks","Support at minimum pre-store, post-load, pre-delete & post-delete callbacks for both persistent instances themselves as well as third party listeners.","New Feature",Major,Closed,"2014-02-27 07:08:05","2014-02-27 07:08:05",8
"Spring DataCass","Missing CassandraPersistentProperty.getActualType() method in code.","  Here is my code that causes the stacktrace above:  Service Unit Test:   The service code:   Repository:   I checked the source code in GitHub and it is missing that method.  Edit: I would like to mention that this error happens on trying to find one entity or trying to delete an entity.",Bug,Minor,Closed,"2014-02-25 05:13:50","2014-02-25 05:13:50",10
"Spring DataCass","Remove requirement for @PrimaryKeyClass when using composite primary keys","spring-data-commons seems to want to have an explicit ID type for a persistent entity.  In Cassandra, composite primary keys are the norm, not the exception, making it cumbersome for Spring Data Cassandra users to have to define @PrimaryKeyClass classes and use those in persistent classes.  It would be nicer if users could just annotate fields in persistent classes directly with @PrimaryKeyColumn annotations and not be bothered with defining @PrimaryKeyClass classes.","New Feature",Major,Closed,"2014-02-24 13:05:04","2014-02-24 13:05:04",13
"Spring DataCass","@Table/@Persistent types must have only one @PrimaryKey attribute. Found 0. Using @PrimaryKeyColumn instead.","Received this error on my entity mapping when I was using PrimaryKeyColumn annotations instead.  {code} org.springframework.data.cassandra.mapping.VerifierMappingExceptions: @Table/@Persistent types must have only one @PrimaryKey attribute.  Found 0. {code}  My entity: {code} import java.util.Date; import java.util.UUID; import org.springframework.cassandra.core.Ordering; import org.springframework.cassandra.core.PrimaryKeyType; import org.springframework.data.annotation.Version; import org.springframework.data.cassandra.mapping.Column; import org.springframework.data.cassandra.mapping.PrimaryKeyColumn; import org.springframework.data.cassandra.mapping.Table; import org.springframework.format.annotation.DateTimeFormat;  @Table(device_readings_year) public class DeviceReadingsYear {      @PrimaryKeyColumn(name = device_id, ordinal = 0, type = PrimaryKeyType.PARTITIONED)     private UUID deviceId;     @DateTimeFormat(pattern = yyyy)     @PrimaryKeyColumn(name = date, ordinal = 1, type = PrimaryKeyType.PARTITIONED)     private Date date;     @DateTimeFormat(pattern = yyyy-MM-dd HH:mm)     @PrimaryKeyColumn(name = time_observed, ordinal = 2, type = PrimaryKeyType.CLUSTERED,             ordering = Ordering.DESCENDING)     private Date timeObserved;     @Column(value = [value])     private String value; } {code}  JDK Version: 1.7 Cassandra Version: 2.05 Community or DataStax distribution of Cassandra: I'm guessing Community as I got it from the Apache Cassandra official website  I wrote a simple unit test that was supposed to insert data into the database using the CassandraRepository interface. I wrote a database service that uses that repository to save the data. When I ran the test, the error mentioned above said I had a mapping issue. My database doesn't have one primary key, it has a partitioned key with a clustering key as defined in my POJO.  {code:sql}  CREATE TABLE device_readings_year (   device_id text,   date text,   time_observed timestamp,   value text,   base_value text,   insert_by text,   update_by text,   insert_time timestamp,   update_time timestamp,   version int,   PRIMARY KEY ((device_id, date), time_observed) ) WITH CLUSTERING ORDER BY (time_observed DESC) AND COMMENT='Device readings from the field'; {code} ",Bug,Major,Closed,"2014-02-24 09:09:27","2014-02-24 09:09:27",50
"Spring DataCass","Add & integrate KeyspaceIdentifier class","Add {{KeyspaceIdentifier}} class, similar to {{CqlIdentifier}}, and integrate into codebase.  Need to identify regex for _Keyspace_ identifiers.  It appears to be (as a Java string literal)... {{($i)[a-z][\\w]\{0,47\}}}, but this needs to be confirmed.",Improvement,Minor,Closed,"2014-02-19 09:35:25","2014-02-19 09:35:25",3
"Spring DataCass","Remove test-specific statics in TestConfig & AbstractSpringDataEmbeddedCassandraIntegrationTest","Test-specific statics in TestConfig & AbstractSpringDataEmbeddedCassandraIntegrationTest cause tests to fail when running multiple individually from the command line via mvn verify -Dit.test=...,...","New Feature",Minor,Closed,"2014-02-18 08:49:34","2014-02-18 08:49:34",3
"Spring DataCass","QueryOptions should only have ConsistencyLevel & RetryPolicy","QueryOptions for RetryPolicy & ConsistencyLevel are the only options common across all Query subtypes.  If you try to use QueryOptions with the string form of a query, we have no way of knowing the type of the query (other than SimpleStatement).  In order to set TTL & TIMESTAMP for Insert & Update or TIMESTAMP for Delete, you have to have instances of those query subtypes, and we only have SimpleStatement.  You could never, then, set TTL or TIMESTAMP on SimpleStatement without actually parsing the string, which is not our business; it's the business of the Cassandra driver.  The code in CqlTemplate#addQueryOptions(Query,QueryOptions) that uses instanceof is useless in the current implementation.  If a caller wants to set TTL and/or TIMESTAMP options for a query, then he has to use QueryBuilder and the Query subtypes.","New Feature",Minor,Closed,"2014-02-17 11:47:49","2014-02-17 11:47:49",1
"Spring DataCass","Make classes using prefixes Default & Basic uniform","Some classes use the prefix Default & some use Basic to indicate that the class is the main/primary/default/basic implementation of some interface that ships with the module.  There should either be a single, uniform prefix, or they should use no prefix and instead use a suffix Impl.","New Feature",Minor,Closed,"2014-02-17 09:24:50","2014-02-17 09:24:50",2
"Spring DataCass","Entity validation fails and throws a IndexOutOfBoundsException","There is a problem in class DefaultCassandraPersistentEntityMetadataVerifier. The table verification throws an IndexOutOfBoundsException in line 214 if less than one id property exists.  ","New Feature",Minor,Closed,"2014-02-16 15:19:55","2014-02-16 15:19:55",1
"Spring DataCass","Polish javadoc for 1.0",,"New Feature",Minor,Closed,"2014-02-13 06:32:48","2014-02-13 06:32:48",8
"Spring DataCass","Integrate CqlIdentifier",,"New Feature",Major,Closed,"2014-02-13 06:29:16","2014-02-13 06:29:16",8
"Spring DataCass","Polish for 1.0","Need to polish code for 1.0 release.","New Feature",Minor,Closed,"2014-02-12 17:25:48","2014-02-12 17:25:48",5
"Spring DataCass","Add class AbstractCqlTemplateConfiguration","Add class AbstractCqlTemplateConfiguration extends AbstractSessionConfiguration that defines a @Bean CqlOperations cqlTemplate() method.","New Feature",Minor,Closed,"2014-02-12 17:20:08","2014-02-12 17:20:08",1
"Spring DataCass","Enhance annotations to allow for force-quoting","Any annotation that allows the user to specify a CQL identifier (table, column or index name) needs to be enhanced to include an optional flag, called something like forceQuoteName, that enables a user to cause the identifier to be force-quoted.  The flag should be false by default.","New Feature",Minor,Closed,"2014-02-12 07:56:14","2014-02-12 07:56:14",3
"Spring DataCass","Add support for missing DataTypes to DefaultCassandraRowValueProvider","Currently there is only support for columes of types text, cint and bytes in org.springframework.data.cassandra.convert.DefaultCassandraRowValueProvider. The missing types from DataType should be added.  To reproduce try to read a column of type boolean from cassandra. In this case the column falls through and it is handled as bytes. In the handler for bytes an assertion fails, because datatypes are wrong (boolean != bytes). This should be reproducible for all datatypes except text, cint and bytes.",Bug,Major,Closed,"2014-02-10 21:17:45","2014-02-10 21:17:45",5
"Spring DataCass","Enhance Java & XML config to scan multiple base packages for entities","The current Java config supports specifying only a single base package in which to scan for entities.  The current XML config doesn't appear to support specifying *any* base packages.  They need to support the specification of multiple base packages.  See (at least): * spring-cassandra-1.0.xsd attributeGroup cassandra-repository-attributes * CassandraRepositoryConfigurationExtension * AbstractSpringDataCassandraConfiguration.getEntityBasePackage() * AbstractSpringDataCassandraConfiguration.getInitialEntitySet() ","New Feature",Major,Closed,"2014-02-07 08:44:41","2014-02-07 08:44:41",3
"Spring DataCass","Ensure all CqlOperations methods take QueryOptions where appropriate","I noticed that there is no overload of void execute(String) that takes a QueryOptions object, like void execute(String, QueryOptions).  This request is to review all CqlOperations methods to ensure that we're accepting a QueryOptions object wherever appropriate.","New Feature",Minor,Closed,"2014-02-06 10:48:27","2014-02-06 10:48:27",3
"Spring DataCass","Add overloaded methods to CqlOperations that use strongly typed Query objects","For each method on CqlOperations that takes a CQL string, there should be an equivalent overload that takes a Query object (or Select, Update, Insert, Delete, etc, as appropriate, depending on the operation).  I already overloaded void execute(String) with void execute(Query) in the DATACASS-33 branch, but there are many others.","New Feature",Minor,Closed,"2014-02-06 10:44:58","2014-02-06 10:44:58",8
"Spring DataCass","Ensure license text appears in all source files with proper dates.","The Apache open source license header needs to appear in all source files with the appropriate date range.","New Feature",Minor,Closed,"2014-02-06 07:34:17","2014-02-06 07:34:17",1
"Spring DataCass","SimpleCassandraRepository#save(Iterable<S>) should batch statements","The current implementation of SimpleCassandraRepository#save(Iterable<S>) iterates, calling #save(S) for each.  This would result in many server round trips, when the saves could be done in a batch.","New Feature",Major,Closed,"2014-02-05 18:10:44","2014-02-05 18:10:44",3
"Spring DataCass","Support basic unmapped CQL pojo query operations","There are times when a user is using the low-level CqlOperations and it would be convenient for the framework to do basic mapping from a ResultSet to a POJO that is playing the architectural role of a DTO as opposed to a persistent entity (the latter being handled, of course, by Spring Data Cassandra).  The interface of such functionality could look something like the attached.","New Feature",Minor,Closed,"2014-02-05 08:46:45","2014-02-05 08:46:45",5
"Spring DataCass","Create verifier for entity persistence metadata","We need to ensure that users are annotating their persistent entities in a logically consistent way.  For example, you can't annotate an entity with both a @PrimaryKey property and another property whose type is a @PrimaryKeyClass itself -- this would mean that the class had a composite primary key and a simple primary key at the same time.  I've already written a basic interface, CassandraPersistentEntityMetadataValidator, with the beginnings of an implementation, DefaultCassandraPersistentEntityMetadataValidator (attached).    The validation should take place in BasicCassandraPersistentEntity#verify().  Files attached.","New Feature",Major,Closed,"2014-02-03 15:26:31","2014-02-03 15:26:31",3
"Spring DataCass","Provide support for naming strategies","Default naming strategies should be configurable.  Example table & column naming strategies should include case-preserving, case-lowering, camel-case-to-underscore-separated, and user-defined naming strategies.","New Feature",Minor,Closed,"2014-02-03 11:33:59","2014-02-03 11:33:59",5
"Spring DataCass","Support custom field mappings","Users need to be able to map fields from Java to database types in standard and custom ways.  This request is to provide support for standard & custom (user-defined) field mappings when going from Java to C* & vice versa.  This request include support for both annotation- and external metadata-based means (XML, YAML, properties, etc), where annotations override spring-data-cassandra defaults, and external metadata overrides annotations.",Improvement,Major,Closed,"2014-01-31 08:17:58","2014-01-31 08:17:58",8
"Spring DataCass","Support mapping of class inheritance","Users need to be able to map classes that extend other classes to tables.  The two most likely inheritance mappings are table-per-hierarchy and table-per-concrete-class, since Cassandra doesn't support joins.  This request include support for both annotation- and external metadata-based means (XML, YAML, properties, etc), where annotations override spring-data-cassandra defaults, and external metadata overrides annotations.",Improvement,Major,Open,"2014-01-31 08:15:08","2014-01-31 08:15:08",8
"Spring DataCass","Provide support for specifying inheritance & field mappings","JPA & JDO allow for sophisticated mapping of class inheritance (table-per-class, table-per-concrete-class, table-per-hierarchy, or combinations thereof) and of fields (to transform the Java representation of a field to some other type upon write, and vice versa upon read).  This request include support for both annotation- and external metadata-based means (XML, YAML, properties, etc), where annotations override spring-data-cassandra defaults, and external metadata overrides annotations.","New Feature",Major,Closed,"2014-01-31 08:09:33","2014-01-31 08:09:33",13
"Spring DataCass","Rename classes in spring-cassandra & spring-data-cassandra","We need to make the names between spring-cassandra & spring-data-cassandra consistent, so that spring-data-cassandra users have the same experience as other spring-data-* users.  Currently, there are some classes in spring-cassandra that are appropriately prefixed with Cassandra & Cql, and some that are not.  Similiarly in spring-data-cassandra, some classes have prefixes SpringData, Data, or other inconsistent prefixes.  All classes in both modules need review for consistent & appropriate prefixes.  We should also consider the name of module spring-cassandra: should it be changed to spring-cql, spring-cql-template, spring-cassandra-support, spring-cql-support, or some other appropriate name?","New Feature",Major,Closed,"2014-01-31 08:02:12","2014-01-31 08:02:12",3
"Spring DataCass","Complete XML support for <repositories>","Write XML support classes for <cassandra:repositories>.","New Feature",Critical,Closed,"2014-01-31 07:47:23","2014-01-31 07:47:23",5
"Spring DataCass","Add final modifier to AbstractClusterConfiguration#cluster() and AbstractSessionConfiguration#session()","Add final modifier to cluster() and final().  Add example minimal JavaConfig to readme.md.",Bug,Major,Closed,"2014-01-27 06:36:40","2014-01-27 06:36:40",1
"Spring DataCass","Bean cassandraTemplate not found"," SpringCassandraApplicationConfig extends AbstractCassandraConfiguration and implements cluster() and keyspace() methods.  The following generates error:No bean named 'cassandraTemplate' is defined  ApplicationContext context = new AnnotationConfigApplicationContext(SpringCassandraApplicationConfig.class);  CassandraOperations ops = context.getBean(cassandraTemplate, CassandraOperations.class);  ","New Feature",Minor,Closed,"2014-01-26 11:14:09","2014-01-26 11:14:09",10
"Spring DataCass","AbstractCassandraConfiguration cluster() method ","The method description for cluster() indicates  /**          * Return keyspace attributes          *           * @return KeyspaceAttributes          */  https://github.com/SpringData/spring-data-cassandra/blob/master/cassandra/src/main/java/org/springdata/cassandra/config/java/AbstractCassandraConfiguration.java   Shouldn't the method return an instance of com.datastax.driver.core.Cluster?  return Cluster.builder().addContactPoint(localhost)     .build();","New Feature",Minor,Closed,"2014-01-26 10:40:30","2014-01-26 10:40:30",10
"Spring DataCass","Rename core template classes","Rename core template classes:  spring-cassandra/CassandraTemplate -> CqlTemplate spring-cassandra/CassandraOperations -> CqlOperations  spring-data-cassandra/CassandraDataTemplate -> CassandraTemplate spring-data-cassandra/CassandraDataOperations -> CassandraOperations  ","New Feature",Critical,Closed,"2014-01-23 19:35:35","2014-01-23 19:35:35",1
"Spring DataCass","Don't assume port 9042 is available when building",,"New Feature",Minor,Closed,"2014-01-21 06:49:07","2014-01-21 06:49:07",2
"Spring DataCass","Add default options to KeyspaceGenerator","When there are no options given on a CreateKeyspaceSpecification, default the options as follows when creating the CQL.  replication: SimpleStrategry, RF = 1 durable_writes: false  This way, if the user tells our Spring XML Config to create a keyspace like this:  <cass:keyspace name=Foo action=CREATE />  That will be sufficient to create a basic keyspace.","New Feature",Critical,Closed,"2014-01-19 09:10:49","2014-01-19 09:10:49",2
"Spring DataCass","XML parsing fails on property placeholders","The use of property placeholders (${ ... }) causes xml namespace parsing to fail because property placeholder expressions haven't been replaced before xml parsing time.  Test case that causes the error is attached.  Zip is relative to the repo root directory.",Bug,Critical,Closed,"2014-01-16 05:25:41","2014-01-16 05:25:41",3
"Spring DataCass","Unit Test causing Error on Mac - unable to create native Thread - OOM","When Cassandra Operations Test runs on Mac, it causes an OOM Error - unable to create native thread.  This is limitation of the Mac calculated user proc limit.  Need to examine the strategy for starting and using cassandra-unit for unit tests to make sure we are using it properly and efficiently.","New Feature",Major,Closed,"2014-01-15 21:34:47","2014-01-15 21:34:47",5
"Spring DataCass","Add more queryAsynchronously methods to Operations Interface","Implement the following:   <T> T queryAsynchronously(final String cql, final QueryOptions options, ResultSetExtractor<T> rse, Long timeout,    TimeUnit timeUnit);   ResultSetFuture queryAsynchronously(final String cql, final QueryOptions options);   void queryAsynchronously(final String cql, final QueryOptions options, Runnable listener, Executor executor);","New Feature",Critical,Closed,"2014-01-14 07:59:27","2014-01-14 07:59:27",3
"Spring DataCass","Move IndexOperations static methods to Specification objects",,"New Feature",Minor,Closed,"2013-12-23 07:34:14","2013-12-23 07:34:14",1
"Spring DataCass","Create SecuritySpecifications for User and Role Management.","Create the Specifications and CQLGenerators for User and Role domains.","New Feature",Minor,Open,"2013-12-16 20:04:59","2013-12-16 20:04:59",5
"Spring DataCass","Add value attribute default  to Indexed Annotation","Create a value attribute on the Indexed Annotation that defaults to empty String.  This will be the Index name created, if specified.","New Feature",Major,Closed,"2013-12-13 11:06:27","2013-12-13 11:06:27",1
"Spring DataCass","Rename ColumnSpecification: primary to clustered","ColumnSpecification uses the ambiguous term primary when it really means clustered.  This also makes it match similar concepts in module spring-data-cassandra.",Improvement,Minor,Closed,"2013-12-12 08:48:00","2013-12-12 08:48:00",1
"Spring DataCass","Remove QueryOptions#toMap() & QueryOptions.QueryOptionMapKeys","Seeing this in master as of this issue creation.  QueryOptions are to be used only in strongly-typed manner as discussed.",Improvement,Minor,Closed,"2013-12-12 08:39:31","2013-12-12 08:39:31",1
"Spring DataCass","Create CqlIdentifier class","Currently, unquoted & quoted identifiers are not encapsulated in a class; you must use CqlStringUtils to handle them.  This request is to improve the design by creating a CqlIdentifier class that encapsulates unquoted & quoted CQL identifiers, thereby handling their case sensitivity correctly in all contexts.",Improvement,Major,Closed,"2013-12-12 08:07:01","2013-12-12 08:07:01",3
"Spring DataCass","Support create & drop indexes","Need CreateIndexSpecification & DropIndexSpecification along with corresponding *CqlGenerator classes.  Model code after *TableSpecification & *TableCqlGenerator classes.","New Feature",Minor,Closed,"2013-12-11 13:50:35","2013-12-11 13:50:35",5
"Spring DataCass","Create Outline","Create the outline for the reference guide.","New Feature",Critical,Closed,"2013-12-11 13:40:27","2013-12-11 13:40:27",5
"Spring DataCass","Usage and Reference Guide",,"New Feature",Minor,Closed,"2013-12-11 13:38:23","2013-12-11 13:38:23",21
"Spring DataCass","Write more Unit Tests around CQL Table Operations","Write more tests for CQL Builder for Table Operations.  Create, Alter, Drop Tables.  Test a good portion of the options available.  http://www.datastax.com/documentation/cql/3.0/webhelp/index.html#cql/cql_reference/create_table_r.html","New Feature",Major,Closed,"2013-12-11 13:33:06","2013-12-11 13:33:06",5
"Spring DataCass","Move TableOperations static methods to Specification objects","Use CreateTableSpcification and CreateTableCQLGenerator as a model.","New Feature",Minor,Closed,"2013-12-11 13:29:44","2013-12-11 13:29:44",1
"Spring DataCass","Define JavaConfig for spring-data-cassandra","Create JavaConfig for spring-data-cassandra.","New Feature",Blocker,Closed,"2013-12-11 13:20:54","2013-12-11 13:20:54",3
"Spring DataCass","Support pagination feature in Cassandra","Determine how this will perform and if its possible with Cassandra.","New Feature",Major,Closed,"2013-12-11 13:18:53","2013-12-11 13:18:53",1
"Spring DataCass","Add XML namespace support for keyspace and table creation in spring-cassandra","Add options to the XML Namespace to create keyspaces and tables in spring-cassandra.","New Feature",Major,Closed,"2013-12-11 13:12:07","2013-12-11 13:12:07",5
"Spring DataCass","Define XML Namespace for spring-data-cassandra","Create the XML Namespace for spring-data-cassandra and reuse the schema from spring-cassandra where applicable.","New Feature",Blocker,Closed,"2013-12-11 13:10:22","2013-12-11 13:10:22",3
"Spring DataCass","Support create, alter & drop keyspaces","Need CreateKeyspaceSpecification, AlterKeyspaceSpecification & DropKeyspaceSpecification along with corresponding *CqlGenerator classes.  Model code after *TableSpecification & *TableCqlGenerator classes.","New Feature",Minor,Closed,"2013-12-09 14:02:48","2013-12-09 14:02:48",3
"Spring DataCass","Create Branch for Pull Request and enhance README.md","Create a new branch for the initial Pull Request into spring repo. Enhance the README.md with Template Usage and general expectations for M1.","New Feature",Critical,Closed,"2013-12-09 13:56:31","2013-12-09 13:56:31",2
"Spring DataCass","Protect testing resource with namespaces","Protect testing resource file names with Namespaces.","New Feature",Minor,Closed,"2013-12-09 13:12:50","2013-12-09 13:12:50",1
"Spring DataCass","Resolve and clean up logging dependencies","For testing, resolve all logging dependencies and protect test resources for logging.","New Feature",Minor,Closed,"2013-12-09 13:11:10","2013-12-09 13:11:10",1
"Spring DataCass","Remove Map Overloads from Templates.","Remove optionsByName from Template Overloads. Allow null options.","New Feature",Minor,Closed,"2013-12-06 13:32:16","2013-12-06 13:32:16",2
"Spring DataCass","Add ConsistencyLevel and RetryPolicy to Operations/Template","Add overrides for the Operations/Template to provide ConsistencyLevel and RetryPolicy.",Sub-task,Critical,Closed,"2013-11-26 11:20:18","2013-11-26 11:20:18",5
"Spring DataCass","Remove class SpringDataKeyspace","This class appears to provide little value & should be removed.","New Feature",Major,Closed,"2013-11-26 08:36:37","2013-11-26 08:36:37",2
"Spring DataCass","Pull module spring-cassandra out from under Spring Data umbrella","The module spring-cassandra isn't necessarily part of Spring Data Cassandra.  Module spring-data-cassandra _depends_ on spring-cassandra, but that's all.  spring-cassandra has no dependencies on anything within the Spring Data umbrella.","New Feature",Minor,Closed,"2013-11-26 07:40:01","2013-11-26 07:40:01",3
"Spring DataCass","Update to latest spring-data-commons v.next",,"New Feature",Minor,Closed,"2013-11-26 07:29:17","2013-11-26 07:29:17",3
"Spring DataCass","Remove unnecessary repo files","There are files in the repo that really don't belong:  gradle wrapper & the repo folder containing Datastax Java Driver sources.  If the repo is built via gradle, then gradle should be required to build it, just as maven is required to build maven repos.","New Feature",Minor,Closed,"2013-11-25 14:47:31","2013-11-25 14:47:31",1
"Spring DataCass","Convert to Maven & split modules","Convert to Maven to align with parent project and other Spring-sponsored projects.  This includes splitting the codebase into two modules:  spring-cassandra, for CassandraTemplate & friends, and spring-data-cassandra, for the Spring Data Cassandra POJO-based repositories & mapping.","New Feature",Major,Closed,"2013-11-25 11:34:09","2013-11-25 11:34:09",2
"Spring DataCass","Better PreparedStatement Support","Currently we have a PreparedStatementCreator very similar to Spring-JDBC.  This needs to be tuned for better usability given how the DataStax Driver actually uses BoundStatement for execution.  Need support for: # Caching a PreparedStatement for many operations ",Sub-task,Minor,Closed,"2013-11-22 20:37:07","2013-11-22 20:37:07",5
"Spring DataCass","Cluster Connection Listener","CassandraClusterFactoryBean (and the XML Configuration) need to be modified so that the developer can configure Host.StateListener and LatencyTracker.  These interface implementations can be registered with the cluster after it is returned from Cluster.Builder.","New Feature",Major,Closed,"2013-11-20 05:53:24","2013-11-20 05:53:24",3
"Spring DataCass","Refactor XML Namespace","Once we have hashed out all the implementations and separation of spring-cassandra and spring-data-cassandra, we need to split the XSD file into the 2 components so that the Templates can be used independently of one another.",Improvement,Major,Closed,"2013-11-19 12:33:49","2013-11-19 12:33:49",5
"Spring DataCass","JSON Mapping to Query","Create overload convenience methods for Passing in JSON String.  This JSON String can be mapped to a Object<T> to generate the appropriate query operation.","New Feature",Major,Open,"2013-11-18 08:47:30","2013-11-18 08:47:30",8
"Spring DataCass","Unit Tests for CassandraOperations","Create Unit tests coverage for all CassandraOperations.",Sub-task,Major,Closed,"2013-11-14 12:16:18","2013-11-14 12:16:18",2
"Spring DataCass","Support simple & compound primary keys","We need a new annotation for CQL Tables that require a combined PK or more than one column.  Per our conversion, a POJO would have an attribute of another POJO annotated with @CombinedId, or maybe @Id.",Improvement,Blocker,Closed,"2013-11-12 13:31:01","2013-11-12 13:31:01",3
"Spring DataCass","Implement the TemplateAPI for CQL","Implement the TemplateAPI for the new SessionFactory and SessionCallback.  This includes: # Spring-Cassandra Template without any POJO Support # Spring-Data-Cassandra Template with POJO mapping support (to be used by the Repository)","New Feature",Blocker,Closed,"2013-11-11 16:56:13","2013-11-11 16:56:13",8
"Spring DataCass","Align project with other Spring Data projects","Mavenize build, remove unnecessary gradle scripts, add eclipse source formatting settings file, format sources.","New Feature",Major,Closed,"2013-11-11 08:12:20","2013-11-11 08:12:20",3
"Spring DataCass","Move to DataStax Java Driver","Remove the Astyanax Driver references and replace with CQL3 for moving forward.","New Feature",Blocker,Closed,"2013-11-03 02:43:30","2013-11-03 02:43:30",13
"Spring DataCass","Convert Template to ThriftTemplate with full wrappers and Callbacks","Refactor the Template class to better use the Callback pattern and exception translation.  Put all calls to C* through the execute methods that translate exceptions.","New Feature",Blocker,Closed,"2013-07-21 11:49:09","2013-07-21 10:49:09",5
"Spring DataCass","Convert CassandraFactoryBean to a legit FactoryBean","The current CassandraFactoryBean is not named correctly, and it doesn't implement the basic required interfaces for Spring Beans.  New Class definition to implement:   ","New Feature",Blocker,Closed,"2013-07-21 11:05:21","2013-07-21 10:05:21",3
"Spring DataCass","Create ExceptionTranslator and fold into Template API","Create an ExceptionMapping Class for the C* exceptions and use in the Template API to ensure user only gets Spring DataAccessExceptions.","New Feature",Blocker,Closed,"2013-07-21 09:10:13","2013-07-21 08:10:13",5
"Spring DataCass","Include Basic Options for Cassandra Connectivity","Add all the basicoptions for the Cassandra Connections so that they can be included in the CassandraFactoryBean creation using JavaConfig and XMLConfig.",Sub-task,Major,Closed,"2013-05-30 09:26:37","2013-05-30 08:26:37",3
"Spring DataCass","Search Operations","Define and implement the Search Operations.  # Find By ID # Find All in ColumnFamily # Find by Query # Find by CQL (Maybe the same as #2)",Sub-task,Critical,Closed,"2013-05-30 07:31:58","2013-05-30 06:31:58",0
"Spring DataCass","Delete Operations","Define and implement the Delete Operations.  # Delete One # Delete Collection",Sub-task,Critical,Closed,"2013-05-30 07:31:10","2013-05-30 06:31:10",0
"Spring DataCass","Update (Save) Operations","Define and implement the Update(Save) Operations.  # Update One # Update Collection",Sub-task,Minor,Closed,"2013-05-30 07:30:43","2013-05-30 06:30:43",0
"Spring DataCass","Create Operations","Define and implement the Create Operations.  # Create One # Create Collection",Sub-task,Minor,Closed,"2013-05-30 07:30:16","2013-05-30 06:30:16",0
"Spring DataCass","Create XSD","Create the XSD File for the Spring Data Cassandra XML Integration.",Sub-task,Critical,Closed,"2013-05-29 13:09:35","2013-05-29 12:09:35",3
"Spring DataCass","Define Basic XML Namespace for spring-cassandra","Define the XML Namespace to describe the available options on the Cassandra specific beans that can be defined in the Spring context container.","New Feature",Blocker,Closed,"2013-05-29 12:54:51","2013-05-29 11:54:51",5
"Spring DataCass","Define JavaConfig for spring-cassandra","Ensure that JavaConfig works with the CassandraTemplate.  ","New Feature",Critical,Closed,"2013-05-29 12:51:59","2013-05-29 11:51:59",2
"Spring DataCass","Define Operations Interface and Implement with CassandraTemplate","Define the first set of CassandraOperations required for the module, then implement using the Mapping Subsystem in the CassandraTemplate class.","New Feature",Blocker,Closed,"2013-05-29 12:48:46","2013-05-29 11:48:46",5
"Spring DataCass","Develop or Modify Mapping Subsystem for Beans","Create custom Spring Data Cassandra annotations.  ","New Feature",Blocker,Closed,"2013-05-29 12:23:10","2013-05-29 11:23:10",5
"Spring DataCass","CDI Integration",,"New Feature",Minor,Closed,"2013-05-29 12:14:27","2013-05-29 11:14:27",0
"Spring DataCass","JavaConfig Support",,"New Feature",Minor,Closed,"2013-05-29 12:13:59","2013-05-29 11:13:59",0
"Spring DataCass","Pagination Support","Pagination is not supported or a best practice in Cassandra.  The next closest alternative is the concept of range queries, which may product a story for this epic.","New Feature",Minor,Closed,"2013-05-29 12:13:44","2013-05-29 11:13:44",0
"Spring DataCass","Support for query derivation on repository query methods",,"New Feature",Major,Closed,"2013-05-29 12:13:34","2013-05-29 11:13:34",0
"Spring DataCass","Cassandra Repository Implementation",,"New Feature",Minor,Closed,"2013-05-29 12:13:13","2013-05-29 11:13:13",0
"Spring DataCass","General Cassandra Support Implementation",,"New Feature",Minor,Closed,"2013-05-29 12:12:58","2013-05-29 11:12:58",0
"Spring DataCass","Implement Auditing",,"New Feature",Major,Resolved,"2013-05-29 12:12:37","2013-05-29 11:12:37",0
"Spring DataCass","Create Spring XML Namespace",,"New Feature",Minor,Closed,"2013-05-29 12:12:23","2013-05-29 11:12:23",0
"Spring DataCass","Create Template API",,"New Feature",Minor,Closed,"2013-05-29 12:11:50","2013-05-29 11:11:50",0
"Spring DataCass","Create Mapping Subsystem ","Create the mapping subsystem for converting Beans to/from Cassandra Column Families.","New Feature",Blocker,Closed,"2013-05-29 12:06:51","2013-05-29 11:06:51",13
