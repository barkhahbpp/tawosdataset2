Name,Title,Description,Type,Priority,Status,Creation_Date,Estimation_Date,Story_Point
"Appcelerator Daemon","AMPLIFY Platform Integration","We need a library (amplify-sdk) that handles all of the platform related functionality required by the AMPLIFY CLI, Appc CLI, and Titanium CLI as well as an appcd plugin to expose the amplify-sdk.",Epic,High,Resolved,"2020-04-22 17:46:25","2020-04-22 17:46:25",34
"Appcelerator Daemon","Add multiple platform and Node.js testing to Jenkinsfiles","The Appc Daemon has the ability to run unit tests on all platforms and multiple Node.js versions, however, no other product does. We need a new function added to our internal Jenkins {{pipeline-library}} that adds test matrix ability and normalize the various Jenkinsfiles into a single standard solution that should work for most cases.",Improvement,High,Resolved,"2020-03-26 05:23:08","2020-03-26 05:23:08",13
"Appcelerator Daemon","appcd: Drop support for Node 8 and older","Node 8 is no longer in maintenance after Dec 31, 2019 and npm dependencies are starting to depend on Node 10 as a minimum.    In Daemon 4.0, we need to bump the minimum supported Node version to {{>=10.2.0}}.    We choose 10.2.0 so that we get N-API 3 needed by native deep dependencies.",Story,Critical,Resolved,"2020-03-06 07:29:55","2020-03-06 07:29:55",3
"Appcelerator Daemon","appcd-default-plugins: Yarn and Lerna not found from Appc CLI on Windows","appcd-default-plugins locates lerna and yarn by their {{.cmd}} bin script. However, since the Appc CLI package is built on a Linux machine, npm doesn't create the {{.cmd}} files and thus is not able to find them.    While appcd-default-plugins would have no problem resolving the lerna and yarn bin scripts directly, {{lerna bootstrap}} calls {{yarn}} and expects the shell (e.g. cmd.exe) to locate the {{.cmd}} file and run it. So, we need the {{.cmd}} files.    Adding the {{.cmd}} files to the Appc CLI package when it's being built is probably too much work, instead we can to generate them using the same {{bin-links}} package npm uses.",Bug,Critical,Resolved,"2020-03-03 17:47:37","2020-03-03 17:47:37",5
"Appcelerator Daemon","Windows - Android: No Android SDKs were found under the specified location ","When trying to create an application in Appcelerator Studio the following message can be seen in the application creation screen. No Android SDKs were found under the specified location.    When doing an {{appc appcd status}} from the CLI the following can be seen in the plugins section:       ",Bug,High,Closed,"2020-03-02 14:07:23","2020-03-02 14:07:23",1
"Appcelerator Daemon","Lerna cannot find Yarn when installing default plugins on Windows","appcd-default-plugins can find Yarn, but Lerna cannot. Probably a bug that is easily reproducible on a clean Windows machine as a dev machine likely has Yarn already installed.    System is running Node.js 10.13.0. Appc Daemon core is running Node.js 10.16.3.        This ticket may moot with the new plugin management command (DAEMON-311) and the upgrade to Yarn 2 (DAEMON-318).",Bug,High,Closed,"2020-02-26 23:18:07","2020-02-26 23:18:07",8
"Appcelerator Daemon","node_winreglib.node is not a valid Win32 application","User installs Appc Daemon 3.2.0 with Node.js 10.13.0. When the daemon starts up, the Windows plugin cannot load winreglib:        Note that winreglib uses N-API and is compatible with Node.js 10.2.0 and newer and that the Appc Daemon 3.2.0's core runs Node 10.16.3.    This might be a Windows-only issue as Windows is general the only platform in which plugins are installed at daemon install time, Mac/Linux run into permission issues and have to resort to installing plugins at runtime. This behavior will change in DAEMON-311",Bug,High,Closed,"2020-02-26 23:13:24","2020-02-26 23:13:24",8
"Appcelerator Daemon","appcd-plugin: Registered plugins not sorted when retrieving status for semver range","When getting the status of a plugin where the version is a semver range, it will scan all plugins for a match by name and version. The order of the registered plugins is whichever order they were loaded. The list of plugins must be sorted in order to deterministically find the plugin.    If you have @appcd/plugin-titanium v1.6.0 and v1.8.1 installed, getting the status for {{^1.6.0}} should return v1.8.1.    ",Story,High,Resolved,"2020-02-13 22:45:40","2020-02-13 22:45:40",3
"Appcelerator Daemon","@appcd/plugin-titanium: Add terminal session server with discovery endpoint","The Titanium CLI needs bi-directional communication with the Titanium plugin, however the Appc Daemon dispatcher is not capable of supporting true bi-directional data flow, but rather just single request, multi-part responses.    To work around this, we need the Titanium CLI to locate the Appc Daemon, start it, ensure the Titanium appcd plugin is registered, and call a terminal discovery endpoint. From there, the Titanium CLI will connect to the terminal session endpoint via a WebSocket.",Story,Critical,Resolved,"2020-02-13 15:43:16","2020-02-13 15:43:16",8
"Appcelerator Daemon","template-kit: Template toolkit","The ti new command (and ti add) need to create projects and components based on a template. A general purpose template toolkit would standardize template structure,  make it easy to add templates to other Node.js-based products, and get more people battle testing the library.    The template library specification can be found here: https://techweb.axway.com/confluence/display/pe/Proposal%3A+Project+Template+System.",Story,Critical,Resolved,"2020-02-13 15:33:31","2020-02-13 15:33:31",33
"Appcelerator Daemon","@axway/amplify-sdk: AMPLIFY SDK","We need a shared Node.js-based library for interacting with the AMPLIFY platform. This library handles:    * Auth  * Orgs  * Titanium app support  * ACS app support    For auth, it will simply be a wrapper around amplify-auth-sdk, then mix in the org information, which is currently all done in the amplify-auth-sdk and slated for removal.    For orgs, the code can be taken from amplify-auth-sdk.",Story,Critical,Resolved,"2020-02-13 06:27:56","2020-02-13 06:27:56",34
"Appcelerator Daemon","Plugin not found error when running exec to fetch android or ios info","When trying to run the exec command to fetch android or iOS info the command fails while reporting missing plugins          In this case, access was denied to the {{~/.config}} directory which causes Yarn to error attempting to access the {{~/.config/yarn/link}} directory as evident by the appcd log:        A possible resolution is to check if the {{~/.config/yarn/link}} directory is writable (as well as its parent directories).",Bug,High,Resolved,"2020-02-12 22:21:21","2020-02-12 22:21:21",34
"Appcelerator Daemon","androidlib: NDK side-by-side support","*Summary:*  As of 2019, Google introduced a new NDK side-by-side feature which allows you to install multiple NDK versions under the Android SDK directory. All new NDK versions are downloaded to the side-by-side directory and it replaces the old ndk-bundle directory.    *Example:*  The folder structure appear as follows on macOS...  {{~/Library/Android/sdk/ndk/19.2.5345600}}  {{~/Library/Android/sdk/ndk/20.1.5948922}}  {{~/Library/Android/sdk/ndk/21.0.5935234}}  {{~/Library/Android/sdk/ndk/21.0.6113669}}    There will be an ndk directory under the Android/sdk directory. Each subdirectory under ndk will be the version number of the installed NDK.    *Old Behavior:*  Before the NDK side-by-side feature existed, Android Studio used to install the NDK under the Android SDK directory as shown below. Updating the NDK version used to replace the old version. Android Studio no longer installs to this directory.  {{~/Library/Android/sdk/ndk-bundle}}    *To be done:*  The CLI should search for the installed NDK directory in the following order.  # The ANDROID_NDK environment variable, if set.  # The newest NDK side-by-side version subdirectory, if available.  # The ndk-bundle directory.",Improvement,Critical,Resolved,"2020-02-11 15:59:43","2020-02-11 15:59:43",8
"Appcelerator Daemon","appcd-core: Upgrade to latest Node.js 12 LTS release","While the daemon supports Node 10, we should update the core to Node 12 so that we can use the latest features such as workers.    Node.js doesn't gain us much as far as removing Babel transpilation. We could switch over to ES modules, but we still need to transpile for dynamic imports and optional chaining. We probably cannot remove Babel until Node 14 goes LTS in late 2020.",Story,High,Resolved,"2020-02-11 07:03:40","2020-02-11 07:03:40",2
"Appcelerator Daemon","Investigate upgrading to Yarn 2","Yarn 2 was released and we should investigate the upgrade process. Yarn is used for the top-level monorepo as well as appcd-default-plugins. We also need to check if we even need Lerna anymore. It may be unnecessary if there is no value and if we mandate Yarn over npm.    Release notes: https://dev.to/arcanis/introducing-yarn-2-4eh1.    The code in appcd-default-plugins will likely be moved into appcd-plugin where the plugin management lives, but the logic should be relatively unchanged.    Also, Yarn 2 has an experimental plugin called version which assists with independent package versioning as is the case in the Appc Daemon's monorepo. For more info: https://next.yarnpkg.com/features/release-workflow.  ",Story,Low,Reopened,"2020-02-11 06:57:07","2020-02-11 06:57:07",2
"Appcelerator Daemon","Titanium CLI: Call latest major version of Titanium appc plugin","The Titanium appcd plugin ships with the Titanium CLI as well as the Appc Daemon default plugins (which is going to change). If the Titanium CLI references @appcd/plugin-titanium@1.1.0, but the default plugins references v1.2.0, then the Titanium CLI should call 1.2.0, not 1.1.0.    To solve this, simply call the major version:    ",Improvement,Critical,Resolved,"2020-02-10 14:55:03","2020-02-10 14:55:03",8
"Appcelerator Daemon","Docs: Generate release notes","Each appcd package has a changelog, but there's no high-level release notes that consolidates the changelogs. It would be beneficial to have a tool that pulled determined Appc Daemon releases and merge the release notes per version.",Story,Medium,Resolved,"2020-02-07 16:35:29","2020-02-07 16:35:29",8
"Appcelerator Daemon","Docs: Appc Daemon releases with plugin API, Node versions","Document Appc Daemon releases and their plugin API versions.    For the meantime, this can go in the markdown docs in the repo.",Story,Medium,Resolved,"2020-02-07 16:04:26","2020-02-07 16:04:26",5
"Appcelerator Daemon","Add plugin API version to appcd status","It would be helpful if the appcd status also displayed the plugin API version.",Improvement,Medium,Resolved,"2020-02-07 15:24:05","2020-02-07 15:24:05",5
"Appcelerator Daemon","Remove Genymotion","The time has come to remove support for Genymotion. The Android emulator has matured and thanks to advances in virtualization technology, it is quite fast. Secondly, Genymotion is not free and it's not like they ever gave us any licenses. Thirdly, we don't want to maintain a second emulator technology, especially one that has only does x86 emulation and often causes incompatibility issues with Titanium native modules.    1. Remove the [code|https://github.com/appcelerator/appc-daemon/blob/bf20fec94c74e055e4359a8e123539054c4cb228/packages/appcd-core/src/server.js#L482-L486] in appcd-core that copies the Genymotion config from the Titanium CLI's config to the appcd config. Bump minor.    2. Deprecate [@appcd/plugin-genymotion|https://github.com/appcelerator/appcd-plugin-genymotion].    3. Remove all references to Genymotion and VirtualBox in [@appcd/plugin-android|https://github.com/appcelerator/appcd-plugin-android]. Bump major.    4. Remove all references to Genymotion in [@appcd/plugin-system-info|https://github.com/appcelerator/appcd-plugin-system-info]. Bump major.    5. Remove all references to Genymotion and VirtualBox in [@appcd/plugin-titanium|https://github.com/appcelerator/appcd-plugin-titanium]. Bump major.    Since we're removing data from the info, this is breaking change and everything (except appcd itself) must have a major version bump.",Story,Low,Resolved,"2020-02-06 17:01:00","2020-02-06 17:01:00",13
"Appcelerator Daemon","Improve appcd plugin management","Appc Daemon needs a better way to install and manage appcd plugins.    h4. Problem    Currently, {{appcd}} plugins are installed via the {{appcd-default-plugins}} package. When the {{appcd-default-plugins}} package is installed (via {{appcd-core}}, via {{appcd}}), it will attempt to download and install the packages in an npm script. However, npm runs scripts as nobody which generally does not have access to the user's home directory on macOS and Linux and thus no plugins are installed. Plugins cannot be marked as traditional dependencies since we need to support multiple major versions installed side-by-side.    Whenever the Appc Daemon is started, it will attempt to reconcile and install the default plugins. This solves the permission issue, but now requires you to start the daemon while online to download the plugins.    h4. Proposal    1. Migrate plugin install logic from {{appcd-default-plugins}} to {{appcd-core}}.    2. Add a {{appcd pm}} command that would allow users to install the default plugins, setup local dev plugins, install 3rd party plugins, uninstall plugins, and view installed plugins. Subcommands include {{list}}, {{install}}, {{uninstall}}, {{search}}, {{update}}, and {{view}}.    3. Add a file to {{appcd}} containing the prescribed default plugin list based on the list currently in {{appcd-default-plugins}}.    a. We could elect to lockdown plugin versions instead of using semver ranges.  b. We could check online to download an updated list so that we don't have to ship a new {{appcd}} whenever we want to update plugins.    4. Add a {{appcd setup}} command that leverages the plugin command's logic (from #1) to reconcile and install the default appcd plugins defined in the list (from \#2). Note that {{appcd setup}} is generic in nature and can be used to configure specific behavior such as telemetry opt-in and proxy settings.    5. After {{appcd}} is installed, an npm script would print a message instructing the user to run {{appcd setup}}. Note that no appcd plugins would be installed at install time via an npm script.    6. Remove {{appcd-default-plugins}}. At runtime, instead of attempting to reconcile and install the default plugins, print the {{Run: appcd setup}} message.","New Feature",High,Resolved,"2020-01-14 21:40:30","2020-01-14 21:40:30",34
"Appcelerator Daemon","@appcd/plugin-android: Fails to start with Error: Recursively watching root is not permitted","H5.Description    When attempting to start the android plugin I'm getting the below error, this works fine on CLI  7.1.2 (plugin version 1.3.0/appcd version 1.1.3) and CLI 8.0.0-master.4 (plugin version 1.5.2/appcd 3.1.0) (note are we not choosing to lock down plugin versions per default-plugin release, this re-introduces the risk that we had previously worked to eliminate)        h5.Steps to reproduce    1. Install appc cli 8.0.0-master.5 from preprod  2. Start the daemon {{appc appcd start}}  3. Call the android endpoints {{appc appcd exec /android/1.x/info}} and {{appc appcd exec /android/2.x/info}}    h5.Actual    Above error    h5.Expected    No error, android info should be returned",Bug,Critical,Closed,"2020-01-14 10:22:10","2020-01-14 10:22:10",8
"Appcelerator Daemon","Add appcd plugin API version","The Appc Daemon's plugin system allows plugins to specify which appcd version they are compatible with, however we have to ship new plugins for each major plugin version whenever we bump the appcd major version regardless if the plugin system actually changed.    Since the plugin system rarely changes, we shouldn't couple plugins with the appcd version, but rather a separate plugin API version.    For example, the iOS appcd plugin 1.x is compatible with every appcd version, but iOS appcd plugin 2.x requires appcd version 3.x because of changes to appcd-detect that is passed into each plugin.",Story,Medium,Resolved,"2020-01-07 18:41:40","2020-01-07 18:41:40",13
"Appcelerator Daemon","Plugin manager telemetry doesn't wait for initialization","The {{PluginManager}} scans the initial plugin paths and then enables telemetry. The problem is detecting the plugin schemas is async and the {{PluginManager}} constructor does not properly block the enabling of telemetry events.    This behavior is leading to events unnecessary telemetry events being generated during start for each plugin.",Bug,Medium,Resolved,"2020-01-06 18:42:07","2020-01-06 18:42:07",8
"Appcelerator Daemon","Plugins not installed if access denied to yarn links directory","If the yarn links directory exists, but access is denied, it blows up and the daemon does not properly install any plugins.        Reading the yarn links directory is an optional check and thus we simply need to gracefully handle access and continue to install the plugins.",Bug,Critical,Resolved,"2019-12-06 19:31:38","2019-12-06 19:31:38",5
"Appcelerator Daemon","iOS info missing watch info in simRuntimes with the cli 7.1.2-master.6","When testing via studio the watch simulators were not shown when using Appc CLI 7.1.2-master.6. It works fine with older appc cli builds.  Running the command appc appcd exec /ios/latest/info noticed that the simRumtimes are missing the info related to watch.",Bug,High,Closed,"2019-11-18 20:05:52","2019-11-18 20:05:52",8
"Appcelerator Daemon","SIGINT triggered in core process","When a process spawns {{appcd start}}, then that process is interrupted via CTRL-C (aka SIGINT), then the core daemon process receives the SIGINT also and shutsdown. The daemon should not be receiving the SIGINT.",Bug,Critical,Resolved,"2019-10-25 20:26:07","2019-10-25 20:26:07",8
"Appcelerator Daemon","Remove winreglib dependency from appcd-response","appcd-response is used by several packages such as appcd-subprocess which is used by non-appcd projects. appcd-response needs to detect the locale in order to display the appropriate message. On Windows machines, the locale is retrieved from the Windows Registry.    Previously, appcd-response@1.x uses appcd-winreg (now deprecated) which in turned used winreg to simply spawn the {{reg.exe}} command and query the registry.    When appcd-winreg was sunset, it was replaced with the new winreglib, a native Node.js addon. Now when a non-appcd project uses something like appcd-subprocess, it will depend on winreglib and that complicates install issues for specific environments such as Atom plugins on Linux.    The solution here is to replace appcd-response's winreglib dependency with two simple {{spawnSync()}} calls.",Improvement,High,Resolved,"2019-10-24 18:22:25","2019-10-24 18:22:25",5
"Appcelerator Daemon","Unsubscribe in external plugin service dispatcher not called when forcefully closing connection","Canceling a subscription to a service dispatcher in external plugins won't properly trigger the cleanup logic since the plugin isn't notified about the end of response stream like it is happening in internal plugins.    *Steps to reproduce the behavior*  # Open a subscription to any internal plugin, e.g. {{appcd exec /appcd/status/system/memory --subscribe}}, and then cancel the subscription by CTRL+C  # Notice that the subscription will be properly cleaned up as indicated by the following logs:    # Now, do the same for an external plugin, e.g. run {{appcd exec /titanium/latest/sdk --subscribe}} and then cancel the subscription by CTRL+C  # No subscription cleanup is done as you can see in the following logs      *Actual behavior*  Subscriptions in external plugins are not properly cleaned up and a service dispatchers {{onUnsubscribe}} and {{destroySubscription}} are not being called.    *Expected behavior*  A subscriptions cleanup logic is properly being executed for external plugins.",Bug,None,Resolved,"2019-09-24 11:18:38","2019-09-24 11:18:38",13
"Appcelerator Daemon","Fix offline support","The daemon doesn't work as expected without an Internet connection. Problems arise with installing default plugins and sending telemetry info. There may be other areas.",Bug,High,Resolved,"2019-09-17 17:14:55","2019-09-17 17:14:55",8
"Appcelerator Daemon","Daemon reports iOS Simulator listing as only 9.3 devices with multiple Xcode's, sim versions installed","I'm trying to test debugger changes within Studio around iOS 13. However, the simulator listing displayed shows the list of 9.3 simulators only.    I have Xcode 10.3 and 11 beta 6 installed. 11 beta 6 is selected.    The JSON info object returned by the daemon only has the 9.3 iOS simulators listed within it. (though the Xcode listings shows 12.4 and 13.0 in it's sim/sdk version listings)    As a result, trying to launch to any of the listed simulators ends up failing (around Xcode 10.3 Eula not being accepted - which is presumably related to Xcode 11 being the selected/used one).    Here's the result of running {{ti info}}:  ",Bug,High,Resolved,"2019-08-28 16:43:07","2019-08-28 16:43:07",2
"Appcelerator Daemon","iOS: Daemon fails to detects iOS 13 simulators","h5.Description    When using appcd 1.1.3 the ios plugin fails to detect iOS 13 simulators installed via xcode 11. This is fixed in ioslib 3 (and the upcoming v2 of appcd-plugin-ios) but we need to cherry pick the ioslib changes back to v2 to ensure appcd 1.1.3 works for ios 13/xcode 11 release",Bug,High,Resolved,"2019-08-14 14:25:46","2019-08-14 14:25:46",5
"Appcelerator Daemon","appcd-plugin@1.4.0 is not compatible with daemon@1.x","h5.Description    appcd-plugin@1.4.0 is causing plugins to error on startup when using appc daemon 1.x (the appc cli). I have not got any useful logs for this yet. I have rolled back the latest tag for appcd-plugin to 1.3.0 to prevent new users having any issues    cc [~cb1kenobi]",Bug,Critical,Resolved,"2019-06-07 14:44:35","2019-06-07 14:44:35",8
"Appcelerator Daemon","appcd-default-plugins: Bundle multiple plugin versions","Now that there are multiple major versions of appcd plugins, we need figure out a way to ship them. Some tools depend on v1, others on v2. We need both.    Ideally plugins would be installed via the AMPLIFY Package Manager, but we're not quite there yet. So, it makes sense to use {{appcd-default-plugins}} as the package.    The appcd plugin system does support a nested plugin directory scheme, but this is incompatible with {{node_modules}}. So we'll likely need a pre-publish task that organizes the files appropriately and efficiently.",Improvement,Critical,Resolved,"2019-06-05 16:33:42","2019-06-05 16:33:42",13
"Appcelerator Daemon","node-ios-device: Refactor to use N-API","{{node-ios-device}} uses nan (Native Abstractions for Node.js) and whenever there's a new major version of Node, something breaks.     To future-proof {{node-ios-device}}, we need to adopt Node's N-API.",Improvement,Critical,Resolved,"2019-06-05 04:08:12","2019-06-05 04:08:12",21
"Appcelerator Daemon","windowslib: Add ability to get remote device info","Microsoft made a handy API we should use: https://docs.microsoft.com/en-us/windows/uwp/debug-test-perf/device-portal-api-core.",Improvement,None,Resolved,"2019-06-04 17:49:36","2019-06-04 17:49:36",1
"Appcelerator Daemon","appcd-plugin: Remove appcd-winreg in appcd-plugin@4.0.0","{{appcd-winreg}} is deprecated and plugins should either migrate to {{winreglib}} or explicitly depend on {{appcd-winreg}}.",Improvement,Low,Resolved,"2019-05-28 19:22:22","2019-05-28 19:22:22",2
"Appcelerator Daemon","Deprecate appcd-winreg","Now that {{winreglib}} is done, there is no need for {{appcd-winreg}}, so mark the npm package as deprecated and update the following packages to use {{winreglib}} instead:  * {{appcd-detect}}  * {{appcd-response}}  * {{appcd-machine-id}}",Improvement,High,Resolved,"2019-05-26 13:28:52","2019-05-26 13:28:52",5
"Appcelerator Daemon","appcd-gulp: Add Node.js 12 babel conf","Node.js 12 ships with V8 that supports new JavaScript features that do not require transpilation. Among the new features are class fields.    Node 12 also has support for modules, though this may be a larger scope than simply removing ES6 module transpilation.",Improvement,Medium,Resolved,"2019-04-30 06:15:11","2019-04-30 06:15:11",5
"Appcelerator Daemon","appcd-config: Added support for config layers to be used by plugins","Plugin configs are loaded and mixed with the global config, but it's merged at a global level and once merged, remains merged until the daemon is stopped. It also doesn't namespace the plugin configs.    To solve this, {{appcd-config}} needs the ability to define config layers. There is a default root layer, but then each registered config file from plugin is a new layer. These plugin config layers are namespaced so that they don't conflict.    Note that this does not affect the user-defined config which overlays everything.",Improvement,High,Resolved,"2019-04-03 21:29:42","2019-04-03 21:29:42",8
"Appcelerator Daemon","appcd-plugin: Tunnel messages missing dispatcher context props","Plugins run in a child process and communicate with a parent process using an IPC-based tunnel. However the tunnel does not translate over the {{headers}} and {{source}} from a {{DispatcherContext}} instance.    Instead of passing the {{DispatcherContext}}'s {{request}} property, the tunnel needs to step up one level and pass the {{headers}}, {{path}}, {{request}} (formerly data), and {{source}}.",Improvement,High,Resolved,"2019-04-02 08:00:04","2019-04-02 08:00:04",8
"Appcelerator Daemon","appcd-subprocess: Remove HTTP source check","The {{SubprocessManager}} has a false security measure where only requests from internal routes and plugins and requests from WebSockets can spawn commands. Requests from HTTP are forbidden.    Since WebSockets requests are essentially HTTP requests, there's no point blocking HTTP requests. The daemon's web server listens on localhost only, so there's no way for an outside actor to spawn a command.    To make things worse, the check to see if the source is indeed http is broken. It checks if {{ctx.request.source}} is http when it should be checking {{ctx.source}}.    This restriction is pointless and does not work. It should just be removed.",Improvement,Medium,Resolved,"2019-02-14 23:28:36","2019-02-14 23:28:36",5
"Appcelerator Daemon","Error streaming object responses to HTTP clients","When a request is made to a service from an HTTP client, such as {{curl}}, that streams an object response, the dispatcher context's response stream is eventually piped into Koa's HTTP server's response stream which expects streamed chunks to be either strings or buffers. When an object is streamed, an error is thrown.    The solution is to stringify the object before it gets piped to the server response.",Bug,High,Resolved,"2019-02-14 21:13:20","2019-02-14 21:13:20",5
"Appcelerator Daemon","Appcd Deamon not working ","*Steps To Reproduce:*  1.Run  appcd command in terminal    *Expected:*  Daemon should be restarted   *Actual:*  The daemon refuses to start and throws error  An uncaught exception was thrown!  Cannot destructure property `filesize` of 'undefined' or 'null'.  Cannot destructure property `filesize` of 'undefined' or 'null'.  *Note1:*  For me when I changed the cli to 7.0.9 ,it worked fine.  *Note 2:*  For Josh Quick ,this happens with CLI v7.0.9 also and he tried with node v8.9.3 and v10.15.0  ​ It also causes Appc Studio to beach ball forever",Bug,High,Resolved,"2019-01-24 19:45:04","2019-01-24 19:45:04",5
"Appcelerator Daemon","Investigate possibility of bi-directional websocket requests",.,Improvement,None,Resolved,"2018-10-25 17:05:11","2018-10-25 17:05:11",1
"Appcelerator Daemon","appcd exec doesn't properly handle streamed responses","There is an issue where non-subscription based responses are not being terminated when finished. The problem stems from the {{WebSocketSession}} not properly sending a {{fin: true}} on the last message and the client not handling the last message in the request.",Bug,High,Resolved,"2018-10-25 14:22:51","2018-10-25 14:22:51",8
"Appcelerator Daemon","appcd-plugin: Expose services in plugin info","Wouldn't it be cool if plugin info included a list of service endpoints!?",Improvement,Medium,Resolved,"2018-10-22 16:18:29","2018-10-22 16:18:29",3
"Appcelerator Daemon","appcd-core: Add AMPLIFY CLI version to telemetry","Add AMPLIFY_CLI env var to the telemetry payload.",Improvement,Medium,Resolved,"2018-09-28 16:02:34","2018-09-28 16:02:34",2
"Appcelerator Daemon","Android configuration issues with the Studio 5.1.0","Hi all.  I am having issues with Studio on my Mac. It seems to randomly not know that I have Android SDKs installed.  It worked last week.  Just this morning, I start up studio and on the dashboard I see that Android is ready to go.  Then an few seconds later it changes to grayed out and the button says download.  I click download and run the install - when I do it recognizes that I already have some versions of the SDK installed.  But once through the install process, the problem still exists.  I have been doing this all morning.  An interesting point is that one of the times I did this process, it worked and I saw the emulators that I have always had available in Studio.   Also note that the preferences pane in Studio sometimes shows that it has found the SDKs and the emulators dropdown is populated, but most of the time it looks like the attached screenshot.  Any help would be greatly appreciated as I am unable to do Android mobile demonstrations and I have several in the near future.  Thanks in advance.",Bug,High,Resolved,"2018-06-26 04:47:14","2018-06-26 04:47:14",5
"Appcelerator Daemon","appcd-gulp: Replace del.sync() with fs.removeSync()","Since we already depend on {{fs-extra}}, just use it's {{fs.removeSync()}} function instead of pulling in {{del}}.",Improvement,Medium,Resolved,"2018-05-23 16:48:35","2018-05-23 16:48:35",3
"Appcelerator Daemon","Update appcd to latest cli-kit and export CLI definintion","cli-kit now allows for extensions and appcd needs to export its CLI definition to be consumable by other cli-kit enabled CLI's.",Improvement,High,Resolved,"2018-05-15 21:50:58","2018-05-15 21:50:58",13
"Appcelerator Daemon","Appcelerator Studio not detecting android emulator and emulator doesn't come up on windows 7","Hello,    We have an Enterprise customer who is facing an issue with Appcelerator Studio. Appcelerator Studio not detecting android emulator and emulator doesn't come up on windows 7. We have attached the screenshot, Studio Diagnostic log and *appc ti setup check* log file.     If any others information needed please let us know.    Thanks",Bug,High,Closed,"2018-04-25 15:42:54","2018-04-25 15:42:54",5
"Appcelerator Daemon","Paths of interest should only be watched once","The quick and dirty {{watch()}} method used in the Android and iOS appcd plugin info service will record all active fs watch subscription ids, re-watch all paths of interest, then unwatch the original subscription ids. This works, but can lead to fs events being lost.    This issue was discovered while fixing DAEMON-252.",Bug,High,Resolved,"2018-04-13 23:04:37","2018-04-13 23:04:37",5
"Appcelerator Daemon","Android: Daemon does not detect addition/deletion of genymotion emulator's immediately","Does not appear to be a regression. Seen in 1.0.1 as well.    h5.Steps to reproduce:  1. Add a 2-3 genymotion emulator in the genymotion app.  2. Run {{appc appcd exec /android/latest/info/emulators}}.  3. Repeat the steps after deleting 2-3 genymotion emulators.    h5.Actual result:  1. Appc daemon does not pick up the changes to genymotion immediately for both addition & deletion scenarios but, does after an {{appc appcd restart}}.    h5.Expected results:  1. Appc daemon should pickup the changes immediately.",Bug,High,Resolved,"2018-04-12 21:17:21","2018-04-12 21:17:21",8
"Appcelerator Daemon","appcd-plugin: Plugin info not updated when package.json is changed","Once the plugin system detects and registers a plugin, it doesn't reload the plugin information when the package.json is changed.    If the package.json is modified, the plugin should be stopped. Furthermore, if the package.json is not valid JSON, then it should also be unregistered.",Bug,Medium,Resolved,"2018-04-11 21:51:49","2018-04-11 21:51:49",5
"Appcelerator Daemon","@appcd/plugin-ios: New iOS simulator runtimes are not picked up after install","h5.Description    *This is probably an improvement as I can't find any reference to us currently attempting to do this*    If I install a new iOS simulator runtime in xcode, then the daemon will not pick it up. Looking through the code, I think we need to set up a watcher on [xcode.globalSimProfilesPath|https://github.com/appcelerator/ioslib/blob/6189855ebc055f85957b93bf4bbe595189607396/src/xcode.js#L29] in ioslib and rescan xcodes and simulators on change.      h5.Steps to reproduce  * Start the daemon {{appcd start}}  * Call the ios info endpoint for xcode info {{appcd exec /ios/latest/info/xcode}}, make note of the simRuntimes property  * Install a new sim runtime through Xcode (Xcode->Preferences->Components)  * When finished call the ios info endpoint again, noting the simRuntimes property for the xcode you installed the runtime in    h5.Actual    No new runtime is detected    h5.Expected    New runtime should be detected",Bug,High,Resolved,"2018-04-09 15:02:30","2018-04-09 15:02:30",3
"Appcelerator Daemon","appcd-plugin-android: Genymotion emulators not reloaded on change","h5.Description    When making changes to genymotion emulators they are not reloaded under the {{/android/latest/info/emulators}} endpoint, however they are reloaded under the {{/genymotion/latest/info/emulators}} endpoint. It looks like we just need to include the vbox config path in the watch paths    h5.Steps to reproduce    * Start the daemon {{appcd start}}  * Call {{appcd exec /android/latest/emulators}}  * Either add or remove a genymotion emulator  * Call {{appcd exec /android/latest/emulators}}  * Call {{appcd exec /genymotion/latest/emulators}}      h5.Actual    Genymotion emulator not changed in the android endpoint, it is in the genymotion endpoint    h5.Expected    Should be changed in both",Bug,None,Resolved,"2018-04-09 12:18:58","2018-04-09 12:18:58",3
"Appcelerator Daemon","Allow arbitrary metadata to be added to error objects","As the daemon routes errors from a plugin to the core or from the core over a WebSocket, errors are treated special so that can recreate the error as a real Error object whenever coming for another context. The problem is error properties are whitelisted and some are computed (getters).    All error handling needs to be cleaned up so that we can pass along arbitrary values added to the original error object.    When {{appcd exec}} is returned an error, the error should be stringified to reveal all properties including the hidden error object properties.",Improvement,Critical,Resolved,"2018-03-30 04:12:04","2018-03-30 04:12:04",8
"Appcelerator Daemon","appcd-plugin-titanium-sdk: Add install, uninstall, and search ","Now that the Titanium SDK plugin has a sdk service that lists all installed Titanium SDKs, we need the ability:    * To search for available SDKs to download (by name or branch)  * Download and install an SDK from an Appc server  * Download and install an SDK from an arbitrary URL  * Install an SDK from a local zip file  * Uninstall a SDK","New Feature",High,Resolved,"2018-03-23 05:50:02","2018-03-23 05:50:02",13
"Appcelerator Daemon","appcd-plugin-titanium-sdk: Split info service into sdk and module services","We need to split the info service into distinct sdk and module services so that it becomes more logical when we add more functionality for sdks and modules.",Improvement,Critical,Resolved,"2018-03-22 15:54:21","2018-03-22 15:54:21",5
"Appcelerator Daemon","Upgrade to latest babel packages","Update the daemon's babel dependencies to the latest and greatest.",Improvement,High,Resolved,"2018-03-15 06:23:33","2018-03-15 06:23:33",8
"Appcelerator Daemon","appcd-nodejs: Add mechanism for removing old Node.js executables","We would like to upgrade the Node.js version of the Appc Daemon, but everytime we do, it will download a new Node.js executable. The problem is we do not want to end up with dozens of Node.js executables.    We need a way of timestamp when a specific version of Node.js was last run. Then {{appcd-nodejs}} needs a service that uses a {{setTimeout()}} that periodically archives/deletes executables that haven't been used for some period of time.","New Feature",High,Resolved,"2018-03-14 16:05:04","2018-03-14 16:05:04",8
"Appcelerator Daemon","Create titaniumlib with tiapp.xml parsing, sdk and module detection logic","Create a new repo {{titaniumlib}} that contains the logic for parsing tiapp.xml files as well as the TiSDK and module detection code and scan paths from appcd-plugin-titanium-sdk.    appcd-plugin-titanium will need to be updated to call titaniumlib for the sdk and module detection.    The tiapp.xml parsing logic is to be lifted from node-titanium-sdk and freshened up with some ES6 syntax.    Current tiapp.xml documentation: https://docs.appcelerator.com/platform/latest/#!/guide/tiapp.xml_and_timodule.xml_Reference.    tiapp.xml proposal: https://techweb.axway.com/confluence/display/pe/Proposal%3A+Titanium+Project+Configuration",Story,Critical,Open,"2018-03-09 17:26:27","2018-03-09 17:26:27",13
"Appcelerator Daemon","appcd: Global options not displayed on command help","Global options should be displayed on the help screen for individual commands, but it's not.        Global options are present above.        Global options are not displayed enough.  ",Bug,High,Resolved,"2018-03-09 04:34:12","2018-03-09 04:34:12",5
"Appcelerator Daemon","Telemetry: Events are being sent using the incorrect guid","h5.Description    Currently the daemon defaults to preproduction for the telemetry. After some discussions it was decided that we need to not have a concept of preproduction and instead do the following    * Remove preprod  * Remove prod, put into default.js  * Add deploytype to the analytics payloads  * In the gulp scripts, we should set the telemetry environment on start  * Document the variable  * Validate that the analytics being sent are shown on dashboard  ",Bug,None,Resolved,"2018-03-08 16:36:15","2018-03-08 16:36:15",5
"Appcelerator Daemon","appcd-plugin: Scheme needs to cancel debounced scheme change events on shutdown","When the PluginManager shuts down, it unregisters all plugin paths and the scheme associated with the plugin path. If it's shut down while a scheme's debounced change event is pending, things go haywire. The scheme {{destory()}} method needs to call the {{cancel()}} method introduced by DAEMON-238.",Improvement,Critical,Resolved,"2018-02-16 04:27:01","2018-02-16 04:27:01",5
"Appcelerator Daemon","appcd-util: Add ability to cancel a debounce","{{debounce()}} uses a {{setTimeout()}} that has no way to be cancelled. This becomes a problem if you are debouncing events for something that you have shutdown.",Improvement,Critical,Resolved,"2018-02-16 04:22:57","2018-02-16 04:22:57",3
"Appcelerator Daemon","Create Appc Daemon 1.1.0 release notes","Need to go through the appc-daemon repo and all plugins and write up release notes for v1.1.0.",Story,Critical,Resolved,"2018-02-15 15:04:55","2018-02-15 15:04:55",8
"Appcelerator Daemon","appcd-fswatcher: Recursive fs watchers do not clean up when subdirectories are deleted","When recursive watching a directory, it will correctly emit change events for new subdirectories and start watching them. However if the subdirectories are deleted, the fs watcher continues to watch the non-existent node.            It still continues to watch {{/some/path/foo}}.",Bug,High,Resolved,"2018-02-14 23:11:02","2018-02-14 23:11:02",31
"Appcelerator Daemon","appcd-fswatcher: EACESS error when starting appcd-plugin-android","h5.Description    When calling {{appcd exec /android/latest/info}} on master of appc-daemon, the plugin fails to start with, {{Failed to activate plugin (code 6)}}, I've tracked this back through the rabbit hole and there seems to be a few things that are at play here.    I trimmed the plugin down to only do NDK detection to hopefully make the logs a little easier to read (although I had to bump the buffer to 2.5k from 1k)    * Walking through the changes in appcd-detect seem to show [this commit|https://github.com/appcelerator/appc-daemon/commit/829d533762fbd03e52b0e9da88276992b5da6a30#diff-1174f97bf7dc72538ff82fe34bbc5c65] as being the commit that made this start failing  * androidlib lists [/opt|https://github.com/appcelerator/androidlib/blob/82cfefac30aa5bb92fc5b7865a1ccbcf27c4eacd/src/ndk.js#L17] as a place to scan for the NDKs, this doesn't seem to exist on my system so when we do a real on this path [https://github.com/appcelerator/appc-daemon/blob/93841cf2c52a82151f061a1f1ea38317efbb8ecf/packages/appcd-detect/src/detect-engine.js#L228] it becomes {{/}}  * From the logs in the attached appcd dump it then seems that the detect engine then starts to watch all subdirectories of / (timestamp is around {{2018-02-12T17:13:39.535Z}})  * Some of the directories underneath the root throw an EACCESS on fs.watch, I've logged this in the logs around timestamp 2018-02-12T17:13:39.554Z, which cause the plugin to start    I believe we should be handling EACCESS errors in the fswatcher",Bug,None,Resolved,"2018-02-12 21:30:27","2018-02-12 21:30:27",21
"Appcelerator Daemon","FSWatcher: Events relating to permission changes to a folder are dropped on Windows","h5.Description    In DAEMON-222 changed were made to prevent unnecessary change events (a child item changing for example) on a folder bubbling up, which had the side-effect of causing any change events to not fire for a folder on Windows. The current solutions for tracking information through fs.Stats is lightweight on Windows a potential native module (https://github.com/xxoo/node-fswin) was found but the heaviness of using this module wasn't wanted. This is more than likely going to need to be sovled in the future    It's probable that issues relating to permissions will be prevalent on unixy systems too    h5.Steps to repro    TODO",Bug,Medium,Resolved,"2018-02-08 17:49:54","2018-02-08 17:49:54",13
"Appcelerator Daemon","Stream stringified JSON data over IPC and response instead of JSON.stringify()","When a plugin sends a JS object response over IPC or a service writes a JS object response over the WebSocket or HTTP response, the JS object is serialized using {{JSON.stringify()}}. However, {{JSON.stringify()}} eats up a ton of memory when the JS object is large. It would be much more efficient to stringify while writing to the stream.    There are several npm packages that will stringify a stream, but they are geared towards each write being a small object which they just call {{JSON.stringify()}} on it.    What we need is transforming stream that does stringifies the JS object on the fly. Stringify is not a complex algorithm, but would need to figure out how to handle Node specific objects like {{Buffer}}.",Improvement,Critical,Resolved,"2018-02-02 16:42:06","2018-02-02 16:42:06",3
"Appcelerator Daemon","Subscriptions not terminated if connection is reset","If a client goes away, the WebSocketServer can emit an error {{ECONNRESET}} instead of emitting an end event.    We need to add better logging and also listen for errors so that we can end the internal subscription stream.",Bug,Critical,Resolved,"2018-01-23 17:24:47","2018-01-23 17:24:47",5
"Appcelerator Daemon","Plugin: Noisy warnings in log due to invalid appcd plugins","The plugin system will check several directories to see if they are a appcd plugin, however if there are several non-appcd plugin modules, the log will be filled with a bunch of bogus warnings.    We need to filter out these warnings so that we only error if we find an appcd plugin with invalid appcd settings.",Bug,Medium,Resolved,"2018-01-21 20:20:22","2018-01-21 20:20:22",5
"Appcelerator Daemon","gulp upgrade: Run 'yarn' in top-level after updates and 'yarn upgrade' for each package","The {{gulp upgrade}} task does a good job of updating all of the npm dependencies in each package's {{package.json}}, but the top-level doesn't actually install the new deps. I think we simply need to remove the call to {{lerna bootstrap}} and call {{yarn}}.    Also, we never upgrade the dependencies of dependencies. We need to write temporary {{package.json}} files with no {{appcd-*}} deps, run {{yarn upgrade}}, then restore the original {{package.json}}. This will update the {{yarn.lock}} files.",Improvement,Medium,Resolved,"2018-01-16 16:40:44","2018-01-16 16:40:44",5
"Appcelerator Daemon","Dump: Errors and warnings not shown in the log","h5.Description    When running {{appcd dump}} I noticed that errors and warnings don't seem to be logged.   For example in the attached {{appcd-dump.json}} the object at line 14580 should represent the below error        h5.Steps to repro    Ensure the daemon is started and you're watching the logs    # {{appcd exec /foo/bar}}  # {{appcd dump --view}}    h5.Actual    Errors and warnings are not shown in the log output    h5.Expected    Errors and warnings should be shown",Bug,High,Resolved,"2018-01-12 11:28:05","2018-01-12 11:28:05",21
"Appcelerator Daemon","appcd-detect: Subdirectories are not watched for changes that would make them valid","When detecting things in a directory, if a subdirectory is created, but the criteria in that subdirectory does not exist yet, the subdirectory is never rescanned. This only applies when {{opts.watch=true}}.",Bug,Critical,Resolved,"2018-01-11 20:51:21","2018-01-11 20:51:21",5
"Appcelerator Daemon","appcd-plugin-titanium-sdk: Titanium info service","Create the {{appcd-plugin-titanium-sdk}} plugin and the info service. The info service is to detect installed Titanium SDKs and modules.","New Feature",High,Resolved,"2018-01-09 22:51:38","2018-01-09 22:51:38",13
"Appcelerator Daemon","Plugins not ordered on status output","The plugins in the output from {{appcd status}} are not ordered.",Improvement,Low,Resolved,"2018-01-09 20:15:34","2018-01-09 20:15:34",3
"Appcelerator Daemon","Create Appc Daemon plugin template","We need a template for creating new appcd plugins.","New Feature",Medium,Resolved,"2018-01-08 16:24:47","2018-01-08 16:24:47",13
"Appcelerator Daemon","issues reflecting available iOS mobileProvision profiles","Have downloaded new provisioning profiles as I have a new device to test/run the app in AdHoc mode.    I have deleted the existing provisioning files and updated with the new ones (files in command line are the new ones). I have restarted Studio, XCode and the computer for changes to take effect but no success.    I am unable to package apps using the new profiles as the certificates are still the old ones. 'Refresh' button doesn't seem to reflect the changes made to certificates and to provisioning Profiles.",Bug,Critical,Resolved,"2017-12-14 00:20:40","2017-12-14 00:20:40",3
"Appcelerator Daemon","system-info: npm detection fails if unable to get npm prefix","The system-info plugin is responsible for detecting npm. It does this by first locating the npm executable in the system PATH, then tries to get the prefix by running {{npm prefix -g}}. However, if this should fail, then the prefix will be {{undefined}} and an exception is thrown when trying to expand the path.",Bug,Critical,Resolved,"2017-12-14 20:11:19","2017-12-14 20:11:19",5
"Appcelerator Daemon","Studio: iOS SDK home not found and NullPointerException","I updated to Appcelerator Studio 5.0.0.201712081732 (official Release) and now the iOS SDK home is not found anymore. Android works.    Can I do something to fix it?    --    There's a bug in ioslib when it tries to build the list of teams. If one of the provisioning profiles does not have any teams, then the {{teamIds}} will be {{null}}. The code that builds the unique list of teams expects teams to be an array.",Bug,Critical,Resolved,"2017-12-11 08:39:21","2017-12-11 08:39:21",8
"Appcelerator Daemon","Enforce appcd version when loading plugins","We need a way to enforce that a plugin is compatible with specific appcd versions. We solve this by adding a {{appcdVersion}} to each plugin's {{package.json}}. When the plugin is detected, the plugin system will check that the plugin is compatible.    This will lay the foundation for being able to inject appcd dependencies into plugins which solves issues of extraneous npm dependencies and {{instanceof}} not working if object is not the same.",Improvement,Critical,Resolved,"2017-12-12 21:19:48","2017-12-12 21:19:48",21
"Appcelerator Daemon","appc appcd restart does not restart the daemon but keeps on adding appcd-plugin-host processes which keep running & consume memory","h5.Steps to reproduce:  1. Do a {{appc appcd restart}} in the command prompt.    h5.Actual results:  1. The daemon does not restart (Not sure if it does restart internally, but gives wrong message that it didn't in the terminal).      2. It also keeps on adding {{appcd-plugin-host}} processes after each restart command run. These processes stay running & consume memory. (Attached a screenshot for reference).    h5. Expected results:  1. Daemon should restart successfully every time command is run & should not keep on adding new appcd-plugin-host processes or kill/stop the old ones.  ",Bug,Critical,Closed,"2017-12-11 18:48:53","2017-12-11 18:48:53",13
"Appcelerator Daemon","Appcelerator Studio not detecting iOS after upgrading","After upgrading Xcode, Appcelerator Studio and node, I can't run any application from Appcelerator Studio.    The Run/Debug buttons have disappeared, whenever I click on anything concerning iOS, I get the error:    !MESSAGE An internal error occurred during: Loading Provisioning Profiles....  !STACK 0  java.lang.NullPointerException    Attached some of the weird things happening + the logs.    I already tried uninstalling Appcelerator Studio, it didn't change anything (besides losing all of my configurations)    ",Bug,Critical,Resolved,"2017-12-11 15:42:34","2017-12-11 15:42:34",1
"Appcelerator Daemon","ioslib: Failing to parse certs if any cert has invalid unicode sequences","It's possible for a cert to have a name that cannot be decoded to an unsupported character sequence. We need to wrap each cert parsing in a try/catch so that we just skip the cert and move on.",Story,High,Resolved,"2017-12-11 15:22:57","2017-12-11 15:22:57",3
"Appcelerator Daemon","appcd-winreg: Add support for specifying registry hive architechture","h5.Description    From my research into windowslib v2 we're going to need to query the 32 bit registry hive architecture, this can be achieved by passing an opt.arch value to win-reg. If no value is specified we should default to null. This will also need to be added to appcd-detect",Improvement,High,Resolved,"2017-12-06 15:51:17","2017-12-06 15:51:17",1
"Appcelerator Daemon","Create a feature film starring the Appc Daemon","It has been requested that there be a video about the Appc Daemon that describes what it is, how it works, and what the future holds for the daemon.    An outline will need to be written. Diagrams will need to be diagrammed. Screens will need capturing. Audio will need to be recorded. Video will need to be edited. Special effects will need to have special effects.",Story,Critical,Resolved,"2017-12-05 17:27:58","2017-12-05 17:27:58",99
"Appcelerator Daemon","Introduce Windows into the testing matrix","h5.Description    This ticket should cover both appc-daemon, and the *lib modules we have (maybe use appveyor for the lib modules)    Currently on Jenkins we test on osx or linux. It would be nice to also add Windows into the mix for this. Reviewing the current Jenkinsfile I imagine we would want to maintain running install and check on non-windows and then just add Windows to the test matrix. Maybe even expanding the tests section to run on osx, linux and windows in parallel",Story,High,Resolved,"2017-12-04 15:25:36","2017-12-04 15:25:36",21
"Appcelerator Daemon","Android device not detected when plugged in after daemon start upon system restart","Steps to Reproduce:  1. Restart the system and make sure to plug out connected android device  2. Start Daemon  3. Run the command /android/1.x/info. The devices section is blank as no device connected yet  4. Connect the device.  5. Again run the command /android/1.x/info.    Actual Result:  The device section still shows blank and does not show the connected device.  The device is shown in appc ti info.  Note: Repeating step 5 continues to give device as blank untill daemon is restarted.    Find attached the daemon dump.",Bug,Critical,Resolved,"2017-12-04 09:33:32","2017-12-04 09:33:32",8
"Appcelerator Daemon","Plugin config changes are not applied automatically","The Android, Genymotion, iOS, and Windows plugins have config options that are loaded once when the plugins are started. If any plugin specific config options are changed, then do not take effect until the plugin(s) or the daemon is restarted.    h4. Default config    * plugins.autoReload  ** appcd-plugin/src/external-plugin.js  * plugins.defaultInactivityTimeout  ** appcd-plugin/src/plugin.js  * server.agentPollInterval  ** appcd-core/src/status-monitor.js  ** appcd-plugin/src/external-plugin.js    h4. appcd-plugin-android    * android.ndk.searchPaths  ** appcd-plugin-android/src/android-info-service.js  * android.sdk.searchPaths  ** appcd-plugin-android/src/android-info-service.js",Bug,High,Resolved,"2017-11-28 20:23:59","2017-11-28 20:23:59",5
"Appcelerator Daemon","appcd-core: Ensure the pid file always exists","When the daemon is running, it creates a pid file in the appcd home dir. This is critical as it is used to determine if the daemon is running. If this file is deleted while the daemon is running, this can be problematic as the zombie daemon process will need to manually terminated by the user.",Improvement,Critical,Resolved,"2017-11-28 10:44:42","2017-11-28 10:44:42",3
"Appcelerator Daemon"," appc appcd exec start not working anymore","{{appc appcd exec start}} not working anymore.        ",Bug,None,Resolved,"2017-11-28 05:26:14","2017-11-28 05:26:14",1
"Appcelerator Daemon","appc appcd exec status is not working","Command {{appc appcd exec status}} is not working anymore. It was working earlier with the v1.0.0-22          ",Bug,None,Resolved,"2017-11-28 05:14:37","2017-11-28 05:14:37",1
"Appcelerator Daemon","Failed to start the Appc Daemon","Failed to start the Appc Daemon message shown when I start a daemon.         Looks like it's showing a wrong message when the daemon is already running.      ",Bug,High,Resolved,"2017-11-28 04:45:04","2017-11-28 04:45:04",8
"Appcelerator Daemon"," appc appcd exec /system-info/1.x/info command doesn't respond with 1.0.0-23"," appc appcd exec /system-info/1.x/info command doesn't respond with version 1.0.0-23            Please find the attached dump file.   [^appcd_dump_master48.json]   ",Bug,High,Resolved,"2017-11-28 04:32:04","2017-11-28 04:32:04",1
"Appcelerator Daemon","Windows: Daemon doesn't start first time when downloading node binary","h5.Description    *This error should have bubbled through to the cli I think*    Starting the daemon when the node binaries are not downloaded on Windows doesn't work first time, logs below. Looking at appcd-nodejs it only handles EXTBUSY which I think is unixy, windows is EBUSY        h5.Steps to reproduce    # Remove ~/.appcelerator/appcd/node  # {{set SNOOPLOGG=*}}  # {{appcd start --debug}}    h5.Actual    Daemon doesnt start    h5.Expected    Daemon should start",Bug,High,Resolved,"2017-11-27 13:41:55","2017-11-27 13:41:55",1
"Appcelerator Daemon","System-info doesn't have newly created Android AVD","System-info doesn't have newly created android AVD. I've created a new android AVD from the studio and it appeared in the ti info but not in the appcd system-info.    Please find the attached files.   [^appcd_dump_master44.json]    [^appcd_systeminfo_master44.json]    [^appc_tiinfo_master44.json] ",Bug,Critical,Resolved,"2017-11-26 06:58:43","2017-11-26 06:58:43",3
"Appcelerator Daemon","Unable to stop the daemon ","Unable to stop the daemon using {{appc appcd stop}}. It's an intermittent issue - doesn't have all the time. However, it doesn't have any impact on the studio for 5.0 release.    ",Bug,High,Resolved,"2017-11-23 13:31:11","2017-11-23 13:31:11",1
"Appcelerator Daemon","windowslib: Unable to build wptool project on a machine where the username contains spaces","h5.Description    *This isn't a new bug, just exposed by how we decided to expose appcd*    One of my machines has a space in the name, this causes an error when building the wptool executable and we're not in the temp dir, we need to escape the project path correctly",Bug,High,Resolved,"2017-11-23 13:30:01","2017-11-23 13:30:01",5
"Appcelerator Daemon","androidlib: Addons with a manifest.ini not detected","At some point, Android SDK add-ons moved away from {{source.properties}} files and to a {{manifest.ini}} file. We need to support both.",Improvement,Critical,Resolved,"2017-11-22 20:04:58","2017-11-22 20:04:58",5
"Appcelerator Daemon","appcd-config: Figure out how to set metadata for non-appcd config settings","We currently do not have plugins define metadata for plugin specific config options. Plugins do not have access to the main config object, thus they cannot directly add metadata.    One solution would be for the plugin system to read a plugin specific metadata config and merge it into the main config.",Improvement,Medium,Resolved,"2017-11-22 20:02:54","2017-11-22 20:02:54",8
"Appcelerator Daemon","appcd status command reads from earlier version","When I run *_appc appcd status_* command, the command reads from previously installed CLI.  Please check the dump file attached.    [~<USER>, please check this.",Bug,High,Resolved,"2017-11-22 11:09:03","2017-11-22 11:09:03",1
"Appcelerator Daemon","Android NDK is blank in system-info ","The android info fetched using appc appcd exec /android/latest/info returns Android NDK as blank.    Attached is the android output returned by appcd and appc cli",Bug,Critical,Resolved,"2017-11-22 10:37:58","2017-11-22 10:37:58",8
"Appcelerator Daemon","Sync appc ti config with the appc appcd config ","How and when do we sync {{appc ti config}} settings to {{appc appcd config}} - so that when studio is working with Appc Daemon it can only look for {{appc appcd config}}    Since everybody is trained to work with {{appc ti config}} and they might configure android.sdkPath, sdk.selected,etc., and expect they will be picked up directly in the studio    Any thoughts around it?  ",Bug,None,Resolved,"2017-11-22 06:24:41","2017-11-22 06:24:41",1
"Appcelerator Daemon","Plugins: Pickup the imported values from the titanium config","h5.Description    DAEMON-156 implemented importing the ti config, so lets implement it into the plugins. We should also watch the config for these values so we rescan if they get set",Improvement,Critical,Resolved,"2017-11-21 11:26:20","2017-11-21 11:26:20",2
"Appcelerator Daemon","windowslib: EBUSY error on wptool executable","h5.Description    When running appcd exec /system-info/1.x/info/ it seemed to be taking longer than usual to return, checking the logs I saw the below, I think it's possible that two detect processes are attempting to build wptool at the same time. We apparently deal with this inside windowslib but it seems to be flaky, it might be wise to stagger the detects to allow one to build before the other runs    I've had trouble reproducing this in an appc cli build fwiw        h5.Steps to reproduce    # Remove wptool.exe from windowslib/bin folder  # Start the daemon {{[appc] appcd start}}  # Query system info {{[appc] appcd exec /system-info/1.x/info/}}    h5.Actual    Plugin hangs, windows error above shown in logs    h5.Expected    No hang",Bug,Critical,Resolved,"2017-11-20 16:51:08","2017-11-20 16:51:08",8
"Appcelerator Daemon","appcd: Stop any running daemon instances post npm install","After installing the Appc Daemon, the post install script should use the just installed Appc Daemon code to stop so that the new code will be run.",Improvement,High,Resolved,"2017-11-20 05:55:34","2017-11-20 05:55:34",2
"Appcelerator Daemon","Move plugins out of appcd-daemon repo into separate repos","Once Appc Daemon 1.0.0 ships, we should move the plugins out of the {{appcd-daemon}} repo and into separate repos. This will allow each plugin to be versioned independently of each other and the Appc Daemon core.    Also move {{appcd-default-plugins}} into a separate repo so that we can add/remove plugins without having to publish a new appcd.",Improvement,Medium,Resolved,"2017-11-20 05:41:16","2017-11-20 05:41:16",13
"Appcelerator Daemon","Issues with Xcode info returned","Couple of issues found in the Xcode information returned when querying appc appcd exec /ios/latest/info    1. Any Xcode that is not present in the /Applications is not returned    2. The latest xcode in the system is returned as default even after switching to another xcode for default.   Check the attached appcd.txt  for output of running the appc appcd exec /ios/latest/info and the appcCLI.txt for output running appc ti info -t ios    The Xcode in downloads folder was made default but daemon output returns the latest code in /Applications as the default and does not list the Xcode in /downalods ",Bug,Critical,Resolved,"2017-11-18 17:25:48","2017-11-18 17:25:48",3
"Appcelerator Daemon","appId is missing in the provisioning profiles","appId is missing in the provisioning profiles",Bug,None,Resolved,"2017-11-18 03:59:49","2017-11-18 03:59:49",1
"Appcelerator Daemon","Android and Genymotion emulators are empty","Android and Genymotion emulators are shown empty on the latest daemon 1.0.0-12    Please find the attached files",Bug,Critical,Resolved,"2017-11-18 03:39:34","2017-11-18 03:39:34",13
"Appcelerator Daemon","appcd-plugin-android: Plugin activation hangs if no Android SDKs are found","If the system does not have any Android SDKs, the detect engine will return an empty array, however since it is initialized to an empty array, there's no change and thus no notifications and the detection hangs.    The fix requires a check if the results are empty, then resolve the SDK detection. However in doing this, it exposed a timing bug with NDK detection.",Bug,Critical,Resolved,"2017-11-17 18:49:22","2017-11-17 18:49:22",8
"Appcelerator Daemon","Windows OS:  /system-info/1.x/info command is not responding","/system-info/1.x/info command hangs on the windows machine. It's an intermittant issue.    Looks like it's getting into recursive loop on Detecting devices info",Bug,Critical,Resolved,"2017-11-17 10:54:32","2017-11-17 10:54:32",2
"Appcelerator Daemon","Windows system-info: 10.0 SDK emulators are not shown","Windows Phone SDK 10.0 emulators are missing in the windows system-info.  ",Bug,High,Resolved,"2017-11-17 10:49:36","2017-11-17 10:49:36",3
"Appcelerator Daemon","Windows: Visual Studio path is incorrect in the system-info","Visual studio path is incorrect in the windows system-info path    *Actual:*  C: /ProgramFiles(x86)/MicrosoftVisualStudio14.0/    *Expected:*  C:\Program Files (x86)\Microsoft Visual Studio 14.0      Same goes for the Windows Phone SDK path    *Actual:*  C: \ProgramFiles(x86)\MicrosoftSDKs\WindowsPhone\v8.1\    *Expected:*  C:\Program Files (x86)\Microsoft SDKs\Windows Phone\v8.1  ",Bug,None,Resolved,"2017-11-17 10:23:59","2017-11-17 10:23:59",1
"Appcelerator Daemon","ioslib: Versioning of package on npm is causing issues","h5.Description    *I know this isn't really a proper ticket but I needed somewhere to dump this*    Currently the ioslib version being pulled in is ioslib@2.0.0-beta.3 based off the version range of ^2.0.0-8. This (surprisingly to me) is correct in semver land and 2.0.0-beta.3 is considered to be greater than 2.0.0.-10 https://runkit.com/ewanharris/5a0e34d8e7d5da001228faf7    So currently we're borked and need a way out, here's the possible solutions, in no order.    # Bump ioslib to become ioslib@2.0.0-beta.4, replacing 2.0.0.-10  # Change the appcd-plugin-ios dependency to next, stay like this  # Change the appcd-plugin-ios dependency to next, ask npm nicely to remove ioslib@2.0.0-beta.3 (I dont see why they wouldnt), then eventually move back to ^2.0.0-10 version ranges.  # Release ioslib@2.0.1-0, move appcd-plugin-ios to ^2.0.1-0    I vote for 3 or 4 with an added sprinkle of promising to never do -beta.X on npm packages again :)",Bug,Critical,Resolved,"2017-11-17 01:10:40","2017-11-17 01:10:40",5
"Appcelerator Daemon","appcd-plugin: Can't [force] stop a plugin that's starting","It's possible for a plugin to be started, but activate() to be hung waiting for an unresolved promise. In this case, you can't stop the plugin until it starts.    We should allow plugins to be stopped if the plugin is started, but not activated.    We should allow plugins to be force stopped regardless if it's started, starting, or stopping.",Bug,High,Resolved,"2017-11-16 22:49:52","2017-11-16 22:49:52",3
"Appcelerator Daemon","Querying iOS devices results with Cannot find module 'plist' ","*Description*  Running the command appc appcd exec /ios/latest/info/devices  errors out with a message cannot find plist    *Steps to reproduce*  1. Install CLI 7.0.0-master.23  2. Start the daemon with appc appcd start  3. Connect an iOS devices and check that it's recognized eg. appc ti info  4. Run the command appc appcd exec /ios/latest/info/devices    *Actual result*  This result is seen:  Failed to load plugin: Cannot find module 'plist'    *Expected Result*  An output showing some details about the iOS device that is connected. No errors should be seen.",Bug,None,Resolved,"2017-11-16 22:29:19","2017-11-16 22:29:19",1
"Appcelerator Daemon","appcd: Suppress banner when run through appc","h5.Description    It was raised that the double banner when running {{appc appcd}} shouldn't happen, we should suppress this, I think we can use the APPC_ENV environment variable to do so, alternatively we could have the CLI push a {{--no-banner}} flag but I prefer the former",Improvement,Medium,Resolved,"2017-11-16 21:46:18","2017-11-16 21:46:18",1
"Appcelerator Daemon","appcd: Auto import config settings from Titanium CLI","It would great to be able to import the Titanium CLI config into the appcd user's config in {{~/.appcelerator/appcd/config.json}}.    Mappings would be as such:    * {{android.adb.port}} (Number) -> {{android.adb.port}} (Number)  * {{android.executables.aapt}} (String) -> {{android.executables.aapt}} (String)  * {{android.ndkPath}} (String) -> {{android.ndk.searchPaths}} (Array<String>)  * {{android.sdkPath}} (String) -> {{android.sdk.searchPaths}} (Array<String>)    The list goes on and on... https://wiki.appcelerator.org/display/guides2/Titanium+CLI+Options.    Here's the unmaintained list: https://wiki.appcelerator.org/display/CLI/CLI+Config+Settings.",Improvement,Medium,Resolved,"2017-11-16 19:01:16","2017-11-16 19:01:16",3
"Appcelerator Daemon","ios info is null due to Failed to load plugin: Cannot find module 'plist' ","I can't see ios info in the  {{appc appcd exec /system-info/1.x/info --json}}    *To reproduce:*  # Run appc use 7.0.0-master.22  # appc appcd exec /system-info/1.x/info --json  # Verify ios info - it's null    Please find the attached appcd dump file. ",Bug,None,Resolved,"2017-11-16 18:28:01","2017-11-16 18:28:01",1
"Appcelerator Daemon","JSON Strings should be wrapped in double quotes","json strings are coming in single quotes but it should be in double quotes.    *To reproduce*  # Run {{appc appcd exec /system-info/1.x/info --json --no-banner}}  # Valdiate the output here https://jsonformatter.curiousconcept.com     Studio json parser validation is failing due to this.  ",Bug,Critical,Resolved,"2017-11-16 18:06:14","2017-11-16 18:06:14",2
"Appcelerator Daemon","appcd: appcd start --debug should respect a --no-colors flag","h5.Description    Writing up a guide on how to provide information when reporting issues. Noticed that appcd start --debug --no-colors still logs in colour, would be nice if the debug logs provided by people didnt have the escape codes.    h5.Steps to repro    # appcd start --debug --no-colors    h5.Actual    Colours    h5.Expect    No colours",Bug,Medium,Resolved,"2017-11-16 15:01:41","2017-11-16 15:01:41",2
"Appcelerator Daemon","Spawning the ios plugin through appc cli errors with cannot find module plist","h5.Description      ioslib has a missing dependency which causes an error when distributed in the cli due to the legacy bundling style used.    h5.Steps to reproduce    # {{appc use 7.0.0-master.23}}  # {{appc appcd start && appc exec /ios/latest/info}}    h5.Actual    Error cannot find plist    h5.Expected    No error, environment info returned",Bug,Critical,Resolved,"2017-11-16 12:03:58","2017-11-16 12:03:58",1
"Appcelerator Daemon","Can we have Android and Genymotion system-info same as ti info","Can we maintain Android and Genymotion system-info same as ti info android and genymotion. Otherwise, it will break a lot of things in the studio and can't make all those changes for SDK 7.0/Studio 5.0 release.    If you think ti info has a lot of redundant and unorganized data - Probably, we can target those for next major release so that studio will have a time to correct and align with them.    *For example:*  # type attribute is missing for emulators - so can't differentiate what is genymotion emulator and what is android avd  # Path is missing for genymotion emulator  # Executables and VBox paths, etc.,  ",Bug,None,Resolved,"2017-11-16 11:54:57","2017-11-16 11:54:57",1
"Appcelerator Daemon","Android emulators missing target, api-level and sdk-version information","*Problem Description:*  Android emulators are missing target, api-level and sdk-version information - which is available in the ti info and also used in the studio     And also, it doesn't have SDK, NDK and targets information    *To reproduce:*  # appc use 7.0.0-master.19  # appc appcd exec /system-info/1.x/info/android   # Verify android emulator information    *Actual:*  No api-level,sdk-version and target in the emulator    *Expected:*  We should have all the information which is provided in the ti info    Please find the attached android info file  [^android_info.json]   ",Bug,Critical,Resolved,"2017-11-16 08:06:05","2017-11-16 08:06:05",1
"Appcelerator Daemon","appc status: Hide windows-Plugin for unix / macOS machines","When running {{appcd status}}, the following (red) line occurs:    It's not an issue because I am not running on Windows, but it would be UX friendly to either hide it on the mac or just say Not available like Studio does for the Windows SDK.",Improvement,Low,Resolved,"2017-11-16 06:33:14","2017-11-16 06:33:14",2
"Appcelerator Daemon","appcd-detect: Detect engine scans paths that were already recursively scanned","Found an issue where the detect engine is finding the same thing more than once.    For example, say you have the search path {{/opt}} and the {{ANDROID_NDK}} environment variable is pointing to {{/opt/android-ndk}}. The search paths will be {{/opt}} and {{/opt/android-ndk}}. It will recursively scan {{/opt}} and find the ndk in {{/opt/android-ndk}}. However it will continue to scan the {{/opt/android}} and find the same thing again.    The detect engine recursively walks the search paths in series, so it should be possible to track visited directories or found items.",Bug,Critical,Resolved,"2017-11-15 23:40:06","2017-11-15 23:40:06",21
"Appcelerator Daemon","Subscribe on /system-info/1.x/info doesn't work","*Problem Description:*    When we subscribe on {{/system-info/1.x/info}} changes - Appcd should publish the changes if any changes in iOS devices, Android devices, Xcode changes, etc.    *To Reproduce:*    # appc appcd exec /system-info/1.x/info/ --subscribe  # Now connect iOS device    *Actual:*  No changes    *Expected:*  Return system-info with the iOS device    Note: {{appc appcd exec /system-info/1.x/info/ios/devices --subscribe}} is working fine  ",Bug,Critical,Resolved,"2017-11-15 23:39:01","2017-11-15 23:39:01",1
"Appcelerator Daemon","iOS Plugin: Pointing xcode-select to a different xcode install causes the daemon to become unstable","h5.Description    I have two Xcodes on my machine one at /Applications and the other at /Users/<USER>Desktop/Xcode.app/Contents/Developer, pointing xcode-select at the version in Desktop causes the daemon to become unstable (spawning process multiple times, freezes etc)    h5.Steps to repro    Run {{sudo xcode-select -s <new path>}}, then {{appcd start && appcd exec /ios/latest/info}}",Bug,Critical,Resolved,"2017-11-15 11:52:48","2017-11-15 11:52:48",34
"Appcelerator Daemon","iOS simulators are missing in the system-info - intermittent issue","*Problem Description:*    Can't find the simulators in the /system-info/1.x/info. However, it's an intermittent issue.    *To reproduce:*  # Run sudo npm install appcelerator@4.2.11-2 -g  # Run appc use 7.0.0-master.11  # Run appcd appcd start  # Run appc appcd exec /system-info/1.x/info    *Versions:*  Appcelerator Daemon, version 1.0.0-2  CLI 7.0.0-master.11    Please find the attached system-info  [^system_info2.txt]  and  [^appcd_status_1.0.0-2.txt]   ",Bug,Critical,Resolved,"2017-11-15 03:50:47","2017-11-15 03:50:47",1
"Appcelerator Daemon","system-info doesn't show android info","I'm using appcd 1.0.0-2 and can't see the android info when I execute {{appc exec /system-info/1.x/info}}    Please find the attached appcd status and system_info files  ",Bug,Critical,Resolved,"2017-11-15 02:52:43","2017-11-15 02:52:43",2
"Appcelerator Daemon","Appc Daemon is crashing the terminal and studio ","*Problem Description:*    MacOS terminal is getting crashed If you start a daemon from a terminal and leave for some time. And, I can't even start a studio due to resource unavailability - it just crashes while launching it.                    Studio crash log:  https://gist.github.com/kolipakakondal/904a50e1031a500e74ee526ec54ea423  ",Bug,Critical,Resolved,"2017-11-15 02:36:24","2017-11-15 02:36:24",5
"Appcelerator Daemon","system-info doesn't return ios information","Start daemon, load http://localhost:1732/system-info/1.x/info. {{ios}} is {{null}}.  Plugin status:      appcd exec /ios/latest/info returns {{Cannot read property 'value' of null}}  appcd --debug:   ",Bug,Critical,Resolved,"2017-11-14 23:17:45","2017-11-14 23:17:45",2
"Appcelerator Daemon","appcd-gulp: Coverage tests blow up when --trace-deprecation is set","When trying to get a bit more info about unhandled rejections, Node.js has a flag that can be passed in called {{\-\-trace\-deprecation}}. The idea would be to add this to the {{gulp test/coverage}} task and then we'd see it in the CI logs.    However, when this flag is set, for some reason {{nyc}} blows up because it can't load {{mocha-jenkins-reporter}}. But the rub is {{nyc}} is not supposed to load it. The {{mocha-jenkins-reporter}} is an argument to {{mocha}}, not {{nyc}}.    When adding {{\-\-trace\-deprecation}} and running {{gulp coverage}}, we get the following error:        We can fix that by applying the following patch:        But then we run into a problem where {{mocha-jenkins-reporter}} is expecting a {{mocha}} runner object and {{nyc}} doesn't pass one in.        I believe that {{mocha-jenkins-reporter}} should remain an argument to {{mocha}} and not {{nyc}} and that we need to figure out why {{nyc}} is sniping the {{\-\-reporter}} arg to mocha. Maybe it's doing a blind scrap on {{process.argv}}?",Bug,Trivial,Resolved,"2017-11-14 17:25:21","2017-11-14 17:25:21",3
"Appcelerator Daemon","appcd-gulp: Local directories are baked into source maps","The build system uses babel to transpile and generate the source maps. One of the args is the {{sourceRoot}} which is set to an absolute path. This absolute path gets baked into the generated files which is undesirable.    Need to see if we can do relative paths. If that doesn't work, perhaps we need rewrite all of the generated source maps.",Bug,High,Resolved,"2017-11-14 15:17:52","2017-11-14 15:17:52",3
"Appcelerator Daemon","appcd-detect: First change rescan emits new event eventhough nothing changed","When the detect engine is watching a folder where something changes, it triggers a rescan. The first time the rescan is done, the results are merged into the observable model and even though nothing has changed, it will emits an event. It should only emit an event when A) something of interest happens and B) the result has actually changed.",Bug,High,Resolved,"2017-11-13 23:27:50","2017-11-13 23:27:50",8
"Appcelerator Daemon","Android Plugin: Sort NDKs and assign default","Currently the list of detected Android NDKs is not ordered and no default NDK is selected. This is only an issue if you have more than one NDK.",Improvement,Medium,Resolved,"2017-11-13 13:04:18","2017-11-13 13:04:18",3
"Appcelerator Daemon","Android Plugin: Sort SDKs and assign default","Currently the list of detected Android SDKs is not ordered and no default SDK is selected. This is only an issue if you have more than one SDK.",Improvement,Medium,Resolved,"2017-11-13 13:03:22","2017-11-13 13:03:22",3
"Appcelerator Daemon","appcd logcat: Add support for a filter","It would be useful to allow a filter to be passed into {{appcd logcat}} that would only display messages where the message namespace matched the specified filter.",Improvement,Medium,Resolved,"2017-11-13 12:35:26","2017-11-13 12:35:26",8
"Appcelerator Daemon","appcd logcat: Add support for --save <file>","It would useful if the {{appcd logcat}} command supported a {{--save <file>}} option to save the contents of the log buffer to a file.",Improvement,Medium,Resolved,"2017-11-13 12:34:20","2017-11-13 12:34:20",1
"Appcelerator Daemon","appcd dump: Dump config, status, and log to file or stdout","It would be helpful to introduce an {{appcd dump}} command that dumps the config, status, and log to a file. This would make bug reporting much, much easier.",Improvement,Medium,Resolved,"2017-11-13 12:32:22","2017-11-13 12:32:22",5
"Appcelerator Daemon","Android Plugin: Populate emulator target, api level, and sdk using default Android SDK","To get the Android emulator's target, api level, and sdk name, we need to pass in an SDK for it to pull those bits of info. The problem is there could be more than one SDK. The Android plugin needs to select the best SDK starting with the one in specified in the config, then pass it into {{getEmulators()}}.",Bug,Medium,Resolved,"2017-11-13 11:58:46","2017-11-13 11:58:46",13
"Appcelerator Daemon","appcd-fswatch: Recursive watching does not appear to work","In all of my recent testing, recursive filesystem watching does not appear to work regardless of whether a depth is set.",Bug,High,Resolved,"2017-11-13 11:55:24","2017-11-13 11:55:24",8
"Appcelerator Daemon","appcd-plugin: Show more plugin system details","We need to add more information to the plugin system's status object that is returned when we run {{appcd status --json}} such as the plugin scan paths.",Improvement,High,Resolved,"2017-11-10 16:55:46","2017-11-10 16:55:46",1
"Appcelerator Daemon","appcd-plugin-genymotion: Add support for custom deployed directory path","h5.Description    As it is possible to support changing the deployed genymotion directory we should look into making the lookup of the deployed directory consider this path. On Windows we can query the registry for it (under HCKU\Software\Genymobile\Genymotion), I'm not sure how to find it on OSX and linux. we should also add a config setting called genymotion.deployed just incase it is not possible to find on non-Windows",Improvement,Medium,Resolved,"2017-11-10 12:22:47","2017-11-10 12:22:47",5
"Appcelerator Daemon","WebSocketSession: Allow msgpack to be disabled","We should add the ability per connection to disable msgpack responses.",Improvement,High,Resolved,"2017-11-10 03:23:52","2017-11-10 03:23:52",1
"Appcelerator Daemon","gulp check no longer works properly since switching to workspaces","Since Yarn workspaces have been enabled, {{gulp check}} is no longer working properly. It checks to see what is installed in the package's {{node_modules}} instead of the top-level workspace {{node_modules}}. Since it doesn't find a particular dependency installed, it says every package is not installed.    While fixing this, we should also make it more parallel so that it can compute the security and package update checks at the same time.    We may also need/want to come up with a more robust way of checking integrity. {{yarn check --integrity}} doesn't work well with Lerna.",Bug,High,Resolved,"2017-11-09 05:40:22","2017-11-09 05:40:22",8
"Appcelerator Daemon","appcd-plugin-windows: Only wireup lookups when certain condition are met","h5.Description    As Chris pointed out, it doesn't make much sense to do the detection of devices, emulators etc. if we don't have any visualstudios. We should probably do a VS detection, and then wireup everything else if we find some.    We should also probably only do this if we're actually on Windows too",Improvement,Medium,Resolved,"2017-11-08 13:01:47","2017-11-08 13:01:47",2
"Appcelerator Daemon","appcd-plugin: Prerelease versions are not loaded by version ranges","h5.Description    *This is expected imo but filing for discussion*    If I version my plugin as {{0.1.0-0}} then executing {{appcd exec /myplugin/0.1.X/}} or {{appcd exec /myplugin/^0.1.0/}} will not find my plugin. Executing {appcd exec /myplugin/^0.1.0-0/}} will. This is because semver will never view a prerelease as valid in a non-prerelease version range.    /latest will work, and will load the prerelease version         This is important as it makes how we version things problematic. If we do prereleases then if consumers decide to call with 0.1.X or similar, then they will never get prereleases plugins, and we don't want them calling latest as that will just lead to problems",Bug,Critical,Resolved,"2017-11-07 13:37:10","2017-11-07 13:37:10",3
"Appcelerator Daemon","appcd-plugin-windows: Allow time interval for detections to be set by user","h5.Description    Currently the intervals in the Windows plugin are hard-coded, it would be nice to allow a user to specify these themselves if they need to. Something like {{appcd config set appcd-windows-plugin.intervals.devices 5000}} for example. Then the plugin would need to also query the config to see if this is set    More context here https://github.com/appcelerator/appc-daemon/pull/111#discussion_r149122916",Improvement,High,Resolved,"2017-11-06 19:14:02","2017-11-06 19:14:02",3
"Appcelerator Daemon","appcd-detect: Improve code coverage","Since the appcd-detect refactor, code coverage dropped mainly due to the improved error handling and advanced path watching.",Improvement,Medium,Resolved,"2017-11-03 11:59:01","2017-11-03 11:59:01",5
"Appcelerator Daemon","appcd-default-plugins: Create a pseudo package","We need a package that the appcd-core can look at to load all the default appcd plugins such as the android, ios, jdk, and windows plugins.",Improvement,Critical,Resolved,"2017-10-31 16:22:05","2017-10-31 16:22:05",2
"Appcelerator Daemon","Android Plugin: Expose Android environment and watch for changes","This ticket encompasses the exposing of androidlib to the daemon and wiring up the watching for changes.    The service endpoint is {{/android/latest/info}}. It returns Android SDKs, NDKs, emulators, and devices.","New Feature",Critical,Resolved,"2017-10-26 23:12:13","2017-10-26 23:12:13",21
"Appcelerator Daemon","iOS Plugin: Expose iOS enviroment and watch for changes","This ticket encompasses the exposing of ioslib to the daemon and wiring up the watching for changes.    The service endpoint is {{/ios/latest/info}}. It returns keychains, certs, provisioning profiles, xcodes, simulators, and devices.","New Feature",Critical,Resolved,"2017-10-26 23:09:47","2017-10-26 23:09:47",21
"Appcelerator Daemon","appcd-plugin: Calling <plugin-name>/latest does not return the expected info","h5.Description    When calling {{appcd exec /jdk/latest}} it returns {{404 [object Object]}} it should print the plugin info to the console. It looks like the call is going through the error handler of the request made in the exec command    ",Bug,Critical,Resolved,"2017-10-26 13:59:14","2017-10-26 13:59:14",2
"Appcelerator Daemon","appcd-dispatcher: Create a DataServiceDispatcher class","There are several services that have very similar functionality where there's a single observable data store that is exposed via a {{ServiceDispatcher}} that supports filtered results and subscriptions. It would super handy (and ingenious) to introduce a {{DataServiceDispatcher}} that takes care of all this boilerplate.",Improvement,High,Resolved,"2017-10-26 04:19:41","2017-10-26 04:19:41",5
"Appcelerator Daemon","config: Able to set a sub-key for keys that should not allow subkeys","h5.Description    Calling something like the below will set a key on the property even though the key is a boolean in the JSDoc, this occurs on master and my appcd config PR branch        ",Bug,High,Resolved,"2017-10-24 14:02:20","2017-10-24 14:02:20",5
"Appcelerator Daemon","appcd-detect: Filesystem watching for new/removed items not correct","There's a bug in the detect engine where newly detected items aren't being watched and deleted items aren't having the filesystem watcher cleaned up.",Bug,Critical,Resolved,"2017-10-23 16:36:16","2017-10-23 16:36:16",21
"Appcelerator Daemon","appcd start should not exit until the daemon has actually finished starting","When running {{appcd start}}, it will spawn the appcd-core, but then exits with a success code. It doesn't wait for the daemon to actually initialize and load the plugins.    We need the start functionality to listen for an IPC message signalling the daemon is ready to go.",Bug,Critical,Resolved,"2017-10-18 20:23:03","2017-10-18 20:23:03",5
"Appcelerator Daemon","appcd exec --subscribe is not printing data payloads","When running {{appcd exec /appcd/status --subscribe}}, it doesn't display any of the events despite there being a ton in the daemon log.",Bug,High,Resolved,"2017-10-17 15:49:19","2017-10-17 15:49:19",2
"Appcelerator Daemon","appcd-plugin: Active request counter not decrementing for reloaded external plugin","Somehow it's possible to make a request to an external plugin using {{appcd exec /<path>}}, then modify the plugin so that it is stopped, yet the active requests counter is not decremented. It's unlikely, but possible, that the request is actually still active after the plugin is stopped.",Bug,High,Resolved,"2017-10-17 06:16:30","2017-10-17 06:16:30",2
"Appcelerator Daemon","appcd-plugin-jdk: JDK 9 is not detected","h5.Description    JDK 9 has changed the registry key of Windows to {{HLKM\Software\JavaSoft\JDK}}. This needs to be added to [here|https://github.com/appcelerator/appc-daemon/blob/7d3c1dcb3766b7c8157fd68bcd07c1e51f658909/plugins/appcd-plugin-jdk/src/jdk-info-service.js#L158-L159]     Couple notes    - CurrentVersion returns 9, for JDK 8 it was 1.8  - jdklib currently fails to recognise JDK 9, it errors due to a missing JVM library, the jre folder no longer exists it seems. Will file a separate ticket for that  - There is no 32-bit JDK distributed https://stackoverflow.com/questions/46356345/can-java-9-run-on-a-32-bit-os but it can be built, we might not need to support detecting 32-bit if it is not distributed officially",Improvement,Critical,Resolved,"2017-10-12 17:23:11","2017-10-12 17:23:11",8
"Appcelerator Daemon","appcd-plugin: Plugin host spawns a new console window on Windows","h5.Description    On Windows when calling to a plugin (for example appcd exec /jdk/latest/info) a new node console window is spawned. This window then stays open until it's either killed by a user or the daemon is stopped. This could be problematic as it means that spawned plugins can pretty much die at the whim of a user.      I'm not sure whether it's fully possible to suppress the window however, recent PR into node might add that behaviour though https://github.com/nodejs/node/pull/15380",Bug,High,Resolved,"2017-10-12 16:10:34","2017-10-12 16:10:34",5
"Appcelerator Daemon","appcd-detect: watch tests do not exit","h5.Description    On Windows running the unit tests they appear to 'hang' in a certain place, namely the appcd-detect unit tests and the {{watch()}} describe and the {{should redetect after initial detection}}. skipping that test allows the suite to run through and the process exit fine",Bug,High,Resolved,"2017-10-10 18:50:20","2017-10-10 18:50:20",5
"Appcelerator Daemon","appcd-detect: Wire up Windows Registry library","The {{DetectEngine}} has the necessary plumbing to poll the Windows Registry for paths to watch, however the actual call to query the registry is commented out until a solution is dropped in.    We need to select a library that allows us to query the registry. In the past, we've used {{winreg}}, but it requires a bit of abstraction to make it nicer to work with. Need to investigate the offerings in NPM and perhaps find a solution that allows us to listen to registry changes.","New Feature",High,Resolved,"2017-08-22 22:25:05","2017-08-22 22:25:05",8
"Appcelerator Daemon","appcd-detect: Port over detect engine from node-appc v2","The amazing detect engine lives in node-appc v2 and needs to be ported over to an appcd-detect package. The major change involves using the {{/appcd/fswatch}} instead of the old (buggy/incomplete) fs watcher.","New Feature",Critical,Resolved,"2017-08-21 23:34:24","2017-08-21 23:34:24",13
"Appcelerator Daemon","appcd-plugin-jdk: Implement JDK service","The {{appcd-plugin-jdk}} needs to expose a service that detects the JDK, via {{jdklib}}. The {{jdklib}} specifics are to be implemented by DAEMON-10.","New Feature",High,Resolved,"2017-08-14 22:14:58","2017-08-14 22:14:58",13
"Appcelerator Daemon","appcd-telemetry: Switch over to appc-platform-sdk analtyics","The Appc Daemon uses its own analytics code in {{appcd-telemetry}}. {{appc-platform-sdk}} also has an analytics library. It makes sense that there should be a single analytics library, however {{appc-platform-sdk}}'s implementation is not used by any other product (e.g. not battle tested) and is missing a few key features that {{appcd-telemetry}} supports such as sending telemetry at set intervals instead of at the end of the process.    So, we need to determine if this ticket should even be worked on in the first place. If yes, then update {{appc-platform-sdk}} to be daemon friendly and update {{appcd-telemetry}} to use {{appc-platform-sdk}}.","New Feature",Low,Resolved,"2017-08-11 23:00:04","2017-08-11 23:00:04",1
"Appcelerator Daemon","Persist logs to disk","The daemon needs to persist the log to disk. We can do this pretty easily by introducing a listener to the logger and writing the data to a log file. Every time the daemon is started, a fresh log file is created in {{~/.appcelerator/appcd/log}}.    We still need to determine a few things:  * Should we rotate old logs? Keep last 5 logs? gzip older logs?  * How should we handle log files that could potentially be huge?    The log messages should be streamed as objects containing metadata such as timestamps, etc. This structure should be preserved when written to disk.","New Feature",Medium,Resolved,"2017-08-11 22:57:06","2017-08-11 22:57:06",5
"Appcelerator Daemon","appcd-logger: Implement default logger","The Appc Daemon uses {{snooplogg}} for logging, but {{snooplogg}} contains a pretty large 19MB file. To reduce the amount of disk space needed (around 270MB) and to consolidate default logger config settings, it makes sense to introduce an {{appcd-logger}} package.","New Feature",High,Resolved,"2017-08-08 19:33:05","2017-08-08 19:33:05",5
"Appcelerator Daemon","Implement hook support","It would be great to allow plugins to expose hooks that other plugins could tie into.    h4. What is a hook?    A hook is a routine that is encapsulated by an event emitter where each hook listener can interact with the hook's inputs and outputs.    h4. How does this work?    Plugins can wrap various logic in a named hook. The result is a function that when called is passed an object of params. When a hook is invoked, an event is dispatched to all listeners in series and waits until they finish before continuing.    h4. How does this compare to the Titanium CLI's hook support?    The Titanium CLI hooks allow for both event hooks and function hooks. The Appc Daemon will only allow event hooks.    The Titanium CLI hooked functions allow multiple arguments. The Appc Daemon only allow a single optional argument which would be an object.    The Titanium CLI allowed any data types for the arguments. The Appc Daemon only allows serializable data such as undefined, null, strings, numbers, booleans, arrays, and object literals. Object instances (those with contexts) and functions are not permitted.","New Feature",None,Resolved,"2017-07-24 21:01:47","2017-07-24 21:01:47",21
"Appcelerator Daemon","Migrate to Lerna.js","I've been resisting the urge to jump to Lerna.js fearing it won't handle some of the edge cases, but once the daemon is released, managing and coordinating all the package releases is going to become more complicated.    Need to understand Lerna's support for Yarn since we depend on {{yarn check}}. npm 5 does not yet support {{node_module}} integrity checks.    Need to figure how to use Lerna.js and configure package dependencies. We will also probably ditch {{gulp}} (which isn't a bad thing) in favor of NPM scripts and a {{scripts}} directory. Everything in {{appcd-gulp}} will be moved to the {{scripts}} directory.    The hope is this will give us a more manageable repo, faster builds, coordinated publishing, and removes the dependency on a globally installed {{gulp}}.",Improvement,High,Resolved,"2017-06-09 16:14:50","2017-06-09 16:14:50",8
"Appcelerator Daemon","appcd-core: Add heartbeat to WebsocketSession","Currently there is no mechanism to detect if the Websocket client is borked. This can be accomplished using a ping/pong heartbeat.    Clients opt-in by setting the {{x-heartbeat}} HTTP header. When set, the {{WebsocketSession}} will send a {{ping}} event every 30 seconds to the client. The client has 5 seconds to respond with a {{pong}}, otherwise the connection is closed by the server.","New Feature",Low,Resolved,"2017-05-23 21:32:02","2017-05-23 21:32:02",1
"Appcelerator Daemon","Generate yarn.lock in distribution tarball","When the distribution tarball is packaged, it consolidates all NPM dependencies into the top-level package.json and removes devDependencies from ALL appcd package.json files. All of the appcd-* packages are included in the tarball in the {{node_modules}} directory and declared as {{bundledDependencies}}.    This ticket is to generate a {{yarn.lock}} file for all non-appcd-* dependencies and their dependencies. There are many ways to do this, but the best for ease and performance is to simply merge the {{yarn.lock}} files from every appcd-* directory.","New Feature",Medium,Resolved,"2017-05-15 22:34:57","2017-05-15 22:34:57",1
"Appcelerator Daemon","appcd-nodejs: Update to use appcd-request for HTTP requests","When appcd-nodejs downloads Node.js, it needs to take into account proxies and other network settings. Instead of using {{request()}}, it instead should use the provided request service in {{appcd-request}}.","New Feature",High,Resolved,"2017-05-15 14:32:22","2017-05-15 14:32:22",3
"Appcelerator Daemon","appcd-request: Implement request service","The daemon needs a centralized network library that exposes a service for making HTTP requests and takes into account network settings such as proxy settings.","New Feature",Critical,Resolved,"2017-05-15 14:30:04","2017-05-15 14:30:04",8
"Appcelerator Daemon","appcd-request: Add http request library","The daemon core needs an http client service. This will tie directly into the dispatcher and use the appcd config for determining proxy settings.","New Feature",Critical,Resolved,"2017-05-11 06:34:34","2017-05-11 06:34:34",8
"Appcelerator Daemon","appcd-fswatcher: Add depth support for recursive watching","Recursive fs watching works good... perhaps a little too good. When it recursively watches a directory, it has to walk the directory and watch every single descendant. This takes a bunch of resources and slow to initialize. Sometimes the only thing you are interested in is just a couple directories deep. It would best if the FSWatcher could watch only to a certain depth.",Improvement,High,Resolved,"2017-05-10 16:36:39","2017-05-10 16:36:39",8
"Appcelerator Daemon","winreglib: Implement native addon to watch Windows Registry keys","On Windows, the daemon needs to watch the Windows Registry for Android SDK, JDK, and Visual Studio related keys so that the system info can monitor it.    In the daemon prototype, the detect engine would use https://www.npmjs.com/package/winreg (which calls {{reg.exe}}) and polls the Windows Registry every 15 seconds. This is inefficient and slow.    It would be better if we had a native C++ addon for Node that we could use.    It looks like it would need to call {{RegNotifyChangeKeyValue()}} (https://msdn.microsoft.com/en-us/library/windows/desktop/ms724892(v=vs.85).aspx).    The C++ code would expose a simple API where you can start and stop watching a specific key.    Then we need a high-level {{.js}} API that exports a nicer, efficient ES6 compliant API. I imagine the {{RegistryWatcher}} would extend an {{EventEmitter}}. This file would also make use of https://www.npmjs.com/package/node-pre-gyp-init to try and downloading the pre-built binary.    h4. API    The public API will expose 3 methods: {{get}}, {{list}}, and {{watch}}.    {{get()}} will retrieve the value for a given key.    {{list()}} will retrieve all subkeys and values for a given key.    {{watch()}} will start watching a registry key for changes. It will return a watch handle that emits change events and also contains the {{stop()}} method to unwatch.    ","New Feature",Medium,Resolved,"2017-05-09 16:02:50","2017-05-09 16:02:50",21
"Appcelerator Daemon","appcd-agent: Implement processing monitoring","We need to extract the CPU and memory monitoring from the appcd-core and move it into a new appcd-monitor package. The {{StatusMonitor}} along with the plugin host will be able to use appcd-monitor to retrieve process stats.    The goal is to feed these stats into appcd status and telemetry payloads.",Improvement,High,Resolved,"2017-05-09 05:31:06","2017-05-09 05:31:06",5
"Appcelerator Daemon","appcd-subprocess: Add IPC support","We need the ability to set up an IPC channel with a spawned process.    The way this will work starts by passing a {{ipc: true}} in the dispatcher request payload. This will cause the spawn to force the connection use file descriptor 3 as an IPC channel.    The caller receives the subprocess descriptor: {{ctx.proc}}. It extends an event emitter, so you can listen for {{message}} and send using {{ctx.proc.send()}}.","New Feature",Critical,Resolved,"2017-05-08 21:35:23","2017-05-08 21:35:23",5
"Appcelerator Daemon","appcd: Extend CI process to create platform-specific bundles","The current Jenkinsfile introduced by DAEMON-43 runs check and coverage tasks, then bundles the daemon distribution without NPM dependencies. DAEMON-56 introduces a {{gulp package-bundle}} that will run {{npm install}} and re-package the daemon distribution tgz file.    This ticket is to add the {{gulp package-bundle}} to the CI process where it is executed on the following 5 Jenkins slave machines:    * macOS  * 64-bit Windows  * 32-bit Windows  * 64-bit Linux  * 32-bit Linux    The resulting tgz file is to be uploaded as an artifact of the CI job.","New Feature",Low,Closed,"2017-05-04 21:49:47","2017-05-04 21:49:47",1
"Appcelerator Daemon","appcd-core: Filesystem watcher dispatcher handler","There are several components in the daemon that rely on watching the filesystem. Since this is expensive, it's best to consolidate this behind a dispatcher handler to make it easy for everything to set up watches.    The watching functionality will be in a separate node library.","New Feature",High,Resolved,"2017-04-12 21:51:25","2017-04-12 21:51:25",34
"Appcelerator Daemon","appcd-core: Support for user-defined config file","The daemon needs to support a user-defined config file. This file should live at {{~/.appcelerator/appcd/config.json}}.    This user-defined config file overrides the default config defined by the Appc Daemon.    This user-defined config file is written whenever a setting is changed via {{appcd config}} or a request to {{/appcd/config}}.","New Feature",Critical,Resolved,"2017-04-11 22:51:13","2017-04-11 22:51:13",5
"Appcelerator Daemon","appcd-core: Drop priviledges and set uid/gid if root","In Node, you can only change the user id if Node is launched as root. If the user launching the daemon is root, it would be essential that root privileges be dropped as soon as possible during the daemon initialization.    To check if the daemon is being run as root, check if {{process.getuid() === 0}}. If the uid is zero, then get the uid/gid from in the config and call {{process.setuid()}} and/or {{process.setgid()}}. If there is no uid/gid in the config or the uid/gid is invalid, then the daemon should fatal error and exit.    Note that this only applies to macOS and Linux.","New Feature",High,Resolved,"2017-04-10 20:42:32","2017-04-10 20:42:32",2
"Appcelerator Daemon","appcd: Implement subscription requests from appcd CLI","{{appcd exec}} currently only supports dispatching call requests. It does not support subscribe requests. {{appcd exec}} needs a {{\-\-subscribe}} flag.    When the {{\-\-subscribe}} flag is set, it will pass a type of subscribe with the request, then the {{appcd exec}} command will need to properly not exit until the connection is closed or the {{fin}} event is emitted.","New Feature",Medium,Resolved,"2017-03-29 20:25:05","2017-03-29 20:25:05",5
"Appcelerator Daemon","appcd-subprocess: Implement SubprocessManager","With the daemon's plugin system spawning several subprocesses, there needs to be a central way to manage them. The SubprocessManager would expose an API via appcd-dispatcher handlers including the ability to spawn subprocesses, kill subprocesses, and gather stats about them.","New Feature",Critical,Resolved,"2017-03-24 19:51:44","2017-03-24 19:51:44",34
"Appcelerator Daemon","appcd: Logcat crashes daemon","Running {{appcd logcat}} causes the daemon to have a bad day.",Bug,Critical,Resolved,"2017-03-23 06:21:36","2017-03-23 06:21:36",5
"Appcelerator Daemon","appcd-response: Improve i18n API","appcd-response handles single strings only. It will probably be handy to create {{\_\_()}} and {{\_\_n()}} functions to expose the i18n engine for single strings and pluralized strings.    Strings are stored in a {{messages/<locale>/strings.json}} file where the key is the English text and the value is the translated text. We should just follow https://github.com/mashpie/i18n-node and allow the value to be an array where the first element is the singular string and the second element is the plural string.",Improvement,Low,Resolved,"2017-03-22 18:47:00","2017-03-22 18:47:00",3
"Appcelerator Daemon","appcd-http: Need a unified response object","Right now HTTP responses require a status and body. However we will want to specify a response using a code that looks up the appropriate message and sets the actual response status and body.    We also want this response object to handle the content type.    This does not apply to requests for data. This only applies to requests like subscribing or registering something where we have a real message that can be internationalized.","New Feature",Critical,Resolved,"2017-03-18 01:11:18","2017-03-18 01:11:18",13
"Appcelerator Daemon","Move dependency-map.json into each package's package.json","The {{dependency-map.json}} is a file that maps micro-package dependencies together so they can be linked with yarn. The problem is this file is becoming exceedingly large. It's time to break it up and put each package's dependencies in their {{package.json}}. Note that this is not the same as NPM dependencies, so we may need a {{appcd-depenedencies}} property in the {{package.json}}.","New Feature",High,Resolved,"2017-03-18 01:02:16","2017-03-18 01:02:16",3
"Appcelerator Daemon","appcd-response: Create base error object with messages integration","There are several errors being thrown around inside the Appc Daemon and we need a unified error object that can pull i18n strings by code or by message.","New Feature",Critical,Resolved,"2017-03-18 00:58:06","2017-03-18 00:58:06",13
"Appcelerator Daemon","appcd-response: Create unified message and code library","With error codes all over the place, we need a central place to store them. We also have a need for i18n. So, appcd-response can fulfill both requirements.","New Feature",Critical,Resolved,"2017-03-18 00:55:06","2017-03-18 00:55:06",13
"Appcelerator Daemon","appcd-dispatcher: Add ServiceDispatcher unit tests","The {{ServiceDispatcher}} needs some unit test love.",Improvement,Medium,Resolved,"2017-03-10 23:27:33","2017-03-10 23:27:33",8
"Appcelerator Daemon","appcd-core: Bump Node version to 8.x (when it is released)","We want to bump the Node.js version of appcd-core's {{package.json}} to the latest v8.x LTS release once it ships in October 2017.    In addition, the following dependencies must also be updated to take advantage of the new features of Node 8:    * appcd-http: koa-bodyparser@4.0.0",Improvement,High,Resolved,"2017-02-27 20:37:02","2017-02-27 20:37:02",2
"Appcelerator Daemon","appcd: Add support to config handler to change settings at runtime","The config handler currently only returns the config. The handler should also support a data payload to change the daemon's config at runtime.    Note that only a single config setting can be changed per call. Use the path to determine what is being changed. HTTP methods can be used to determine how the key should be changed. The handler returns the new value. Use the status code to determine if successful.    The appcd CLI is responsible for persisting the settings to the user's config file {{~/.appcelerator/appcd/config.json}}. The daemon does not modify the config file. The appcd CLI will validate the config change, then persist it to disk. After that, it will check if the daemon is running and attempt to change it at runtime. If the daemon is not running or it is running and the setting is changeable during runtime, then everything succeeds. If the daemon is running and the change is rejected, then the CLI will alert the user that the daemon must be restarted for the setting to take effect. If the CLI as a TTY, it can prompt to restart the daemon. Note that the CLI should also support a {{\-\-no\-prompt}} flag and a {{\-\-auto\-restart}} flag.    h4. Examples:    h5. Getting a value:        h5. Setting a value:        h5. Deleting a value:        h5. Array examples:        Delete will remove the entire value.    ","New Feature",Medium,Resolved,"2017-02-27 17:05:22","2017-02-27 17:05:22",5
"Appcelerator Daemon","appcd: Add Retire.js to the 'gulp check' task","The {{gulp check}} currently only checks NSP for security issues. It is also desired to use Retire.js (https://retirejs.github.io/retire.js/). We need to add Retire.js to the {{gulp check}} task and update the JSON results.    It is preferred to use Retire.js programmatically instead of subprocessing it, though I'm not sure if that's feasible.    Also note that Retire.js and NSP overlap and it would be ideal to unify the results and eliminate duplicates.",Improvement,High,Resolved,"2017-02-23 19:43:54","2017-02-23 19:43:54",8
"Appcelerator Daemon","appcd-core: Implement WebSocket to Dispatcher bridge","The daemon needs a layer between the Dispatcher and WebSocket requests that understand the appcd WebSocket protocol. This bridge is responsible for request parsing and error handling.    This bridge must support a ReadableStream Dispatcher response. Each chunk of stream is a new response to the WebSocket client. The appcd WebSocket protocol may need to be extended to include a fin property, which is not to be confused with the WebSocket fin property.",Story,Critical,Resolved,"2017-02-22 18:58:44","2017-02-22 18:58:44",21
"Appcelerator Daemon","Root coverage task should not stop on failures","When running {{gulp coverage}} in the root, we should run each package's coverage tests and continue even if one or more fail, then at the very end do the {{process.exit(1)}}.",Improvement,High,Resolved,"2017-02-22 00:51:14","2017-02-22 00:51:14",2
"Appcelerator Daemon","Start/restart daemon when watching in dev mode","To speed up development, it would be nice if the gulp watch task would restart the daemon when it detects a file has changed and has rebuilt the packages.",Improvement,Medium,Resolved,"2017-02-22 00:37:23","2017-02-22 00:37:23",3
"Appcelerator Daemon","appcd-dispatcher: Add Koa middleware function","Instead of having the daemon patch web requests into the dispatcher, just have the dispatcher return a Koa middleware that allows appcd-dispatcher to just do the routing.",Improvement,Critical,Resolved,"2017-02-22 00:33:41","2017-02-22 00:33:41",5
"Appcelerator Daemon","appcd-response: Add i18n system","The Appc Daemon currently does not have any sort of i18n facilities unlike the Titanium CLI. This should be solvable using a logger middleware and a gulp task to generate the i18n files.","New Feature",Medium,Resolved,"2017-02-17 23:37:05","2017-02-17 23:37:05",5
"Appcelerator Daemon","appcd-plugin: Add unit tests","The appcd-plugin package needs unit tests for the PluginManager and the Plugin instance including the plugin host.",Improvement,Medium,Resolved,"2017-02-17 16:38:55","2017-02-17 16:38:55",34
"Appcelerator Daemon","Appcelerator Daemon v1","Appc Daemon is a background process that runs on developer's computers that hosts services (aka plugins) that provide various services such as entitlements, authentication, and system info.    This epic encompasses the V1 MVP core functionality and the system info and appc platform service plugins.    Wiki page: https://wiki.appcelerator.org/display/tools/Appc+Daemon",Epic,Critical,Resolved,"2016-02-03 23:32:09","2016-02-03 23:32:09",144
"Appcelerator Daemon","Remove dependency on 'optional-dev-dependency'","As a way to deal with dependency management, appcd uses optional-dev-dependency, specifically when the plan was to publish each micro-package as a separate NPM module. However, with the introduction of the {{gulp package}} task and the use of yarn links, there's no need for the optional-dev-dependency module anymore.",Improvement,Medium,Resolved,"2017-02-17 05:44:43","2017-02-17 05:44:43",2
"Appcelerator Daemon","appcd-*: Replace use of 'temp' module with 'tmp'","In an attempt to standardize on a temp directory/file library, ensure we are using the tmp (https://www.npmjs.com/package/tmp) module.",Improvement,Low,Resolved,"2017-02-17 05:35:25","2017-02-17 05:35:25",2
"Appcelerator Daemon","appcd-http: Add unit tests","The appcd-http package has some unit tests, but code coverage is lacking.","New Feature",Medium,Resolved,"2017-02-17 05:31:28","2017-02-17 05:31:28",8
"Appcelerator Daemon","appcd-http: Port implementation from prototype","Add the webserver and router from prototype to the appcd-http library.","New Feature",Critical,Resolved,"2017-02-17 05:26:18","2017-02-17 05:26:18",8
"Appcelerator Daemon","Create CI script","The Appc Daemon needs a Jenkinsfile script that:    * Installs Node 7.6.0 or newer  * Installs NPM  * Installs Yarn  * Clone appc-daemon repo  * Runs: {{yarn}}  * Runs: {{gulp check}}  * Runs: {{gulp coverage}}  * Runs: {{gulp package}}  * Generates report from check output, coverage output, and package output and also includes build information  * Stores the report in some cloud-based data store    See https://github.com/appcelerator/client-generator/blob/master/Jenkinsfile for an example. Also see https://github.com/appcelerator/jenkins_dsl/blob/master/jobs/appc_cli.groovy.    -To build the bundled distribution which includes all NPM dependencies, we will need to kick off a Jenkins job on multiple slave Jenkins machines to bundle platform specific bundles. Each Jenkins slave would run {{gulp package-bundle}} instead of {{gulp-package}}, then upload the resulting tarball to Axway's Artifactory server (and possibly also S3 as a backup). We need 5 Jenkins slaves: OS X (64-bit), 64-bit Windows, 32-bit Windows, 64-bit Linux, and 32-bit Linux.-    The platform specific bundling has been moved to DAEMON-77.    The report generation has been moved to DAEMON-78.","New Feature",Critical,Resolved,"2017-02-17 05:20:13","2017-02-17 05:20:13",5
"Appcelerator Daemon","appcd-http: Add default served root","appcd-http needs a default served root just in case one is not specified when a web server is started.","New Feature",Low,Resolved,"2017-02-17 05:09:22","2017-02-17 05:09:22",2
"Appcelerator Daemon","appcd-nodejs: Add unit tests","Need to create unit tests for appcd-nodejs.",Improvement,Medium,Resolved,"2017-02-17 05:07:43","2017-02-17 05:07:43",8
"Appcelerator Daemon","appcd-nodejs: Need to download signed node executable on macOS","Downloading the node executable in the tarball is not signed and shows a dialog if the firewall is enabled, which is going to be often. Instead, we need to download the pkg installer and manually extract the node executable.",Bug,Critical,Resolved,"2017-02-17 02:02:57","2017-02-17 02:02:57",5
"Appcelerator Daemon","appcd: Create 'package' task for top-level gulp file","The appcd daemon is made up of the bootstrap, core, a bunch of micro packages, and a bunch of plugins. While each of these can be published individually to NPM, it might be better to generate a pseudo appcd package that combines all of the appcd-* {{package.json}} files together.    This would save hundreds of MB of hard drive space.    Furthermore, we may want to take it a step further and declare the bootstrap, core, micro packages, and plugins as bundledDependencies and include them in the package. This would allow us to only publish appcd to npm instead of dozens of modules every release. This would also make locking down versions much easier.","New Feature",Critical,Resolved,"2017-02-14 04:04:30","2017-02-14 04:04:30",13
"Appcelerator Daemon","appcd-telemetry: Send analytics events","Break out the analytics code from the old appc daemon into appcd-telemetry.    To record an event, simply:    ","New Feature",Critical,Resolved,"2017-02-14 03:30:46","2017-02-14 03:30:46",21
"Appcelerator Daemon","appcd-plugin: Implement plugin manager","The daemon requires a plugin manager that loads, unloads, and reloads plugins as well as expose an interface for the plugins to communicate with the core.    * Detect plugins  * Watch paths and re-detect plugins  * Load plugins  * Unload external plugins  * Reload updated external plugins  * Plugin scoped logger  * Plugin scoped dispatcher  * Plugin dispatcher bridge","New Feature",Critical,Resolved,"2017-02-13 21:24:31","2017-02-13 21:24:31",55
"Appcelerator Daemon","node-appc: fs watch doesn't properly handle symlinks","The filesystem watch function doesn't properly handle symlinks. It doesn't check if a file/directory is a symlink.    The problem is when there's a symlinked directory to a parent directory or a directory that is being watched.    The fs watcher needs to detect a symlinked directory, then watch the real path, not the symlink. We still need to track the symlink directory, but it needs to make sure that changes to the real path are propagated to the watcher of the original path.",Bug,High,Resolved,"2016-12-05 20:03:04","2016-12-05 20:03:04",13
"Appcelerator Daemon","appcd-core: Replace pidusage with process.cpuUsage()","The daemon uses a NPM module called pidusage to monitor the CPU usage, but this is no longer necessary since Node 6 includes a built-in {{process.cpuUsage()}} function. https://nodejs.org/dist/latest-v6.x/docs/api/process.html#process_process_cpuusage_previousvalue    Aside from removing a dependency, it's going to be more efficient to use Node's built-in {{process.cpuUsage()}} because pidusage relies on file I/O and spawning {{ps}} and {{wmic}}.",Improvement,High,Resolved,"2016-10-31 17:23:53","2016-10-31 17:23:53",5
"Appcelerator Daemon","Windows: androidlib v2 - If you call androidlib.detect(), then an empty array is returned for the results","*Details:* If you make a androidlib.detect(), then an empty array is returned for the results.    *Notes:*  * This does not appear on Mac.  * ANDROID_SDK environment variable is set.  * Android SDK tools and platform-tools are set in the PATH.    *Steps to reproduce:*  # Make sure you are using Node 4.X.X  # Clone and run {{npm install}} on https://github.com/appcelerator/androidlib/tree/v2; make sure it's v2 branch  # Symlink to the above built androidlib v2  # Run this Node script:      *Actual:* An empty array appears for SDK.      *Expected:* There should not be an empty array for SDK.",Bug,None,Resolved,"2016-08-31 00:47:08","2016-08-31 00:47:08",1
"Appcelerator Daemon","Windows: jdklib v2 - If you move your JDK while running jdklib.watch(), then TypeError: Path must be a string error is returned","*Details:* On Windows, if you move your JDK while running jdklib.watch(), then {{TypeError: Path must be a string}} error is returned.    *Notes:* This is not reproducible with JDK on Mac.    *Steps to reproduce:*  # Make sure you are using Node 4.X.X on Windows  # Clone and run {{npm install}} on https://github.com/appcelerator/jdklib  # Symlink to the above built jdklib v2  # Run this Node script:    # Find your JDK and move it    *Actual:*  {{TypeError: Path must be a string}} error is returned:      *Expected:* No errors should be returned while watching the JDK.",Bug,High,Resolved,"2016-08-30 01:53:30","2016-08-30 01:53:30",1
"Appcelerator Daemon","Allow for multiple requests over the same WebSocket connection","Currently the Appc Daemon only allows a single request over a single WebSocket connection. This encourages clients to establish multiple simultaneous connections. This is technically unnecessary.    The Appc Daemon should not close the socket when a request ends, but rather send a request closed message and let the client determine if it should close the connection.    Be sure to update the wiki page under the Node.js Client section: https://wiki.appcelerator.org/display/Daemon/Appcd+Client.",Improvement,Critical,Resolved,"2016-10-25 22:48:41","2016-10-25 22:48:41",5
"Appcelerator Daemon","appcd status: Display the correct status if the daemon is not running","If the Appc Daemon is not running and you run {{appcd status}}, it outputs:        It should output a more readable error for both report and json output modes.",Bug,Low,Resolved,"2016-10-21 23:47:16","2016-10-21 23:47:16",5
"Appcelerator Daemon","appcd status: Add support for --json option","The {{appcd status}} command needs to support outputting the status in a human readable report format as well as JSON format.    Currently only the JSON output is supported.","New Feature",Critical,Resolved,"2016-10-21 23:38:00","2016-10-21 23:38:00",5
"Appcelerator Daemon","@appcd/plugin-amplify: Authentication service","The AMPLIFY platform appcd plugin will use the amplify-platform-sdk to perform authentication. This service will also automatically refresh access tokens.","New Feature",High,Resolved,"2016-02-04 03:36:23","2016-02-04 03:36:23",13
"Appcelerator Daemon","@appcd/plugin-titanium: ti project service","The project command allows you to interact with the {{tiapp.xml}} as well as add components or platform-specific files to a project.    h4. Project Info    Run ti project or ti project --json to print project info such as name, app id, etc    h4. Project Settings    Get a specific project setting:        Set a specific project setting:        Delete a project setting:        h4. Add a Component    Add an Apple Watch app or iOS Extension to an existing app. This will be tracked by DAEMON-321.        h4. Enable a Platform    When you create a new project, you choose which platforms you wish to support, however you may want to enable a platform later. The enable command will copy over any missing files, icons, launch screens, etc.      ","New Feature",Medium,"In Progress","2016-02-04 16:10:29","2016-02-04 16:10:29",8
"Appcelerator Daemon","@appcd/plugin-amplify: AMPLIFY platform daemon plugin","The AMPLIFY Platform appcd plugin (@appcd/plugin-amplify) is responsible for authentication. It contains services authenticating against Axway ID and retrieving, refreshing, and invalidating access tokens.    This plugin eventually will also contain the entitlements service.",Story,Critical,Resolved,"2016-02-04 00:45:27","2016-02-04 00:45:27",13
"Appcelerator Daemon","appcd-config: Runtime config updates","The appc daemon's configuration is currently read-only. It cannot be changed at runtime.    However, it may be desirable to update settings without restarting the daemon. Restarting the daemon means that state will be lost.    Not all config settings should be changeable at runtime. For example, the pidFile should remain read-only, but the proxy settings should be allowed to change.    This should be implemented by listening to SIGHUP as well as exposing a dispatcher and web route to reload the config. If any read-only property is changed, then the entire config reload is rejected.",Improvement,High,Resolved,"2016-05-05 08:41:05","2016-05-05 08:41:05",21
"Appcelerator Daemon","appcd: Fix source/user agent support","For analytics, the daemon records the client's user agent. This feature is currently implemented, but it's named userAgent which was determined to be misleading.    We need a better term to describe this feature and a way to describe a client type, description, and version, possibly as a string instead of an object.    NPM has a user agent string that looks like {{npm/2.15.1 node/v4.4.3 darwin x64}}.",Improvement,Critical,Resolved,"2016-05-05 08:29:39","2016-05-05 08:29:39",3
"Appcelerator Daemon","androidlib v2","androidlib (https://github.com/appcelerator/androidlib) was originally built for early Hyperloop prototypes, but lacked the robustness and features of the Android tooling in the Titanium SDK. The purpose of this ticket is to update androidlib with the logic from the Titanium SDK while maintaining API consistency with ioslib and windowslib and preserving the features at androidlib supports.    h2. Detect installed Android environment    {{detect()}} must return the following Android installation information:    * SDK information  ** Path to the SDK  ** Paths to each executable and {{.jar}} file listed above  ** {{build-tools}}, {{platform-tools}}, and {{tools}} paths and versions  ** Targets (SDKs, add-ons)  * NDK information  * Android home directory path  * Emulators  * Devices    When detecting the Android environment, there are a number of options that {{detect()}} must accept and use to override the defaults. These include:    * {{bypassCache}} (Boolean)- When {{true}}, re-detects Android environment (default: {{false}})  * {{sdkPath}} (String) - The path to an Android SDK  * {{ndkPath}} (String) - The path to an Android NDK  * {{androidHomePath}} (String)  * {{executables}} (Object) - Key/value lookup of executable name (i.e. {{android}}, {{adb}}, {{dx}}, etc) to its path    h4. Android SDK    While there could be many Android installations, we only care about a single installation. To find it, search the the following locations:    # The {{sdkPath}} specified in the {{detect()}} {{opts}} argument  # {{ANDROID_SDK_ROOT}} environment variable  # {{ANDROID_SDK}} environment variable  # The parent folder containing the {{android}} or {{android.bat}} executable  # The parent folder containing the {{adb}} or {{adb.exe}} executable  # Various common paths  * Windows: {{%SystemDrive%}}, {{%ProgramFiles%}}, {{%ProgramFiles(x86)%}}, {{%CommonProgramFiles%}}, {{~}}  * OS X/Linux: {{/opt}}, {{/opt/local}}, {{/usr}}, {{/usr/local}}, {{~}}    In order for a path to be deemed a valid Android installation, it must have the following:    * {{build-tools/<version>/aapt}} / {{build-tools/<version>/aapt.exe}}  * {{build-tools/<version>/aidl}} / {{build-tools/<version>/aidl.exe}}  * {{build-tools/<version>/dx}} / {{build-tools/<version>/dx.bat}}  * {{platform-tools/adb}} / {{platform-tools/adb.exe}}  * {{platform-tools/lib/dx.jar}}  * {{tools/android}} / {{tools/android.bat}}  * {{tools/emulator}} / {{tools/emulator.exe}}  * {{tools/mksdcard}} / {{tools/mksdcard.exe}}  * {{tools/proguard/lib/proguard.jar}}  * {{tools/source.properties}}  * {{tools/zipalign}} / {{tools/zipalign}}    h5. Detect installed Android targets (SDKs and Addons)    Required information:  * {{id}} (String) Example: {{android-23}}  * {{name}} (String) Example: {{Android 6.0}}  * {{description}} (String) Example: {{Android + Google APIs}}  * {{type}} (String}} Either {{platform}} or {{add-on}}  * {{api-level}} (String}} Examples: {{23}}, {{N}}  * {{sdk}} (Number) Examples: {{23}}, {{24}}  * {{abis}} (Array<String>)  * {{skins}} (Array<String>)  * {{revision}} (Number)  * {{path}} (String)  * {{androidJar}} (String) Path to {{android.jar}}. Needed for {{aapt package}}.  * {{aidl}} (String) Path to {{framework.aidl}} file.  * {{based-on}} (Object) Used for add-ons and used to derive {{aidl}} since only {{platform}} has an {{aidl}} file  * {{libraries}} (Object) Map of add-on libraries. Used for for detecting if SDK supports maps, but this is probably not needed, just nice to have.    h4. Android NDK    TODO    h4. Android Home Directory    Derived based on {{androidHomePath}} option, {{ANDROID_SDK_HOME}} environment variable, or {{~/.android}}.    h4. Emulators    An array of emulators containing the following information:    NOTE: Incomplete    * {{type}} (String) Either {{avd}} or {{genymotion}}  * {{name}} (String) For Android emulators, this value is returned from {{avd name}} when telnetting into the emulator. For Genymotion, we get this from VM name in VirtualBox using {{vboxmanage}}.  * {{id}} (String) Same value as {{name}}. Devices do not have a {{name}}, but we need a common identifier for the target, hence {{id}}.  * {{abi}} (String)  * {{api-level}} Not possible to get with older versions of Genymotion, so just set to {{null}} for Genymotion.    Android emulator specific:  * {{device}} (String)  * {{path}} (String)  * {{skin}} (String)    Genymotion specific:  * {{guid}} (String)    h4. Devices    An array of devices.    h2. androidlib should NOT...    * Determine if any SDK is supported or not  * Determine if any sort of issues","New Feature",Critical,Resolved,"2016-02-04 03:10:12","2016-02-04 03:10:12",34
"Appcelerator Daemon","appcd: Support for --config and --config-file options","It would be useful if the appcd cli supported a {{\-\-config}} and {{\-\-config\-file}} options for the start and restart commands.","New Feature",Medium,Resolved,"2016-02-04 08:31:14","2016-02-04 08:31:14",8
"Appcelerator Daemon","jdklib v2","jdklib is responsible for detecting the installed Java development environment.    jdklib needs to expose the new detect friendly interface, namely separating the search paths from the actual detection code.","New Feature",Medium,Resolved,"2016-02-04 07:42:44","2016-02-04 07:42:44",5
"Appcelerator Daemon","windowslib v2","windowslib needs to be updated to ES6 syntax and expose the new detect friendly interface, namely separating the search paths from the actual detection code.","New Feature",Medium,Resolved,"2016-02-04 07:44:08","2016-02-04 07:44:08",34
"Appcelerator Daemon","appcd: System info appc daemon plugin","We need an appcd plugin that queries and monitors system information and exposes the results to appcd clients and other services.    This plugin uses the following libraries:  * androidlib (OS X, Linux, Windows)  * ioslib (OS X)  * jdklib (OS X, Linux, Windows)  * windowslib (Windows)    This plugin controls the detect engine that will call upon each library's detection code to identify each library's various components. The results are then cached.    The system info plugin will support JSON response filtering.","New Feature",Critical,Resolved,"2016-02-04 03:29:26","2016-02-04 03:29:26",21
"Appcelerator Daemon","ioslib 2.0 - Environment detection","The appc daemon requires changes to ioslib that allow ioslib to detect environment changes at runtime. Also improve caching and switch to the new data model.",Improvement,Critical,Resolved,"2016-02-04 07:41:54","2016-02-04 07:41:54",21
"Appcelerator Daemon","appcd: Filesystem watcher","androidlib, ioslib, jdklib, and windowslib need a filesystem monitoring library that can be notified when a specific path changes.    Node has a built-in {{fs.watch()}} function which works fine on Linux and Windows, but doesn't work well on OS X where it doesn't report the correct file path. This can be fixed by using the {{fsevents}} module.    The {{chokidar}} module comes close to solving this need, but I discovered two blocking bugs: one with watching paths that do not exist and one with nested paths. It also currently has 39 open issues, some of which are a little scary sounding. Additionally, {{chokidar}} uses {{readdirp}} which apparently has performance issues due to all of the file stating.","New Feature",High,Resolved,"2016-05-07 07:27:59","2016-05-07 07:27:59",13
"Appcelerator Daemon","appcd: JSON response filtering","All the ability to filter JSON responses based on criteria from a dispatcher path.    For example, requests to `/appcd/status/system` would return only the system information:    ","New Feature",High,Resolved,"2016-02-03 23:42:56","2016-02-03 23:42:56",13
"Appcelerator Daemon","appcd: Add analytics facilities","The appc daemon needs to provide a mechanism for services and the daemon itself to generate analytics events. These events are then sent to the Appcelerator cloud so that the products can be improved. Analytics payloads must be anonymous.    Analytics payload will include:  * Machine ID  * Session ID  * Timestamp  * Operating system  * CPU architecture (32/64-bit)  * Number of CPUs  * Total system memory  * Installed appcd plugin info  * appcd configuration  * Event name  * Event type (action, error, etc)  * Event metadata    All events must be persisted to separate files disk prior to sending to the cloud. Only one process can send an event at any given time.    The endpoint will be https://api.appcelerator.net/p/v2/partner-track. As a reference, here's Appc CLI's analytics library: https://github.com/appcelerator/appc-platform-sdk/blob/master/lib/analytics.js.    Appc Daemon's guid:  * Production: ea327577-858f-4d31-905e-fa670f50ef48  * Preprod: 14c84daf-b01e-486c-96d3-b8f66da44481","New Feature",High,Resolved,"2016-02-04 00:04:55","2016-02-04 00:04:55",13
"Appcelerator Daemon","node-ios-device: Re-run node-pre-gyp if binding doesn't exist","node-ios-device v0.9.0 uses node-pre-gyp. When it is npm installed, node-pre-gyp downloads the pre-compiled binary. However, if the system Node.js version is changed, then node-pre-gyp needs to be re-run. In order for this to work, node-pre-gyp must be executed synchronously.",Improvement,High,Closed,"2016-05-05 08:59:36","2016-05-05 08:59:36",8
"Appcelerator Daemon","appcd: Add support for distributable Node executable","The appc daemon needs the ability to lock down the Node.js version so that native modules can be pre-compiled. It currently has a placeholder for running a specific Node executable.    The Node executable will be downloaded from the registry server. Both 32 and 64-bit Node executables will be available. The required Node.js version will be the latest LTS version, currently 4.4.3. This will most likely change to 6.2.0 LTS October 2016.","New Feature",Critical,Resolved,"2016-02-04 00:38:42","2016-02-04 00:38:42",13
"Appcelerator Daemon","appcd: Integrate hook system into appc daemon","The appc daemon needs to provide a evented hook system for plugins to use services to use and expose functionality to other services.    The hook system is based on the concepts of the hook system in the Titanium CLI. The main differences are the new hooks system will be based on ES6 promises.    The event names should follow the convention of module:foo.bar.","New Feature",Critical,Resolved,"2016-02-03 23:55:46","2016-02-03 23:55:46",13
