Name,Title,Description,Type,Priority,Status,Creation_Date,Estimation_Date,Story_Point
"Atlassian Clover","Instrument Groovy traits and show code coverage for them","*Current status*    Groovy 2.3 introduced traits - a code construct for composition of behaviours:   * http://docs.groovy-lang.org/latest/html/documentation/core-traits.html    Currently Clover handles them like an interface - it records the class name in a database but it does not instrument the class, so it shows no code coverage in reports for them.     Side note: Clover's reports by default do not show classes containing no executable code (empty classes, plain enums, interfaces with no default methods, traits) - you can show them by setting [showEmpty=true|https://confluence.atlassian.com/display/CLOVER/clover-report] parameter.    *Proposed improvement*    Instrument Groovy traits like normal classes or enums.     Side note: Groovy 2.5 will probably not introduce interfaces with default methods (like in Java 8).    * http://docs.groovy-lang.org/next/html/documentation/#_interface    *Technical obstacles*    * method '$CLV_R$' is private but should be public in a trait  * method 'com_atlassian_clover.CoverageRecorder $CLV_R$()' must not be static; only fields may be static in a trait  * field '$CLV_R$' is not 'public static final' in a trait  ",Suggestion,,Closed,"2016-06-29 11:27:19","2016-06-29 11:27:19",8
"Atlassian Clover","Fix Ant 1.9.7 double quotes","Ant prior to version 1.9.7 incorrectly handled arguments containing white space characters (they were being passed as separate arguments). For this reason, we put various paths (e.g. path to a license file) in double quotes.   This has been fixed in Ant 1.9.7. However, as a consequence it does not strip double-quotes now, so paths are interpreted literally - with quotes.  We need a fix on Clover side, but at the same time to keep compatibility with older Ant versions.   Consider adding proper flag for Clover-for-Ant tasks (e.g. withQuotes=true).  See also:  * BAM-10740  * BAM-17201",Bug,Low,Closed,"2016-06-21 14:17:27","2016-06-21 14:17:27",2
"Atlassian Clover","Clover does not instrument all nodes in Groovy AST","Problem was reproduced in Groovy 2.4.3 and 2.4.4:    https://answers.atlassian.com/questions/39141626/why-is-clover-showing-green-on-gray    https://answers.atlassian.com/questions/39141622/incomplete-clover-coverage-in-grails-2.5-integration-testing",Bug,Highest,Closed,"2016-06-21 05:33:36","2016-06-21 05:33:36",5
"Atlassian Clover","Support Eclipse 4.6 Neon","Make Clover-for-Eclipse compatible with Eclipse Neon. Problems found so far:    1. Running optimised tests throws an exception (/)    Â    2. Deprecated API (/)    SubProgressMonitor in org.eclipse.core.runtime has been deprecated   ViewerSorter in org.eclipse.jface.viewers has been deprecated   setSorter(ViewerSorter) in StructuredViewer has been deprecated   Main(PrintWriter,PrintWriter,boolean) in Main has been deprecated    3. Code incompatibility (/)    CoverageAnnotationModel is not abstract and does not override abstract method getAnnotationIterator() in IAnnotationModel",Suggestion,,Closed,"2016-06-15 11:14:15","2016-06-15 11:14:15",3
"Atlassian Clover","Make Clover instrumentation work in multi java project builds",,Suggestion,,Closed,"2016-02-18 11:45:44","2016-02-18 11:45:44",3
"Atlassian Clover","Provide simple reporting task which generate Clover report","Let's stick to html report only for now.    Don't bother about multi project build for now ",Suggestion,,Closed,"2016-02-18 11:38:25","2016-02-18 11:38:25",2
"Atlassian Clover","Provide high level task which will execute tests in simple module java project",,Suggestion,,Closed,"2016-02-18 10:58:24","2016-02-18 10:58:24",4
"Atlassian Clover","Provide high level instrumentation task which will instrument sources to given directory","Consider only single module java projects for now",Suggestion,,Closed,"2016-02-18 10:53:05","2016-02-18 10:53:05",4
"Atlassian Clover","CloverCompilerAdapter should look for Javac.compileList also in super classes","It may happen that user will wrap or subclass the Apache's Javac field. In such case, Clover won't be able to find and set this field and break the build. The CloverCompilerAdapter should look it up in a class hierarchy.     We can use Apache's FieldUtils for this purpose.",Bug,Low,Closed,"2016-02-12 06:07:02","2016-02-12 06:07:02",1
"Atlassian Clover","Create simple Gradle repository and run Bamboo plan to test it","Scope: * Create simple Gradle plugin as a holder for Clover for Gradle * Create Bamboo plan, which will: ** fetch source code ** run tests",Suggestion,,Closed,"2015-12-08 14:29:13","2015-12-08 14:29:13",1
"Atlassian Clover","Update Bamboo Clover Plugin (automatic integration shall use new clover-maven-plugin)","Place holder for BAM-16590",Suggestion,,Closed,"2015-12-08 12:35:05","2015-12-08 12:35:05",0.5
"Atlassian Clover","IntelliJ IDEA plugin with version 4.1.1 shows wrong supported version","Site for Clover on IntelliJ plugin page indicates Clover 4.1.1 supports Idea 9x however it's not true.   Update plugin.xml to show correct version.     https://plugins.jetbrains.com/plugin/?id=132 ",Bug,Low,Closed,"2015-12-07 10:35:24","2015-12-07 10:35:24",0.5
"Atlassian Clover","Drop support for IntelliJ IDEA 11.x","Scope:  * drop support for IntelliJ IDEA 11.x   * refactor deprecated code  * remove IntelliJ 11.x from test matrix  * update plugin.xml to tell correct minimal version of IntelliJ IDEA which is supported. ",Suggestion,,Closed,"2015-12-07 10:33:15","2015-12-07 10:33:15",1
"Atlassian Clover","Clover IDEA Plugin 4.1.0 has wrong version in plugin.xml","Clover for Idea 4.1.0 shows wrong 4.0.1 version instead of 4.1.0",Bug,Highest,Closed,"2015-12-07 09:38:49","2015-12-07 09:38:49",0
"Atlassian Clover","Gradle Spec","Simple spec showing what do we want to achieve and what's the MVP for 4.2.0 ",Suggestion,,Closed,"2015-12-04 11:35:16","2015-12-04 11:35:16",1
"Atlassian Clover","Add IntelliJ 15.0.2 to test matrix","Add IntelliJ 15.0.2 to test matrix after it being released. Currently there was RC released. ",Suggestion,,Closed,"2015-12-03 13:19:11","2015-12-03 13:19:11",0.5
"Atlassian Clover","IntelliJ Plugin should not use UI thread to generate Cloud report","Currently Clover generates Cloud report in UI thread, it can take couple of seconds with bigger projects causing whole UI to freeze.     Let's try to move it back to background somehow. ",Suggestion,,Closed,"2015-12-03 08:37:02","2015-12-03 08:37:02",2
"Atlassian Clover","IntelliJ Plugin should ask for rebuilding project after changing exclusions","Currently it doesn't always ask which sometime may lead to {{ClassNotFoudException}}    h2. Preconditions  IntelliJ IDEA with Clover installed     h2. Repro steps  # Clean project and coverage db  # Exclude some class with context menu  # Run tests  # Wait for exception    h2. Expected result  # Clean project and coverage db  # Exclude some class with context menu  # Clover asks user for rebuilding the project. ",Suggestion,,Closed,"2015-12-01 11:26:15","2015-12-01 11:26:15",1
"Atlassian Clover","Prepare feature analysis of JCov tool","Analyse https://wiki.openjdk.java.net/display/CodeTools/jcov    and publish on https://confluence.atlassian.com/display/CLOVER/Comparison+of+code+coverage+tools    ",Suggestion,,Closed,"2015-11-26 09:40:24","2015-11-26 09:40:24",2
"Atlassian Clover","Unicode 0x200B (zero-width whitespace) causes instrumentation failure","JDK 6 implements Unicode 4.0. In this version of Unicode, the zero-width whitespace character (0x200B) is being treated as a whitespace.    JDK 7 implements Unicode 6.0. In this version of Unicode, the zero-width whitespace has been reclassified to the 'format character' group (other characters in this group are, for example, left-/right- text direction markers).    Thus, Java compiler in JDK 6 allows to use 0x200B as a normal whitespace character, e.g. separating symbols.     The Java compiler since JDK 7 silently ignores the 0x200B, which means that it cannot be used to separate symbols anymore. However you can put this character virtually in any place, e.g.:    {code:java}  void this<200B>Is<200B>MyMethod();  {code}    Clover fails on parsing the 200B character:        *Planned fix:*     * Ignore 200B characters in Java 7+. Treat 200B character as space in Java 6.   * Question: Shall it be based on source level setting or the JDK detected?   * Question: which other control characters needs to be ignored by Clover?   * Question: which other whitespace characters (other than space, \t, \n, \r) shall be recognized by Clover parser?    *Workaround:*    Remove all 200B character occurrences from the source code.   ",Bug,Low,Closed,"2015-11-05 08:17:46","2015-11-05 08:17:46",2
"Atlassian Clover","Instrumentation failure of an annotation inside the catch clause","Clover is failing to instrument below section of java 7 code  This is a perfectly valid java 7 syntax but clover instrumentation fails at @SuppressWarnings(unused) annotation. ",Bug,Medium,Closed,"2015-11-03 23:04:35","2015-11-03 23:04:35",1
"Atlassian Clover","Update Clover Tutorial"," * use source=1.6 instead of 1.4   * download required JARs (build*.xml)   * do not require env.GROOVY_HOME set to 1.7   * rename 'test' to 'test.run'   * remove cloverjunitlib.xml   * convert unit tests to JUnit4   * simplify goals   * use clover-maven-plugin  ",Suggestion,,Closed,"2015-10-28 15:32:21","2015-10-28 15:32:21",1
"Atlassian Clover","Add more debug logging for clover2:aggregate","Currently, it's not known why a project has no child databases and what user can do with it. ",Suggestion,,Closed,"2015-10-26 10:40:38","2015-10-26 10:40:38",0.5
"Atlassian Clover","Add IDEA 14.0.4 to a test matrix","There are differences in app behaviour between IDEA 14.0.x and 14.1.x.     As we're testing Clover against 12.1.7 and 13.0.0, it'd be good to add also 12.0.4, 13.1.6, 14.0.4 to our test matrix.     This way we will cover IDEA 12.0, 12.1, 13.0, 13.1, 14.0 and 14.1.  ",Suggestion,,Closed,"2015-10-23 13:37:35","2015-10-23 13:37:35",1
"Atlassian Clover","Test optimization in Eclipse Mars 4.5.1 keeps running one test","Steps to reproduce:   * rebuild a project, clean database and optimization snapshot   * two times on 'run optimized' button, for the first time it runs all test, for the second time it runs one test (and should none)",Bug,Low,Closed,"2015-10-23 13:32:32","2015-10-23 13:32:32",0.5
"Atlassian Clover","Fix colors of test passed / failed / error icons in Eclipse","Currently we use dark blue color for a failed test. It's not contrast enough compared to the green one.     Furthermore, we use a red background for a FAIL status label, which is not consistent. Also, a green background used for a PASS label is different from the green dot in the icon.     Current colors used: green-pass, blue-fail, red-error are the same as in Eclipse's JUnit view.    Consider also changing a dot to three different figures to make it accessible for color-blinded people. For instance:   * light green circle - pass   * dark blue triangle - fail   * red square - error  ",Suggestion,,Closed,"2015-10-22 14:09:42","2015-10-22 14:09:42",0.5
"Atlassian Clover","StringIndexOutOfBoundsException in CloverStartup.evaluateDaysLeft","Clover fails to decode the license key. Stacktrace:        ",Bug,Low,Closed,"2015-10-15 08:23:51","2015-10-15 08:23:51",1
"Atlassian Clover","Add support for Eclipse Mars.1","Eclipse Mars.1 was released on 01.10. Make sure Clover is compatible by:    * smoke testing  * adding new version to Eclipse versions matrix. ",Suggestion,,Closed,"2015-10-07 07:36:43","2015-10-07 07:36:43",0.5
"Atlassian Clover","Walk AST and store method info in a database","Walk AST and register methods and functions (including inline / anonymous ones?) in a database. Print them in reports.     To be considered: naming convention.",Suggestion,,Closed,"2015-09-28 14:58:44","2015-09-28 14:58:44",8
"Atlassian Clover","Walk AST and store file and type info in database","Walk the AST tree and handle FileInfo and ClassInfo (TypeInfo) elements - register them in Clover database. Print them in reports.  We shall handle Scala's class / object / trait types.  (including anonymous?) ",Suggestion,,Closed,"2015-09-28 14:53:38","2015-09-28 14:53:38",8
"Atlassian Clover","Support for IDEA 14.1.5","It should work but let's be sure.   http://blog.jetbrains.com/idea/2015/09/intellij-idea-14-1-5-update-is-out/",Suggestion,,Closed,"2015-09-25 13:04:53","2015-09-25 13:04:53",0.5
"Atlassian Clover","Remove --style from Command line processors","{{--style}} argument has been deprecated in 4.1.0 it should be removed in next major version 4.2.0.  Scope: * remove HtmlReporter#Style * update docs i necessary * cleanup all TODO CLOV-1795",Suggestion,,Closed,"2015-09-23 14:19:46","2015-09-23 14:19:46",0.5
"Atlassian Clover","Drop Eclipse 3.6 and 3.7","* compile against eclipse 4.2  * fix deprecation warnings etc  * remove legacy code (if any)  * bump version numbers in feature name",Suggestion,,Closed,"2015-09-21 12:42:49","2015-09-21 12:42:49",1
"Atlassian Clover","Drop Grails 1.3"," * remove legacy code (if any)",Suggestion,,Closed,"2015-09-21 12:42:05","2015-09-21 12:42:05",2
"Atlassian Clover","Drop classic HTML report","remove classic reports in Clover   * report type='classic' print error? or warning and ignore...   * remove old velocity templates   * drop libraries   ** Overlibvms  not until we drop Classic reports (Clover 4.1)   ** Utils.js (rewrite query parsing into clover.js)   ** sorttable.js",Suggestion,,Closed,"2015-09-21 12:39:52","2015-09-21 12:39:52",2
"Atlassian Clover","Rename StatementInfo to ExpressionInfo","Rename StatementInfo to ExpressionInfo in the API. Java is the odd one out here. Scala, Clojure etc all have expressions as there basic unit of execution. A statement is an expression with no result.   ",Suggestion,,Closed,"2015-09-19 20:43:37","2015-09-19 20:43:37",1
"Atlassian Clover","Add possibility to add custom properties for code elements","Introduce a base interface to ClassInfo, MethodInfo, PackageInfo, FileInfo, StatementInfo, BranchInfo which allows API clients to add arbitrary properties to the model. They values should be raw types, possible Serializable objects too. This should allow instrumentation providers better answer questions Clover may have about the model they've produced.    Something like:    interface CustomInfo   - getProperties(): Map<String, Object>   - setProperty(String, Object)   - getProperty(String)    interface FileInfo extends ..., CustomInfo  interface TypeInfo extends ..., CustomInfo  interface MethodInfo extends ..., CustomInfo  interface BranchInfo extends ..., CustomInfo  interface StatementInfo extends ..., CustomInfo  ",Suggestion,,Closed,"2015-09-19 20:41:14","2015-09-19 20:41:14",2
"Atlassian Clover","Make session.enterClass() more language-independent","Clean up InstrumentationSession.enterClass(..., boolean isInterface, boolean isEnum, boolean isAnnotation) so that it instead takes a LanguageConstruct to indicated what it is which is then embedded in ClassInfo. This divorces this part of the API from Java allowing us to model languages like Scala who have things like traits, singleton objects, etc.    This may require a separate LanguageConstruct-like type (TypeConstruct ?) as it will likely need to be smarter than LanguageConstruct and be able to answer some basic questions Clover may need to ask e.g.        The example above is a bit fake because surely we could determine if a TypeInfo is abstract by traversing it but there may be situations where we need to ask similar questions.  ",Suggestion,,Closed,"2015-09-19 20:36:51","2015-09-19 20:36:51",3
"Atlassian Clover","Rename ClassInfo to TypeInfo","ClassInfo is just OK for Java and Groovy (we have classes). But we also have enums, interfaces and annotations! And in other languages we also have closures (Groovy), traits (Groovy, Scala) etc. Thus the name ClassInfo does not suit well for other languages.       Rename ClassInfo to something better. TypeInfo might be better.",Suggestion,,Closed,"2015-09-19 18:55:02","2015-09-19 18:55:02",1
"Atlassian Clover","Extend database format to handle statements and methods in a file","Allow better modelling of file-level statements and methods so that we can better support languages like Ruby which support top-level scripting constructs.     Example:       Some preparation have been already done for Java 8 (Clover 3.2).    Things to be checked:   * how our code calculates the start/end line/col range for a statement/method outside a class   * how it calculates code metrics for a file having top-level statements/methods   * how it handles exclusion filters (statement/method regexp)   * how it handles nested entities (method-in-method etc)    Things to be implemented:   * take into account these top-level statements/methods in reporting   ** show in XML / HTML / PDF / JSON   ** render lines   ** show in tables etc    Out of scope:   * test optimization    Note:  Looking at how Clojure is written, for any Clojure file there would only ever be one FileInfo containing lots of StatementInfos and MethodInfos but no ClassInfos.",Suggestion,,Closed,"2015-09-19 18:47:19","2015-09-19 18:47:19",3
"Atlassian Clover","Extend interfaces to manipulate test optimization","Interface to manipulate test optimization:  * to reorganize optimized test sets  * to manipulate content the test optimization snapshot file",Suggestion,,Closed,"2015-09-18 15:05:28","2015-09-18 15:05:28",2
"Atlassian Clover","Add migration message in maven-clover2-plugin POM","(/) investigate if we can use clover-maven-plugin or must use cloverX-maven-plugin -> it would be great to have just clover- instead of cloverX- to avoid changing a number in future  (?) decide if major Clover release will be numbered 4.1.0 or 5.0.0 (as per Semantic Versioning) -> it may affect whether it will be named clover4- or clover-5  (/) prepare migration message in maven-clover2-plugin pom.xml for versions 4.0.x, similarly as it was done for Clover Core (com.cenqua.clover:clover:3.3.0) -> deliver in Clover 4.0.6, 4.0.7, ...    to be considered:  (x) prepare a fork of the plugin and release under two names since 4.0.6?  (x) add an extra migration warning printed by the clover2:setup / clover2:instr goal?",Suggestion,,Closed,"2015-08-13 08:33:00","2015-08-13 08:33:00",2
"Atlassian Clover","Groovy code with Generics throw NPEs","Starting with Clover version 4.0.1 when running JUnit tests against clover instrumented code I am getting a null pointer exception when attempting to call this method:    {code:java}  // in DateUtil.groovy    static <T extends Date> T copy(T date) {      (T) date?.clone()    }  {code}    It seems like something has changed with the instrumentation. Either of these two other variations of this same code *doesn't* have this problem:    {code:java}    static Date copy(Date date) {      date?.clone()    }      static def copy(def date) {      date?.clone()    }  {code}      Here's the top of the stacktrace:  ",Bug,High,Closed,"2015-08-05 16:40:07","2015-08-05 16:40:07",3
"Atlassian Clover","Instrumentation error on certain projects since 4.0.5 build of Clover. ","Instrumentation error on certain projects since 4.0.5 build of Clover.     Making it a blocker as we can't run Clover on certain projects any longer.     ",Bug,Highest,Closed,"2015-07-27 06:46:26","2015-07-27 06:46:26",2
"Atlassian Clover","Rename maven-clover2-plugin artifactId to clover-maven-plugin","{panel:title=Decision|titleBGColor=#205081|bgColor=#59afe1}  We are currently working on renaming Maven Clover2 Plugin according to the naming convention recommended by the Apache Maven project.    Due to a fact that this is a major breaking change, forcing customers to modify their POMs, CI build plans etc, it will be done in the nearest major Clover release (currently planned for end of 2015) and appropriate migration guides will be prepared.    New plugin name will be: *clover-maven-plugin*  {panel}    *Problem reported:*    According the Maven's Plugin Naming Convention, Clover's plugin artifactID violates the Apache Maven Trademark. The artifactId should be clover2-maven-plugin. I would even suggest removing the 2 from the artifactId.    [Plugin Naming Convention and Apache Maven Trademark|https://maven.apache.org/guides/plugin/guide-java-plugin-development.html]      *Scope of the change:*    _Before release_     (/) investigate if we can use clover-maven-plugin or must use cloverX-maven-plugin - _will be renamed to clover-maven-plugin_    (/) decide if major Clover release will be numbered 4.1.0 -or 5.0.0- (as per [Semantic Versioning|http://semver.org])   (/) prepare migration message in maven-clover2-plugin pom.xml for versions 4.0.x, similarly as it was done for Clover Core (com.cenqua.clover:clover:3.3.0) - _message added in pom in 4.0.6_   (/) rename maven-clover2-plugin artifactId for 4.1.0 / -5.0.0- , update integration tests   (/) prepare migration guide for Clover 4.1 / -5.0- Release Notes   (/) update Clover's Tutorial (Moneybags bundled in clover-ant.zip) -> see also CLOV-1827    _After release_    See CLOV-1828.",Suggestion,,Closed,"2015-07-24 15:08:07","2015-07-24 15:08:07",3
"Atlassian Clover","AspectJ spike","*Backlog:*     (/) hook into necessary ICompilerAdapter build phases   (/) add clover recorder field to top-level classes   (/) add method instrumentation   (/) add constructor instrumentation   (/) add statement instrumentation   (/) generate html report (using command line tool)   (/) check how to call clover with/prior to <ajc> task in Ant   (/) write a sample aspectj-based project with Ant   (/) create clover-ajc.sh clover-ajc.bat wrappers   (/) cut a release and deploy to maven.atlassian.com/public   (/) prepare issue tracker on BB   (/) prepare page on CAC   (/) tweet about it    *Source code:*     * https://bitbucket.org/atlassian/clover-aspectj-compiler    *Out of scope:*   (x) set up build plan on Bamboo   (x) trying to instrument/understand aspectj annotations   (x) instrumenting intersections etc   (x) check how to run Clover-AJC in Eclipse (note that ApectJ is an Eclipse foundation project, so Eclipse is a main platform for it)   (x) maven integration   (x) IDEA integration  ",Suggestion,,Closed,"2015-07-17 11:10:57","2015-07-17 11:10:57",3
"Atlassian Clover","Eclipse Mars 4.5 does not load platform:/ resources properly","Clover uses platform:/ URIs to load standard Eclipse icons from eclipse-core such as a package icon, a folder icon etc.     Eclipse Mars is buggy and does not always fetch these resources, as a consequence we don't see proper icons on a toolbar.    Fix: bundle new icons in Clover-for-Eclipse plugin and replace platform:/ references by new icons using local URIs.    Note: try aligning look of new icons with ADG and Clover's HTML reports.",Bug,Medium,Closed,"2015-07-08 13:57:36","2015-07-08 13:57:36",2
"Atlassian Clover","Add support for Eclipse Mars 4.5 version","Add support for new Eclipse Mars (June 2015)     https://adtmag.com/articles/2015/06/30/eclipse-release-train.aspx",Suggestion,,Closed,"2015-07-02 07:32:24","2015-07-02 07:32:24",1
"Atlassian Clover","Support JDK9 by Clover","* As per [https://adtmag.com/articles/2015/05/08/oracle-java.aspx|https://adtmag.com/articles/2015/05/08/oracle-java.aspx]    we can expect to have the feature complete version before December, 2015.    Clover should be ready till then.",Suggestion,,Closed,"2015-06-23 22:52:58","2015-06-23 22:52:58",20
"Atlassian Clover","Make Clover compatible with IntelliJ 15",,Suggestion,,Closed,"2015-06-22 09:03:39","2015-06-22 09:03:39",8
"Atlassian Clover","Drop support for IDEA versions older than 11.0.0",,Suggestion,,Closed,"2015-06-18 09:24:41","2015-06-18 09:24:41",2
"Atlassian Clover","OutOfMemoryError while flushing coverage data","    ",Bug,Low,Closed,"2015-05-29 21:24:02","2015-05-29 21:24:02",2
"Atlassian Clover","Grails Clover Plugin compatibility with Grails 3.x","Grails 3 has been released (3.0 GA on 31/Mar/15). It uses the Gradle build tool instead of Gant, thus we may need to have Gradle support as well. It has also various changes in API. Implement support for Grails 3 in the Grails Clover Plugin. ",Suggestion,,Closed,"2015-04-21 10:52:35","2015-04-21 10:52:35",5
"Atlassian Clover","Repository pollution protection reports a custom classifier under Maven 2.2.x","*Problem:*    Probably bug in Maven, needs further investigation.     Running clean clover2:instrument on a simple project (no additional plugins) with repository pollution protection enabled causes a build failure.        Adding extra logging showed that it fails because a custom 'tests' classifier is used during a build - see XXXXXXXXXX below.         What's interesting, running the same test but with clover2:setup not only does not fails a build (because repository pollution protection does not fail due to custom classifier if no 'clover' is used), but the artifact produced does NOT have the 'tests' classifier:          It affects Maven 2.2.x. Does not occur in Maven 2.1.x or Maven 3.x.     Summarizing, it seems that forking a parallel build life cycle causes that an artefact's classifier changes from empty to 'tests':    * with clover2:instrument:        * with clover2:setup:          *Workaround:*   * use clover2:setup instead of clover2:instrument to avoid forking life cycle or   * use different Maven version or   * disable the protection  ",Bug,Low,Closed,"2015-04-20 10:12:38","2015-04-20 10:12:38",3
"Atlassian Clover","MavenIntegrator shall not add arguments if they are already present in original command","This applies to:   * build phases    * Clover's properties    Current problems:    1) The clean phase can be doubled    For example if original command has:      it becomes:        2) User cannot override default values of Clover properties    For example if a property is already defined:        MavenIntegrator adds a second one with it's own value:        ",Bug,Low,Closed,"2015-04-15 09:19:43","2015-04-15 09:19:43",1
"Atlassian Clover","Grails Clover Plugin compatibility with Grails 2.4.5, 2.5.0","New Grails versions have been released recently:   * 2.4.5   24/Mar/15   * 2.5   24/Mar/15    Make Grails Clover Plugin compatible with them.",Suggestion,,Closed,"2015-03-31 20:32:33","2015-03-31 20:32:33",5
"Atlassian Clover","Ensure that Clover JAR is readable by Ant 1.9.0-1.9.1","Ant 1.9.0/1.9.1 have a bug related with zip64 file handling:    _central directory zip64 extended information extra field's length doesn't match central directory data. Expected length 0 but is 16_    While this bug has been fixed in Ant 1.9.2, it should be still possible to produce such Clover JAR file that it will be readable by buggy Ant versions as well.     Ensure that new Clover 4.0.5 (and further versions) will be compatible.",Suggestion,,Closed,"2015-03-30 10:56:50","2015-03-30 10:56:50",3
"Atlassian Clover","Clover installs instrumented-jars in local Maven repo, in place of non-instrument ones","I'm not sure if this has been reintroduced or something else is wrong, since the CLOVKB claims it is not the case: https://confluence.atlassian.com/display/CLOVERKB/Maven+is+deploying+instrumented+jars  (I _am_ using the {{instrument}} goal - followed by {{log}} and {{check}})  In the below, you can see that, e.g., {{target/clover/magnolia-module-diff-1.7-SNAPSHOT-clover-tests.jar}} gets copied to {{.../magnolia-module-diff-1.7-SNAPSHOT-tests.jar}} (without {{-clover}} qualifier!)    This seems to happen for ~all artifacts except the main jar. (test jar, assemblies, etc..).    In this case, the situation is saved by the real install plugin that gets executed later and overwrites those wrong artifacts. However, if we use the (newish) {{installAtEnd}} feature of the {{maven-install-plugin}}, then this doesn't happen, and we end up with instrumented jars in place of the non-instrumented ones, which has tons of ugly consequences. See for yourself with the snippet:{code:xml}    <build>      <pluginManagement>        <plugins>          <plugin>            <groupId>org.apache.maven.plugins</groupId>            <artifactId>maven-install-plugin</artifactId>            <configuration>              <installAtEnd>false</installAtEnd>            </configuration>          </plugin>        </plugins>      </pluginManagement>    </build>  {code}    Why is Clover installing anything, anyway ? Shouldn't it just _attach_ the instrumented jars (and only those) to the build, and let Maven do the rest ?    ",Bug,Medium,Closed,"2015-03-13 13:25:12","2015-03-13 13:25:12",1
"Atlassian Clover","as a user I want to see smart names for classes and functions in reports","The point is that Scala code is being translated to a bytecode containing various cryptic names.     For instance, overloaded operators have $op in method's name.     Think how to reasonably represent methods, functions, inline classes, anonymous functions, case classes, traits etc etc in HTML report at least (XML / JSON are less important).   ",Suggestion,,Closed,"2015-03-13 12:58:33","2015-03-13 12:58:33",20
"Atlassian Clover","as a user I want to run test optimization for Scala tests","It should be possible to perform test optimization for Scala test classes.     Integrations:   * Ant (?)   * Maven   * SBT   * IDEA (?)   * Eclipse (?)  ",Suggestion,,Closed,"2015-03-13 12:48:29","2015-03-13 12:48:29",40
"Atlassian Clover","as a user I want to use Clover-for-Scala in Eclipse","Integration of Clover-for-Scala with Eclipse.    Tasks:   * plug into *.scala text editors   * show scala classes in the 'Coverage Explorer'    * intercept compilation of Scala code    (!) Challenge: simultaneous updates of clover.db by Scalac and Javac (similarly as for Groovy in IDE)    Out of scope:   * test optimization for Scala",Suggestion,,Closed,"2015-03-13 12:43:55","2015-03-13 12:43:55",40
"Atlassian Clover","as a user I want to use Clover-for-Scala in IntelliJ IDEA","Tasks:   * integrate with Scala complier in IDEA (using external build process)   * show Scala classes in Cloverage view   * show coverage highlighting in Scala editors    (!) Challenge: simultaneous update of clover.db by Javac and Scalac (similar problem as for Groovy in IDE)    Out of scope:   * test optimization for Scala",Suggestion,,Closed,"2015-03-13 12:38:33","2015-03-13 12:38:33",40
"Atlassian Clover","as a user I want to see for Scala exact code coverage highlighting in an HTML report","As in Scala we may have a lot of statements in a single source line, it would be very valuable to have coverage highlighting not for a single line, but for a single character in HTML reports. Similarly as we have for Eclipse and IDEA.    See this issue: ",Suggestion,,Closed,"2015-03-13 11:59:23","2015-03-13 11:59:23",8
"Atlassian Clover","as a user I want to see nested functions in reports","Scala allows to nest functions inside other functions. Enhance existing HTML / XML / JSON reports in such way that we could see such nesting as well.     Some of the required functionality has already been done during implementation of lambda functions for Java 8 (Clover 3.2). Review if all possible nesting combinations are implemented in Velocity templates (method-in-method, class-in-method etc). Affects: table with list of methods for a class, calculation of metrics etc.",Suggestion,,Closed,"2015-03-13 11:55:59","2015-03-13 11:55:59",5
"Atlassian Clover","as a user I want to use Clover with SBT","Integration of Clover-for-Scala with SBT.    Tasks:   * write build plugin for SBT - equivalent of clover2:setup, shall intercept any scalac calls; shall add clover.jar (clover-scala.jar?) to class paths for compilation and runtime   * write build plugin for SBT - equivalent of clover2:clover, shall generate reports; we may call Clover-for-Ant under the hood    ",Suggestion,,Closed,"2015-03-13 11:49:08","2015-03-13 11:49:08",20
"Atlassian Clover","as a user I want to use Clover with scalac ","Integration of Clover-for-Scala with scalac command line tool.    Tasks:   * shall be easy - plugging via META-INF/services    Checks:   * is it possible to have joint Scala-Java compilation? if yes, then how it works and how to intercept both compilers?  ",Suggestion,,Closed,"2015-03-13 11:45:40","2015-03-13 11:45:40",5
"Atlassian Clover","as a user I want to use Clover with maven-scala-plugin","Integration of Clover-for-Scala with the maven-scala-plugin.     Tasks:   * clover2:setup shall connect to the maven-scala-plugin; t.b.d. how - META-INF/services? a plugin point? some properties?   * clover2:clover shall include also *.scala sources    Checks:   * is it possible to have joint Scala-Java compilation (like with joint Groovy-Java)?    Out of scope:   * clover2:instr is out of scope as integration is performed using AST, not source code   * clover2:optimize as test optimization is in another task  ",Suggestion,,Closed,"2015-03-13 11:43:13","2015-03-13 11:43:13",13
"Atlassian Clover","Publish Clover-for-Scala prototype","Tasks:   * request releasing it as open source   * publish plugin's source code on BitBucket,    * prepare and publish documentation on CAC/Clover-for-Scala.    * prepare plug-in developer documentation",Suggestion,,Closed,"2015-03-13 11:34:58","2015-03-13 11:34:58",5
"Atlassian Clover","Compiling Groovy code with Clover throws NPE","Clover fails to integrate with Groovyc task and throws NPE:        *Cause:*    NPE is thrown when Clover cannot find it's AntInstrumentationConfig in project references in an Ant-based build. This can happen when a build calls <ant> or <antcall> tasks without {{inheritrefs=true}} - lack of this property causes that AntInstrumentationConfig is not passed to these calls.    *Workaround:*    Ensure that  {{inheritrefs=true}} is used.   ",Bug,Low,Closed,"2015-03-03 10:57:57","2015-03-03 10:57:57",1
"Atlassian Clover","as a plugin developer I'd like to have annotations for a package in a Clover database","Currently, annotations are available for classes and methods only:   * ClassInfo.getModifiers().getAnnotations()   * MethodInfo.getSignature().getAnnotations()    There's nothing like PackageInfo.getAnnotations().     The reason to have this is that _package-info.java_ files may contain annotations (but no executable code). While having this adds no value for Clover instrumentation itself, it could be useful for plugin developers, who would like to read Clover database directly.     For instance, this information could be used to filter classes based on the information stored on a package level. See: https://answers.atlassian.com/questions/12781852/how-to-read-package-annotations-from-clover-db  ",Suggestion,,Closed,"2015-02-28 15:08:09","2015-02-28 15:08:09",5
"Atlassian Clover","Set up developmment environment for Stash","probably on Linux VM",Suggestion,,Closed,"2015-02-19 15:07:27","2015-02-19 15:07:27",2
"Atlassian Clover","Protect against deployment of instrumented code","If user calls mvn clover2:setup install or mvn clover2:setup deploy, code instrumented by Clover will be installed to ~/.m2 or deployed to a repository.     This may be not a desired behavior, especially if developer is not aware of it (for instance if someone switches on the automatic Clover integration in Bamboo).    Furthermore, installation may occur not only for install or deploy phases expressed explicitly in the command line, but it can also happen when a plug-in runs such life cycle (mvn release:perform for instance).     Implement a protection against it - in the clover2:setup check the reactor which phases are about to run and refuse code instrumentation if 'install' or 'deploy' will be called.    This protection shall not be enabled by default, because there may be actually a need to install instrumented code (for instance - multiple build plans using the same local m2 cache or repository to fetch compiled artifacts and we want to measure coverage for all modules).    Enable protection by a flag. e.g.        mvn -Dmaven.clover.repositoryPollutionProtection=true    Expected behavior: fail a build if repositoryPollutionProtection=true and build lifecycle contains 'install' or 'deploy' phases.    *Extra:*    Fail also if artifact contains a custom classifier and clover2:instrument is used (as Maven cannot handle an artifact with two classifiers).",Suggestion,,Closed,"2015-02-10 14:33:38","2015-02-10 14:33:38",3
"Atlassian Clover","Automatic Clover integration does not work for <groovyc> task","*Problem:*    Automatic Clover integration in Bamboo does now work for Ant Tasks containing the <groovyc> task.    *Root cause:*    When automatic Clover integration is enabled in Bamboo, it uses Clover's AntIntegrationListener:        This listener listens to Ant's build events and intercepts Ant tasks such as:    <javac>, <java>, <javadoc>, <junit>    However, it does not intercept the <groovyc> one.     Integration with <groovyc> task is performed by the <clover-setup> task, which calls:    {code:java}  GroovycSupport.ensureAddedTo(antProject);  {code}    Note that GroovycSupport implements Ant's BuildListener. However, it cannot be passed via command line, like this:        because the GroovycSupport does not have a default constructor.     *Workaround:*    Call the <clover-setup> from an Ant script. For example, add the following target:    {code:xml}  <target name=instrument if=with.clover>          <!-- we assume that automatic integration is enabled, which adds the '-lib clover.jar' -->          <taskdef name=clover-setup classname=com.atlassian.clover.ant.tasks.CloverSetupTask/> <!-- from the clover.jar -->            <!-- call clover-setup to intercept <groovyc> task -->          <clover-setup/>            <!-- This fake compilation is to cheat the automatic Clover integration, so that it won't display the               Clover reports not being generated. No Clover instrumentation was done. error message.               We instrument java sources, but through the <groovyc> task; and we need to trick Clover so that it               generates an HTML report at the end. -->          <mkdir dir=${target.classes}/>          <javac failonerror=false srcdir=${src.java} excludes=**/* destdir=${target.classes}/>  </target>    <target name=compile depends=instrument>          <groovyc destdir=${target.classes} classpathref=build.classpath fork=yes>              <javac source=1.7 target=1.7 debug=on encoding=UTF8>              </javac>              <src path=${src.java}/>              <src path=${src.groovy}/>          </groovyc>  </target>  {code}    Clover's initialization will occur only if '-Dwith.clover=true' is set. Therefore, modify the Ant Task in Bamboo, for instance:        *Possible fixes:*    1) Add default constructor for GroovycSupport. Pass it as a second '-listener' to ant command in Bamboo.    2) Change the AntIntegrationListener so that it will intercept all <groovyc> tasks as well.  ",Bug,Low,Closed,"2015-02-09 14:02:27","2015-02-09 14:02:27",5
"Atlassian Clover","Error when closing Cloud Editor in Eclipse","Closing the Cloud Editor in Eclipse causes that sometimes an exception is thrown and reported in the Error Log:        and           Apparently, it fails in the CTabFolderLayout.computeSize() method:        the 'renderer' is null. This renderer is being set in CTabFolder.init() method and set to null in the CTabFolder.onDispose() method.     It *may* be related with the:     CloudEditor.dispose() which calls removeCoverageChangeListener after the super.dispose()  so a refresh event may come in the meantinme    or    CloudEditor.createPages() which hacks the container layout by changing it from FillLayout to GridLayout.",Bug,Low,Closed,"2015-01-29 10:54:25","2015-01-29 10:54:25",3
"Atlassian Clover","Unable to open generated reports in Eclipse 4.4","Steps to reproduce:    Open Coverage Exploer, click Run new report ... and create any report. Next click View report and select it on a list. Nothing happens in the UI and the Error log view shows Unhandled event exception entry with a stack trace as follows:        ",Bug,Low,Closed,"2015-01-27 13:38:02","2015-01-27 13:38:02",1
"Atlassian Clover","Clover fails to generate HTML report for more than one project in Eclipse","      ",Bug,Low,Closed,"2015-01-27 12:53:15","2015-01-27 12:53:15",1
"Atlassian Clover","Clover doesn't support Spock 1.0 and 1.0-SNAPSHOT","It works with Spock v0.7-groovy-2.0, but it doesn't work with Spock v1.0-groovy-2.0-SNAPSHOT.    The root cause is that the IGlobalExtension interface changed and it now has start() and stop() methods, which the v0.7 version did not have, and so an AbstractMethodError: null is thrown:        Because of this, we cannot use the most recent features in Spock, since v0.7 is more than 2 years old.",Bug,Medium,Closed,"2015-01-26 23:55:27","2015-01-26 23:55:27",2
"Atlassian Clover","Support Groovy 2.4.0 in Clover",,Suggestion,,Closed,"2015-01-26 10:30:36","2015-01-26 10:30:36",2
"Atlassian Clover","New colour scheme for a tag cloud and a coverage treemap in the HTML report","Customers reported that using a single, red color gradient in a coverage tree map and in tag clouds has two drawbacks:   * it's harder to find which code areas require improvement   * seeing always a red color is discouraging  :-)    ",Suggestion,,Closed,"2015-01-17 13:13:38","2015-01-17 13:13:38",2
"Atlassian Clover","Java8: don't instrument lambda functions when source < 1.8","No matter what -source value is set, Clover instruments both expression-like and block-like lambdas.     It's a behaviour slightly different from the one we have for e.g.:   * -source 1.3 (it handles 'assert' as not a keyword) or    * -source 1.4 (no 'enums').     Ways to improve it:    1) change Java grammar so that handling lambda functions is optional - only for source >= 1.8; otherwise Clover should throw a parse error      2) or parse lambdas also for source < 1.8 (no parse errors would be thrown, only javac will raise a compilation error), but do not add Clover's instrumentation to it        ",Suggestion,,Closed,"2015-01-14 10:20:40","2015-01-14 10:20:40",1
"Atlassian Clover","Java8: method reference to a non-static method fails to compile","{quote}  *NOT REPRODUCIBLE*  {quote}    In this code sample:    {code:java}  return map.entrySet().stream()     .collect(Collectors.toMap(      Map.Entry::getKey,      e -> e.getValue().getAverage()     ));  {code}    the Collectors.toMap() takes a Map.Entry::getKey method reference as input argument. However, the getKey method is not static.     Wrapping it by Clover's lambdaInc() method leads to a compilation error like this:                      *Possible workarounds ??*    1) Disable instrumentation of expression-like lambda functions (method references are treated as expression-like lambda) - use instrumentLambda=block or none.    2) Wrap such method reference with ///CLOVER:OFF and ///CLOVER:ON keywords, e.g.:        3) Use a variable with a non-static method reference or change to a lambda expression.        ",Bug,Medium,Closed,"2015-01-09 12:03:45","2015-01-09 12:03:45",3
"Atlassian Clover","Replace clover.licenseLocation by maven.clover.licenseLocation","While it's perfectly fine to have a declaration like this:         and next refer it in maven-clover2-plugin's configuration like this:        it's misleading for users, because in case they would like to pass it via -D parameter or declare in settings.xml without having the <licenseLocation> in maven-clover2-plugin section, it will not work, because the correct property name is 'maven.clover.licenseLocation'. See:    https://docs.atlassian.com/maven-clover2-plugin/latest/setup-mojo.html#licenseLocation      Correct all references in documentation on confluence.atlassian.com, answers.atlassian.com, maven-clover2-plugin source code, tutorial source code.   ",Suggestion,,Closed,"2015-01-09 11:15:27","2015-01-09 11:15:27",1
"Atlassian Clover","CloverOptimizedTestNGSelector does not add clover-optimized group to TestNG @Before and @After annotations","In order for Clover to optimize a TestNG test suite, we have to use the {{CloverOptimizedTestNGSelector}} listener, and restrict TestNG to only run the clover-optimized group, as in:      The problem with this is that TestNG's {{@Before}} and {{@After}} annotations ({{@BeforeMethod}}, {{@AfterClass}}, etc) will not be run, because they are not part of the clover-optimized group.    I have a workaround, which is to qualify all such annotations with {{alwaysRun=true}}, but this is pretty ugly.    A possible solution is for {{CloverOptimizedTestNGSelector}} to implement {{IAnnotationTransformer2}} and override [transform( IConfigurationAnnotation, Class, Constructor, Method )|http://testng.org/javadoc/org/testng/IAnnotationTransformer2.html#transform%28org.testng.annotations.IConfigurationAnnotation,%20java.lang.Class,%20java.lang.reflect.Constructor,%20java.lang.reflect.Method%29], automatically adding the clover-optimized group to all non-tests.",Bug,Medium,Closed,"2015-01-07 03:32:39","2015-01-07 03:32:39",1
"Atlassian Clover","Set instrumentLambda=none as a default value for instrumentation","This is a temporary workaround thanks to which java8 code will always compile, at the cost that lambdas are not measured. User will be still able to enable lambda instrumentation, but this will be a conscious decision, so seeing compilation errors should be less surprising.     Scope: CloverInstr, ant, maven, idea, eclipse, grails plugins.",Sub-task,Medium,Closed,"2014-12-27 13:10:04","2014-12-27 13:10:04",1
"Atlassian Clover","Use heuristics to solve JDK8 Stream compilation errors","Spike in which a problem with Java8 streams will be attacked as it seems that using stream() is very popular and the most probably it causes the majority of compilation problems with Clover's lambdaInc().    Scope: focus on streams only.    Out of scope: attacking a generic problem of method signatures with a mixture of functional and non-functional arguments. ",Bug,Medium,Closed,"2014-12-27 13:07:04","2014-12-27 13:07:04",13
"Atlassian Clover","Clover does not work with Grails 2.4.4","When developers use ./grailsw run-app it gives the following error.     ",Bug,Medium,Closed,"2014-12-27 12:20:56","2014-12-27 12:20:56",3
"Atlassian Clover","Integrate Clover with JUnitParams","The JUnitParams (https://github.com/Pragmatists/junitparams) is much more convenient way to parameterize tests instead of using JUnit's 4.10 @Parameterized annotation. ",Suggestion,,Closed,"2014-11-27 10:47:58","2014-11-27 10:47:58",5
"Atlassian Clover","Prepare Bamboo documentation about the change","* Write big warning in the Bamboo 5.8 Release Notes what do to with Clover-enabled plans before upgrading  * Update Enabling the Clover add-on page (how it works for maven in bamboo 5.8 and 5.7)  * Update answers.a.c questions about this problem and CLOVERKB too  ",Sub-task,Low,Closed,"2014-11-25 15:24:58","2014-11-25 15:24:58",2
"Atlassian Clover","Add warnings in UI about install/deploy phases","    what to do in case when install or deploy phase is declared? deploying instrumented JARs shall be avoided in general          write help for automatically integrate clover radio button?          write warning in UI if such goals are found?          write warning in a build log if such goals are found?  ",Sub-task,Low,Closed,"2014-11-25 15:21:25","2014-11-25 15:21:25",3
"Atlassian Clover","Insert Clover goals between original ones","    add clover2:setup after the clean (if present) and before other goals          but jaxb2:generate clover2:setup          but wsdl2java clover2:setup  ",Sub-task,Low,Closed,"2014-11-25 15:20:35","2014-11-25 15:20:35",3
"Atlassian Clover","Add additional logging for <clover-setup>/<files> element","Currently, when <clover-setup> contains a <fileset> element, Clover prints information about included/excluded files (on a verbose logging level).    In <clover-setup> we can also use a similar <files> element - but there's no logging for it. Add logging on a verbose level.",Suggestion,,Closed,"2014-11-15 11:53:32","2014-11-15 11:53:32",1
"Atlassian Clover","Test Clover-for-IDEA compatibility with IDEA 14",,Suggestion,,Closed,"2014-11-12 14:06:53","2014-11-12 14:06:53",2
"Atlassian Clover","BAM-9048 More configuration options for automatic Clover integration",,Suggestion,,Closed,"2014-10-13 13:01:41","2014-10-13 13:01:41",5
"Atlassian Clover","BAM-699 BAM-2883 BAM-13786 Chart points with failed builds or no daily data",,Bug,Low,Closed,"2014-10-13 12:56:41","2014-10-13 12:56:41",5
"Atlassian Clover","Upgrade third party libraries used by Clover - 2nd phase","Upgrade third party libraries to their latest versions:   * Antlr 4.0, including java.g syntax file (x) tracked in CLOV-1329, CLOV-1331 and CLOV-1332   * atlassian-extras 3.2 (x) tracked in CLOV-1553   * cajo 1.175   * commons-lang3 3.3.2 (x)   * fastutil 6.5.2 (x) tracked in CLOV-1552   * GSON 2.2.2    * JDOM 2.0.4   * JSON - replace by com.google.code.gson:gson    Upgrade feasibility to be verified:   * theJIT   * KTreeMap/JTreeMap    Get rid of:   * Overlibvms (x) not until we drop Classic reports (Clover 4.1)   * Utils.js (x) not until we drop Classic reports (Clover 4.1)   * iText (x) tracked in CLOV-1554    To be considered:   * upgrade Log4j to or 2.0.x",Suggestion,,Closed,"2014-10-13 11:28:17","2014-10-13 11:28:17",8
"Atlassian Clover","A historical report contains link to an XML report",!wrong_links_in_a_historical_report.png!,Bug,Low,Closed,"2014-10-13 09:50:03","2014-10-13 09:50:03",1
"Atlassian Clover","A wrong caption in a search box in an HTML ADG report",!search_box_wrong_caption.png!,Bug,Low,Closed,"2014-10-13 09:48:15","2014-10-13 09:48:15",1
"Atlassian Clover","An orphaned lozenge when there are no search results ",!html_adg_orphaned_lozenge.png!,Bug,Low,Closed,"2014-10-13 09:41:21","2014-10-13 09:41:21",1
"Atlassian Clover","Test optimization in IDEA 14 shows wrong number of classes","There are 2 test classes in the 'Moneybags' tutorial project. Running test optimization in IDEA 14 (EAP build 138.2458.8) shows 3 test classes.    !idea14_clover_test_optimization.png!",Bug,Medium,Closed,"2014-10-09 11:53:16","2014-10-09 11:53:16",2
"Atlassian Clover","Distributed Coverage does not work due to java.rmi.UnmarshalException",,Bug,Medium,Closed,"2014-10-07 11:19:21","2014-10-07 11:19:21",1
"Atlassian Clover","S3 Artifact handler corrupts Clover tab in Bamboo","Bamboo 5.7 introduces new artifact handler to store files in Amazon S3. Due to a fact that it works on a file-by-file basis, we cannot expose the entire HTML report as a 'site' embedded in the <iframe>. As a consequence it looks like this:    !clover-tab-with-s3-handler.png!          *Workaround:*    Do not use S3 artifact handler for builds with Clover. Default handler settings can be overridden in Plan configuration > Miscellaneous:    !artifact_handlers.png!          *Possible fixes:*    1) Implement a wrapper on S3 handler, which would download all files from an artifact definition to some temporary directory and expose it in <iframe>     * problem: Clover's reports may have up to several GB for large projects, downloading all files every time someone opens the 'Clover' tab will be time consuming, we'd need to keep such artifacts for a longer period of time    2) Add warnings for Clover integration in the UI in case when S3 handler is found. Write information about this limitation on confluence.atlassian.com.    3) Create a ZIP archive out of Clover Report artifact and give user an ability to download this file.    4) Add extra option in artifact definition so that user could select which handler should keep given artifact. Thanks to this, S3 could be excluded.     5) Due to a fact that new Clover HTML ADG reports do not contain frames, we could think about a thin wrapper, which would download only one page and replace all original links in the HTML file by proper links to S3; if user would click on a link, he would get another page processed this way...   * we'd have to handle *.js, *.css, images etc too.    5b) Create something like a ZIP File Handler, which could serve files from an archive (then we could pack Clover's HTML report and store on S3 or any other medium). It would also require rewriting links.    6) Look for some solution provided by Amazon, such as Static Website Hosting on S3    http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html    ",Bug,Medium,Closed,"2014-10-01 13:04:31","2014-10-01 13:04:31",8
"Atlassian Clover","Create Bitbucket Connect Clover Plugin","Bitbucket - Dan Bennett (Team Lead) - Investigate the creation of a Connect plugin to expose Clover functionality in Bitbucket diff & file viewer (same as Stash functionality)",Suggestion,,Closed,"2014-10-01 12:02:11","2014-10-01 12:02:11",40
"Atlassian Clover","Improve HTML ADG side bar view and a package tree performance",,Suggestion,,Closed,"2014-10-01 11:51:10","2014-10-01 11:51:10",1
"Atlassian Clover","Replace iText library","Replace current iText 2.0.1 library by:   * a commercial version of iText 5.x or    * a PDFBox (http://pdfbox.apache.org) or other tool based on a good open-source license (Apache 2.0, MIT, BSD, PD).",Suggestion,,Closed,"2014-09-15 11:26:17","2014-09-15 11:26:17",5
"Atlassian Clover","Upgrade Atlassian Extras to 3.2.x","API has changed in Atlassian Extras 3.x vs 2.5. There's no   LicenseManagerFactory.getLicenseManager()    We can compose our own license manager and decoder using:  Version1LicenseDecoder + Version2LicenseDecoder + DelegatingLicenseDecoder + CloverProductLicenseFactory + DefaultLicenseManager    However, there are problems with decoding the Clover Desktop license = the CloverLicenseTest.testDesktopLicense fails.     Investigate:   * maybe Clover Desktop license format has changed?   * or maybe overlooked by atlassian-extras developers?   * or ... ?",Suggestion,,Closed,"2014-09-15 10:02:17","2014-09-15 10:02:17",3
"Atlassian Clover","Upgrade FastUtil library to version 6.5.2 or later","API was changed since version 4.4.3, some methods used by Clover are missing and there's no direct replacement for them. Migrate Clover's code. ",Suggestion,,Closed,"2014-09-15 09:55:48","2014-09-15 09:55:48",3
"Atlassian Clover","The Grails' @Transactional annotation conflicts with Clover's AST transformations","The @Transactional annotation is the new Grails-y way of controlling transactional behavior in a service. It uses an AST transformation to essentially wrap public methods (if added to the class) in a GrailsTransactionTemplate. So you get code that looks like this:        The real body of the method is in the reject_closure5, which ends up calling a method named $tt_reject(...).    Clover doesn't realize that the code originally under the reject method has essentially been relocated to the $tt__reject method.    Given that @Transactional is a core part of Grails (starting in 2.3, I believe) and the recommended way to control transactions going forward, this is probably something that should be addressed in Clover core.",Bug,Medium,Closed,"2014-08-21 19:57:52","2014-08-21 19:57:52",3
"Atlassian Clover","Resolve path to clover.jar when packed as OSGI bundle","ClassPathUtil.getCloverJarPath() searches for a JAR in case when URL returned by class loader is like:         or        However, it does not handle a case for OSGI bundles, which have an URI like:        Fix: use getClass().getProtectionDomain().getCodeSource().getLocation().toURI()  ",Bug,Medium,Closed,"2014-08-21 09:30:19","2014-08-21 09:30:19",1
"Atlassian Clover","Release Clover 4.0.2","ant, eclipse, idea, maven, grails",Suggestion,,Closed,"2014-08-18 11:48:06","2014-08-18 11:48:06",2
"Atlassian Clover","BAM-14734 BAM-14907 Clover charts","https://jira.atlassian.com/browse/BAM-14734  https://jira.atlassian.com/browse/BAM-14907",Bug,Low,Closed,"2014-08-18 11:45:29","2014-08-18 11:45:29",5
"Atlassian Clover","BAM-7272 BAM-10516 BAM-11151 Working subdirectory",,Bug,Low,Closed,"2014-08-18 11:41:28","2014-08-18 11:41:28",8
"Atlassian Clover","BAM-13208 Automatic integration in multi-module builds","Follow the approach #1",Suggestion,,Closed,"2014-08-18 11:36:07","2014-08-18 11:36:07",8
"Atlassian Clover","BAM-13404 BAM-15085 Use BuildConfig to install Clover",,Suggestion,,Closed,"2014-08-18 11:33:37","2014-08-18 11:33:37",8
"Atlassian Clover","Instrumenting assignment of method reference to field results in reference to undefined symbol.","Instrumenting the following snippet results in the compilation error  [ERROR] clover/src-instrumented/Test.java:[2,18] cannot find symbol  [ERROR] symbol:   variable __CLR3_3_000hysmxbbd  [ERROR] location: class Test    Source:  public class Test {      Runnable r = System::currentTimeMillis;  }    Instrumented code:  /* $$ This file has been instrumented by Clover 3.3.0#2014033113020816 $$ */public class Test {      Runnable r = __CLR3_3_000hysmxbbd.lambdaInc(0,System::currentTimeMillis,1);  }  ",Bug,Low,Closed,"2014-08-13 13:37:02","2014-08-13 13:37:02",2
"Atlassian Clover","Application Packages list is empty in Classic report",,Bug,Low,Closed,"2014-08-11 12:11:51","2014-08-11 12:11:51",1
"Atlassian Clover","Move CloverCompilerAdapter out from org.apache.tools.ant.taskdefs package","The org.apache.tools.ant.taskdefs.CloverCompilerAdapter may cause conflicts with Apache Ant packaged as OSGI bundle which exports the same package.     Possible fix:  (x) The Javac.getFileList() is a getter for compileList. Try using it - we must ensure that compileList and replacementCompileSet have the same size or  (/) Use reflections to access the package-protected field.    Thanks to this we could move CloverCompilerAdapter  to com.atlassian.clover package. ",Suggestion,,Closed,"2014-08-11 09:45:09","2014-08-11 09:45:09",1
"Atlassian Clover","Configure Fisheye/Crucible build to use Clover 4",,Suggestion,,Closed,"2014-07-31 08:42:54","2014-07-31 08:42:54",1
"Atlassian Clover","Clover tab with an HTML report generated by Clover 4 shall have a vertical scroll bar (BAM-14777)","See BAM-14777.",Bug,Low,Closed,"2014-07-28 09:56:11","2014-07-28 09:56:11",1
"Atlassian Clover","View latest Clover information (BAM-14428)","See BAM-14428.",Bug,Low,Closed,"2014-07-28 09:54:35","2014-07-28 09:54:35",5
"Atlassian Clover","implement global search in the html report - frontend","Implement search box in blue app header.    Generate JSON data:   * packages, files, classes, methods, tests    Split into several indexes (for smaller file size) as theoretical size is up to 40MB (200'000 objects per 200 chars).    Add automatic option (up to 10'000 elements).     Add options for <clover report>     <index scope=package, file, ..., method | auto>    to choose which elements shall be searchable.",Suggestion,,Closed,"2014-07-21 11:01:55","2014-07-21 11:01:55",5
"Atlassian Clover","AntIntegrator adds unnecessary double quotes for -Dparam=value JVM options","Class com.atlassian.clover.ci.AntIntegrator puts values of the following properties:    -Dclover.historydir and -Dclover.license.cert, -Dclover.license.path    in double quotes. On Windows platform it causes problems when a value contains space character - parameters are being split. See BAM-10740.    Add a check if OS is Windows and don't add double quotes in such case. ",Bug,Low,Closed,"2014-07-18 08:14:04","2014-07-18 08:14:04",1
"Atlassian Clover","use ADG fonts and colours in Cloud View in IDEA","The ADG HTML report in Clover 4 uses new colour set (shades of red instead of blue-red) for tag clouds. The Clover-for-Eclipse has this theme:    [^cloud_view_eclipse.png]    but the Clover-for-IDEA still uses the old colour set:    [^cloud_view_idea.png]",Suggestion,,Closed,"2014-07-11 08:59:51","2014-07-11 08:59:51",1
"Atlassian Clover","tool tips in dashboard widgets shall not be displayed on the right","Tool tips are by default placed on the right, so they don't fit in the 'Clover Dashboard' view:    !screenshot-1.png!",Bug,Low,Closed,"2014-07-10 10:56:19","2014-07-10 10:56:19",1
"Atlassian Clover","The Show methods link does not open the modal dialog","This happens for inner classes (i.e. when a class name contains .)    May be caused by a way how Modal Dialog handles element id.",Bug,Medium,Closed,"2014-07-09 09:56:34","2014-07-09 09:56:34",1
"Atlassian Clover","Show contributing test change to ...","<a>Select tests</a> to highlight the code coverage or something similar",Suggestion,,Closed,"2014-07-01 13:24:41","2014-07-01 13:24:41",0.5
"Atlassian Clover","Remove See more links from the report dashboard","for:  * Most complex packages  * Most complex classes  * Least tested methods  * Class Coverage Distribution  * Class Complexity          ",Suggestion,,Closed,"2014-07-01 13:20:30","2014-07-01 13:20:30",0.5
"Atlassian Clover","as a developer I'd like to have nanosecond precision for test duration","In reports lots of tests have duration = 0. This is because unit tests are fast and the System.currentTimeMillis() is used to record start and end time of a test. Which is not precise by design.    We could increase precision to nanoseconds using System.nanoTime().    Note: we'd still need to call System.currentTimeMillis() to record datetime when test was run.",Suggestion,,Closed,"2014-06-25 21:50:50","2014-06-25 21:50:50",3
"Atlassian Clover","Upgrade HTML report to ADG 2.2+ / AUI 5.9+","Upgrade AUI library to the latest version. We may need to make some corrections of CSS to be compatible (probably: colors, shadows, notification messages).",Suggestion,,Closed,"2014-06-25 14:57:59","2014-06-25 14:57:59",2
"Atlassian Clover","replace a vertical navigation component by a sidebar","Instead of the aui-vertical-nav use the aui-sidebar component. ",Suggestion,,Closed,"2014-06-16 15:16:11","2014-06-16 15:16:11",3
"Atlassian Clover","provide explanation when number of files is greater than number of classes for a package","There might be a case that number of files > number of classes listed:    !more_files_than_classes.png!    This is normal behaviour, because by default Clover hides entities having no executable code, such as: empty classes, enums (with no methods), interfaces (with no virtual extension methods).     However, this may be confusing for end user.     How we could improve this:    1) Set the showEmpty to true by default. Benefit: 'classes >= files' in all cases. Drawback: report will contain unnecessary noise.     2) Add [(?) Help] button above the table. Example:    !package_help.png!    3) Add tooltip for 'Files'  (TotalElements.getHelp())    4) Add small text below the class table. For example:    3 classes are not listed because they contain no executable code.  ",Suggestion,,Closed,"2014-06-11 12:49:09","2014-06-11 12:49:09",1
"Atlassian Clover","tree view is not compacted properly when only 1 package is present","!tree_view_bug.png!    We have com.cenqua + samples.money instead of exactly one (root) node named com.cenqua.samples.money.   ",Bug,Low,Closed,"2014-06-10 10:57:03","2014-06-10 10:57:03",1
"Atlassian Clover","implement global search in the html report - backend","Implement search box in a blue app header.  Generate JSON data:  * packages, files, classes, methods, tests  Split into several indexes (for smaller file size) as theoretical size is up to 40MB (200'000 objects per 200 chars).  Add automatic option (up to 10'000 elements).   (/) Add options for:   <clover report>/<current>/<format>/<globalSearch scope=package,file,class,method,test|auto limit=10000/>  (/) Add option for HtmlReporter:  --globalSearchScope=package,file,class,method,test|auto  --globalSearchLimit=10000  to choose which elements shall be searchable.",Suggestion,,Closed,"2014-06-09 10:50:15","2014-06-09 10:50:15",3
"Atlassian Clover","improve navigation between report entities","We can navigate vertically and horizontally, but on a file level we've got a break:        fix it so that we can jump from test file to test results for a file    fix it so that we have one source tab for a file   -> put 'classes and methods' and 'contributing tests' into expandable tables, dialogs etc  ",Suggestion,,Closed,"2014-05-28 22:27:42","2014-05-28 22:27:42",3
"Atlassian Clover","improve report accessiblity",http://www.w3.org/TR/wai-aria-practices/#TreeView,Suggestion,,Closed,"2014-05-27 08:49:19","2014-05-27 08:49:19",3
"Atlassian Clover","reduce html report size","As a developer I'd like to have small HTML report size in order to reduce disk space consumption, especially in case of builds on CI server.     Possible ways to reduce report size:    1) extract list of packages to separate JSON file and load it dynamically using JS function (instead of embedding it on virtually every page)  (/) DONE    2) use some html compression utility (which would strip all whitespace etc)       https://code.google.com/p/htmlcompressor/#Compressing_selective_content_in_Velocity_templates    (x) performance of the HtmlCompressor is unacceptable (+340% time)    3) remove whitespace from most frequent loops from velocity templates (/) DONE",Suggestion,,Closed,"2014-05-15 11:29:09","2014-05-15 11:29:09",3
"Atlassian Clover","Grails' controller methods are not shown as entered","Hello,  For some reason the method in a controller is marked as not entered even though the content inside is shown to be executed. Please can you help me rationalize/ understand this?    Please refer to me screenshots:  index_method_not_executed.png: to see that the index() method is not executed even though its contents are.  test_for_index_method.png: the test that is run to get the method to run.  ",Bug,Low,Closed,"2014-04-30 21:45:57","2014-04-30 21:45:57",3
"Atlassian Clover","Clover safeEval method is imcompatible with Groovy's @CompileStatic annotation","When trying to use Clover on a Groovy class that is marked @CompileStatic and it contains a null-safe operator (e.g. Bar bar = foo?.bar), then the groovyc compilation fails with the error:     No such property: bar for class: java.lang.Object    The error is that the generated  method returns an Object instead of the type of the property. This then causes Groovy compiler to fail later.    I've created a sample project that exhibits the problem at https://github.com/johnrengelman/clover-grooyv-compilestatic    Simply run     ",Bug,Medium,Closed,"2014-04-18 19:30:45","2014-04-18 19:30:45",3
"Atlassian Clover","change historical report","scope: header, footer, tables with added and movers,     optionally, put charts in some boxes",Suggestion,,Closed,"2014-04-14 13:34:19","2014-04-14 13:34:19",1
"Atlassian Clover","Invalid instrumentation code for test methods inside anonymous inline classes","Clover generates incorrect reference to the static field  __CLR3_2_2_TEST_NAME_SNIFFER in case when a test method is declared inside   an inner (static or non-static) or inside an anonymous inline class, which are located inside a non-test top-level class.     In such case, the top-level class doesn't have the __CLR3_2_2_TEST_NAME_SNIFFER field (as it's not a test class), but inner/inline classes (which are test ones) are trying to access this field.         Code example:        ",Bug,Medium,Closed,"2014-04-10 13:30:52","2014-04-10 13:30:52",2
"Atlassian Clover","Double instrumentation error when running 'mvn site' on JDK8","Run 'mvn clean site' on the src/it/setTestFailureIgnore project using the JDK8 and Maven 2.2.1. It fails with an error:        The same site goal works correctly under JDK7.  ",Bug,Medium,Closed,"2014-03-31 10:42:09","2014-03-31 10:42:09",1
"Atlassian Clover","Maven clover2:setup triggers duplicate class exception","We have several maven projects that have more than one source directory. The non-default directories are added using the build-helper plugin. The clover2:setup goal instruments all source folders, but then sets all non-generated directories as source folders on the maven project. That results in compile errors, since source files are both present in the clover instrumented sources and original location.    Example:  java/src << 1. default source folder  java/src-build << 2. additional source folder  target/generate-sources/jaxb << 3. generated source folder    Case (2) is causing problems.",Bug,Medium,Closed,"2014-03-27 23:02:12","2014-03-27 23:02:12",3
"Atlassian Clover","Maven clover2:setup ignores generated sources","We have several maven projects that contain only generated sources (target/generated-sources/...). The default source directory does not exist for those projects. clover2:setup does not work properly for those projects: the generated sources do not get compiled. We currently work around the issue by creating a marker file in the default source directory.",Bug,Low,Closed,"2014-03-27 22:59:01","2014-03-27 22:59:01",1
"Atlassian Clover","Maven plugin sholud handle target/generated-test-sources","The AbstractInstrumenter recognizes only the target/generated-sources path:        It shall also detect the target/generated-test-sources.",Suggestion,,Closed,"2014-03-27 10:03:03","2014-03-27 10:03:03",1
"Atlassian Clover","Rename com.cenqua to com.atlassian","Rename all references to Cenqua to Atlassian. It affects:   * java packages - com.cenqua.* and com_cenqua_clover (/)   * Clover-for-Eclipse plugins and features (/)   * com.cenqua.clover:clover artifact (clover core) (/)    Optional:    Rename also Clover-for-Maven plugin from 'maven-clover2-plugin' to 'clover-maven-plugin'.     (x) The maven plugin will not be renamed. Reason? Typing 'mvn clover:setup' in a project where clover-maven-plugin is not explicitly defined in pom.xml causes that Maven resolves the 'clover:setup' as 'com.atlassian.maven.plugins:maven-clover-plugin:maven-plugin:3.7' which is wrong. So it will be very confusing for customers.    ",Suggestion,,Closed,"2014-03-26 10:45:00","2014-03-26 10:45:00",3
"Atlassian Clover","Several tests fail with Cannot cast object ... to class 'com_cenqua_clover.CoverageRecorder'","See here for a travis build exhibiting this problem:    https://travis-ci.org/thehyve/transmart-core-db/jobs/21220075    19 tests there fail because of this problem. The culprit seems to be this line: https://github.com/thehyve/transmart-core-db/blob/5e8f0400b9ddce75e1d3d2adccf747e42bff3ee6/src/groovy/org/transmartproject/db/dataquery/clinical/TerminalConceptVariablesTabularResult.groovy#L39",Bug,Medium,Closed,"2014-03-21 00:29:27","2014-03-21 00:29:27",3
"Atlassian Clover","ClassNotFoundException when running tests in IDEA 13.1 RC with Clover enabled","Install IDEA 13.1 RC and Clover 3.2.2. Load Java project. Create a run configuration for JUnit, select Test kind: All in package, select Before launch: Make.    Run tests with Clover disabled - all tests are executed.     Run tests with Clover enabled - all tests are executed, but after second and next runs - ClassNotFoundException on a test class occurs. ",Bug,High,Closed,"2014-03-12 20:20:23","2014-03-12 20:20:23",2
"Atlassian Clover","native2ascii error converting i18n bundles for plugin","When running with -clover.on in our CI environment (TeamCity), we are getting a weird error:    Error native2ascii error converting i18n bundles for plugin [xxxx] java.lang.reflect.InvocationTargetException    It's not constrained to a single plugin, typically it lists different plugins. The full stack trace is:        Running without -clover.on removes this problem. ",Bug,Medium,Closed,"2014-02-27 21:46:00","2014-02-27 21:46:00",2
"Atlassian Clover","clover-for-grails plugin is not working with grails.project.fork","Hello,  When I run the grails test-app command in grails 2.3.5. I get the following error:      ",Bug,Low,Closed,"2014-02-21 18:56:59","2014-02-21 18:56:59",2
"Atlassian Clover","///Clover:OFF does not work with lambdas","The following piece of code fails to be instrumented    Results in    [ERROR] /Users/<USER>workspace/cake-container/cake-container/cake-container-impl/target/clover/src-instrumented/org/cakeframework/internal/container/handler/Foo.java:[28,58] cannot find symbol    symbol:   variable __CLR3_2_2133133hrrnhz2t    location: class org.cakeframework.internal.container.handler.Foo",Bug,Low,Closed,"2014-02-17 11:22:08","2014-02-17 11:22:08",2
"Atlassian Clover","Fix uncheched warnings for code instrumented by Clover","Follow up of CLOV-1399:    {quote}  I tried it with 3.2.2 same issue for every instrumented class.  [WARNING] /Users/<USER>workspace/cake-container/cake-container/cake-container-api/target/clover/src-instrumented/org/cakeframework/container/RuntimeContainerException.java:[24,758] unchecked cast  required: I  found: java.lang.Object    It is this generated line that generates the warning:    return (I) java.lang.reflect.Proxy.newProxyInstance(l.getClass().getClassLoader(), l.getClass()  .getInterfaces(), h);    It can be solved by adding a @SuppressWarnings(unchecked) to the instrumented file:    @SuppressWarnings(unchecked)  public static <I, T extends I> I lambdaInc(final int i, final T l, final int si)  {........}   {quote}",Bug,Low,Closed,"2014-02-10 09:38:12","2014-02-10 09:38:12",2
"Atlassian Clover","Test spock with XML importing","Test how the <clover-report> can be used together with:   * Spock Spec classes with @Unroll    * test results imported from an external XML file    Purpose of test:    * check if runtime test names recorded by Clover matches test names reported by Spock     Outcome:   * document whether it works (and how) or not",Suggestion,,Closed,"2014-02-10 09:15:26","2014-02-10 09:15:26",2
"Atlassian Clover","Test spock under gradle","We don't support Gradle. However, it's worth checking how our Spock works (or not :-) ) with open-source gradle clover plugins available.    To do:    * prepare a sample app with a build.gradle script   * integrate Clover into it using the https://github.com/bmuschko/gradle-clover-plugin    * check if spock instrumentation works here   * publish results on CAC as a developer guide  ",Suggestion,,Closed,"2014-02-10 09:10:05","2014-02-10 09:10:05",3
"Atlassian Clover","Add possibility to configure <profiles> in Eclipse and IDEA IDEs","The <clover-setup> and <clover-instr> tasks allow to define <profiles> section, where we can select coverage recorder type etc. There's no possibility to configure it in Clover-for-Eclipse and Clover-for-IDEA plugins.",Suggestion,,Closed,"2014-02-10 08:30:11","2014-02-10 08:30:11",5
"Atlassian Clover","Tree map report has an empty line in context menu","Open TreeMap report in IDEA, right click on a class, a context menu is opened which has an empty first line:    !jump_to_source.png!  ",Bug,Low,Closed,"2014-02-07 10:26:41","2014-02-07 10:26:41",2
"Atlassian Clover","Clover Grails Plugin fails when tests are launched from IDEA","Steps to reproduce:   * import Grails-based project into IntelliJ IDEA    * add Clover Grails plugin to the project   * run *forked* tests from IDEA    Build fails with an error like:        Workaround:   * disable forked test execution in IDEA    Probable cause:    IDEA does not call grails test-app but executes the  GrailsScriptRunner, e.g.:        The most probably this runner does not import the _GrailsTest.groovy, which contains a definition of the testNames property.",Bug,Medium,Closed,"2014-01-31 09:40:15","2014-01-31 09:40:15",2
"Atlassian Clover","Use more unique property names in clover.xml","The clover.xml contains the following properties:        Their names are not very unique so there's some chance that developer could actually use similar ones in his project. This may lead to clash an Ant properties are not read-only once set.     Use more distinct names, e.g. clover.project.name.     Update documentation on CAC accordingly. ",Bug,Low,Closed,"2014-01-30 12:58:42","2014-01-30 12:58:42",2
"Atlassian Clover","Clover plugin doesn't load on IDEA 13 Startup","  ",Bug,Medium,Closed,"2014-01-30 08:49:09","2014-01-30 08:49:09",2
"Atlassian Clover","Create an API for plugging custom I/O handler","Currently Clover uses a standard Java IO/NIO libraries to read from and write to: a coverage database, coverage recording files (global and per-test), test optimization snapshots.     This is not sufficient when user want to run an application on a custom file system, such as Apache HDFS.    Provide an API which would allow to provide a custom IO handler.       Scope:   * writing coverage files (global and per-test)   * reading/writing database (optional - we deal a lot with file channels which might be a problem; a growable coverage recorder can be used at runtime instead of this)   * writing optimization snapshot (optional - not everyone uses test optimization)    References:   * https://answers.atlassian.com/questions/255286/does-clover-support-to-read-and-write-clover-db-and-coverage-recording-files-from-hdfs   * https://answers.atlassian.com/questions/48360/how-can-i-get-functional-test-code-coverage-reports-for-mapreduce-program",Suggestion,,Closed,"2014-01-28 07:30:42","2014-01-28 07:30:42",8
"Atlassian Clover","Transitive dependency resolution fails in Grails 2.3 during installation of the Clover plugin","Since Grails 2.3 sth has changed in the dependency resolution mechanism. As a consequence, when the Clover plugin is being installed for a first time, the transitive dependency to com.cenqua.clover:clover is not resolved and this jar is not available on class path.     As a consequence build fails when it tries to import cloverlib.xml.    Workaround: define a dependency to com.cenqua.clover:clover in BuildConfig.groovy (or in pom.xml)  - in the very same way as it was made in Clover-for-Grails 3.1.12 or older under the Grails 2.2.    Fix:    1) reconfigure dependencies.groovy  / pom.xml ?     2) roll back to a previous approach - i.e. merge clover-grails1 branch into default, produce one plugin version, rollback documentation",Bug,Low,Closed,"2014-01-23 14:49:46","2014-01-23 14:49:46",1
"Atlassian Clover","Integration tests are not being instrumented in Grails 2.3","Clover does not instrument integration tests in Grails 2.3.     Caused by:   * new GrailsIntegrationTestCompiler wrapper introduced in Grails 2.3.0 is not being recognized by Clover as a Groovy compiler   * GrailsTestRunner calls Groovy compiler internally and this compiler does not have grover.jar on a classpath, thus Clover AST transformer is not called    Todo:   * check how to recognize/pass inclusion/exclusion patterns to the internal compiler of GrailsTestRunner    Workaround:   * not available",Bug,Medium,Closed,"2014-01-20 21:13:26","2014-01-20 21:13:26",3
"Atlassian Clover","JDK8 sources fail to compile when instrumented by Clover","See the attached comparison of original and instrumented code:    [^unicode_decoding_error.png]    A problem is as follows:   * Clover has a UnicodeDecodingReader class which translates 6-letter character sequences \uNNNN into a single UTF16 character   * this is used to correctly tokenize code identifiers (IDENT) written in non-ascii characters (a variable with German umlaut for instance)    In this specific example, some \uNNNN sequences were translated inside comments, and some characters were swallowed. So for instance a fragment:        ends with java: illegal unicode escape.    Related issues:   * CLOV-1305 - syntax highlighting problem   * CLOV-1131 - Eclipse/IDEA editors get out of sync  ",Bug,Medium,Closed,"2014-01-17 10:02:53","2014-01-17 10:02:53",3
"Atlassian Clover","chage test result labels to lozenges","pass / fail / error test statuses shall be changed to Subtle lozenges:    https://developer.atlassian.com/design/1.2/lozenges.html  ",Suggestion,,Closed,"2014-01-15 13:20:58","2014-01-15 13:20:58",1
"Atlassian Clover","change classes/tests/results bottom left frame","Change this:    !classes_tests_results.png!    Scope:   * add a title: https://developer.atlassian.com/design/1.2/typography.html   * use tabs: https://developer.atlassian.com/design/1.2/tabs.html   * use sortable table: https://developer.atlassian.com/design/1.2/tables.html ",Suggestion,,Closed,"2014-01-15 13:18:27","2014-01-15 13:18:27",2
"Atlassian Clover","change cloud tabs","The Package risks and Quick Wins tabs:    !cloud_tabs.png!    should have an ADG tabs look:    https://developer.atlassian.com/design/1.2/tabs.html    ",Suggestion,,Closed,"2014-01-15 13:08:55","2014-01-15 13:08:55",1
"Atlassian Clover","change page footer look","This: [^page_footer.png]  should look like this:    https://developer.atlassian.com/design/1.2/page-footer.html  ",Suggestion,,Closed,"2014-01-15 13:02:52","2014-01-15 13:02:52",1
"Atlassian Clover","change dashboard boxes look","This: [^dashboard_boxes.png] should look like this:    https://developer.atlassian.com/design/1.2/containers.html",Suggestion,,Closed,"2014-01-15 12:59:45","2014-01-15 12:59:45",1
"Atlassian Clover","change small class histogram into container","similarly as for coverage statistics    put into a box:  https://developer.atlassian.com/design/1.2/containers.html    this:  !small_histogram.png!",Suggestion,,Closed,"2014-01-15 12:56:56","2014-01-15 12:56:56",1
"Atlassian Clover","change contributing tests table to TablesSortable etc","Change a table with contributing tests:  !contributing_tests.png!    To do:   * table into TableSortable   * Show/hide tests label into expander   * Select all/deselect all labels into single master toggle   * remember about highlighting of lines of code and class' methods in a table",Suggestion,,Closed,"2014-01-15 12:53:12","2014-01-15 12:53:12",5
"Atlassian Clover","change package and class list tables into TablesSortable","Change this (project summary, package summary):    !package_and_class_list.png!    into a sortable table like this:    https://docs.atlassian.com/aui/latest/sandbox/#",Suggestion,,Closed,"2014-01-15 12:38:03","2014-01-15 12:38:03",2
"Atlassian Clover","change project/package statistics to the boxed component","Change this:    !package_summary.png!    Move it under a horizontal navigation (on overview tab for instance). Keep it as a boxed component (div grid). ",Suggestion,,Closed,"2014-01-15 12:33:41","2014-01-15 12:33:41",2
"Atlassian Clover","The clover2:clover goal does not pass the sourcepath property to underlying <clover-report> task","*Original problem from the cloned issue:*    {quote}  Clover database contains FileInfo objects for every source file. One of FileInfo fields is an absolute path to given file. When database is written, it uses current platform file separator for file name ('\' for windows, '/' for Linux/MacOS). However, when database is read it interprets file name using again current platform file separator.     As a consequence, when database is generated on Windows and report generated on Linux, it cannot resolve file name properly - it takes whole path as a single path segment, resulting in paths like:    /path/from/report/generation/sourcepath/D:/path/from/instrumented/build/file.java    As a consequence report generation does create html file containing source code with highlighted coverage.  {quote}    *Problem with the clover2:clover goal:*    The clover2:clover call <clover-report> using a default report descriptor (which is located in the maven-clover2-plugin-X.X.X.jar/default-clover-report.xml). This report descriptor has a reporting defined like:    {code:xml}  <current outfile=${output} summary=${summary}                       charset=${charset} title=${title} titleAnchor=${titleAnchor}                       span=${span} alwaysReport=${alwaysReport}                       showInnerFunctions=${showInnerFunctions} showLambdaFunctions=${showLambdaFunctions}>     <format refid=clover.format/>     <testsources refid=test.sources/>     <columns refid=clover.columns/>  </current>  {code}    i.e. there is no <sourcepath> property.     Possible fix #1:     * add the <sourcepath> property   * set it's value to a list of standard source roots, similarly as it's done for <testsources> tag    _excerpt from the CloverReportMojo:_  {code:java}  antProject.setProperty(testPattern, **/src/test/**);  {code}    _excerpt from the default-clover-report.xml:_    {code:xml}  <fileset id=test.sources dir=${projectDir}>    <include name=${testPattern}/>  </fileset>  ...  <testsources refid=test.sources/>  {code}    so it could be like this:  {code:java}  antProject.setProperty(sourceRootsPattern, **/src/test/*;**/src/main/*);  ...  {code}    (!) potential problem: build may have source roots different than src/test/xxx and src/main/xxx; in such case sources would not be found; it means that settings this <sourcepath> property should be optional; it could be done via boolean flag    Possible fix #2:   * add the <sourcepath> property to the clover2:clover goal   * if it's not null then pass it's value to the <sourcepath> property in the <clover-report> goal in the report descriptor    (!) potential problem: how developers could easily find all source roots in all modules in their maven project in order to pass it as the property?   ",Bug,Medium,Closed,"2014-01-15 06:16:45","2014-01-15 06:16:45",2
"Atlassian Clover","as a developer I expect that Clover will automatically configure IntelliJ IDEA compiler settings","Since IDEA12 a new external build feature has been introduced. It has also an option to perform parallel build (Settings > Compile > Build independent modules in parallel toggle), however Clover does not support parallel instrumentation (see CLOV-1284).     Clover should automatically disable the parallel build toggle whenever compilation starts (it can notify about this fact by a baloon), otherwise it will throw various runtime exceptions during compilation.",Suggestion,,Closed,"2014-01-13 14:13:49","2014-01-13 14:13:49",1
"Atlassian Clover","Use ADG-compliant colour set for widgets","Replace existing colours by those recommended by ADG:   * https://developer.atlassian.com/design/latest/colors.html    Scope:   (/) tree map    (/) cloud view   (/) coverage bars (dashboard, package/class/file summary)   (/) test results bars (dashboard, test results pages)   (/) coverage markers on the page margin   (/) class coverage distribution / class complexity diagrams (use Blue from ADG)    (/) colours of hyperlinks  ",Suggestion,,Closed,"2014-01-13 13:40:43","2014-01-13 13:40:43",1
"Atlassian Clover","Add radio button style=adg/classic in eclipse and idea IDEs","optional: add radio button in reports wizards    alternatively: use the default one (ADG) ",Suggestion,,Closed,"2014-01-13 11:36:30","2014-01-13 11:36:30",1
"Atlassian Clover","Add report style=adg/classic options for Ant, Maven, Grails","scope: ant, maven, grails plugins  new toggle, default adg, pass to HtmlReporter",Suggestion,,Closed,"2014-01-13 11:34:16","2014-01-13 11:34:16",2
"Atlassian Clover","Split velocity templates to 2 sets: adg and classic","make a copy of original templates    extend HtmlReporter and add option to choose one of them, e.g.:    HtmlReporter -style classic/adg    ADG is the default one",Suggestion,,Closed,"2014-01-13 11:32:38","2014-01-13 11:32:38",2
"Atlassian Clover","As a developer I'd like to see JUnit Parameterized tests in the report","Similarly to the Spock framework (CLOV-1256) I'd like to see runtime test names from the JUnit4 parameterized tests. Example:        ",Suggestion,,Closed,"2014-01-13 11:27:04","2014-01-13 11:27:04",5
"Atlassian Clover","URISyntaxException from Clover IDEA plugin under IDEA13 on Mac OS X",,Bug,Medium,Closed,"2014-01-11 11:36:16","2014-01-11 11:36:16",2
"Atlassian Clover","Source highlighting label is cropped in the settings dialog","Project Settings > Clover > View    Out of date labels are cropped    [^project_settings_clover.png]",Bug,Low,Closed,"2014-01-02 21:20:56","2014-01-02 21:20:56",2
"Atlassian Clover","Cloverage view layout is crappy with the Coverage Summary panel","1. Not all buttons are visible by default.     2. Width/height proportion which triggers a change between horizontal/vertical layout is not set correctly. As a result we've got a crappy behavior as on the following screen shot:    !cloverage_view_layout.png!",Bug,Low,Closed,"2014-01-02 20:57:01","2014-01-02 20:57:01",2
"Atlassian Clover","Clover fails to instrument generic type with a constructor reference","This works fine:    {code:java}  myLambda = ArrayList::new;   // javac error since JDK8 b114  myLambda = ArrayList::<String>new;  {code}    But the following:    {code:java}  myLambda = ArrayList<String>::new;  myLambda = ArrayList<String>::<String>new;  {code}    fails with a parser error:        ",Bug,Medium,Closed,"2014-01-02 14:21:20","2014-01-02 14:21:20",8
"Atlassian Clover","Java 1.8 compilation fails when lambda is passed to a generic argument","The following piece of code fails to be instrumented    Javac gives the following error message:    [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:compile (default-compile) on project cake-util: Compilation failure: Compilation failure:  [ERROR] /Users/<USER>workspace/CAKE/cake-util/cake-util/target/clover/src-instrumented/org/cakeframework/internal/util/tree/Fails.java:[27,67] reference to depthFirstTraversal is ambiguous  [ERROR] both method <S>depthFirstTraversal(java.lang.Class<S>) in org.cakeframework.internal.util.tree.Fails and method depthFirstTraversal(java.util.function.Predicate<? super N>) in org.cakeframework.internal.util.tree.Fails match  [ERROR] /Users/<USER>workspace/CAKE/cake-util/cake-util/target/clover/src-instrumented/org/cakeframework/internal/util/tree/Fails.java:[27,86] incompatible types: cannot infer type-variable(s) I,T  [ERROR] (argument mismatch; java.lang.Class is not a functional interface)  [ERROR] -> [Help 1]",Bug,High,Closed,"2013-12-19 07:44:56","2013-12-19 07:44:56",3
"Atlassian Clover","Java 1.8 Exceptions not being propagated correctly","I have the following test stub (src/main/java)    {code:java}  public final class TestStub {      TestStub() {          throw new IllegalArgumentException();      }        public static void getHandler() {          new HashMap<>().computeIfAbsent(String.class, t -> new TestStub());      }  }  {code}    And the following test (src/test/java)    {code:java}  public class FooTest {        @Test(expected = IllegalArgumentException.class)      public void test0() {          TestStub.getHandler();      }  }  {code}    Using maven It runs fine using clean install however using clover I get the following exception        If I replace with a standard anonymous class implementing java.util.function.Function it runs fine",Bug,High,Closed,"2013-12-18 22:18:42","2013-12-18 22:18:42",3
"Atlassian Clover","Java+Groovy compilation fails with Clover enabled in IntelliJ 12.1.x","When building my project in IntelliJ the build fails with the following exception. I saw a couple other similar comments about how using an external build can cause problems but I thought this was fixed with Clover 3.2? If I turn off the external build then the compilation does succeed. The project is a combined Java/Groovy project if that matters. Let me know if you need any more details.          {panel:title=Problem summary|bgColor=yellow}  This bug occurs when all of the following conditions are met:   * IDEA 12.1.1 or later is used   * Clover 3.1.12 or later is used    * an external build feature is enabled (Settings > Compiler > Use external build)   * project has a mixed Java + Groovy code    It's an IDEA bug - http://youtrack.jetbrains.com/issue/IDEA-110835 - and has been fixed in IDEA13.     Therefore:   * in IDEA 12.x - disable the external build feature   * in IDEA 13.x - problem does not occur  {panel}  ",Bug,Medium,Closed,"2013-12-16 19:02:44","2013-12-16 19:02:44",13
"Atlassian Clover","No such property: testTargetPatterns exception with Grails 2.3","Unable to use Clover-for-Grails with Grails 2.3. Build fails with an exception:    *Reason:*  In the Grails 2.3 the _GrailsTest.groovy has been refactored into GrailsProjectTestRunner and GrailsProjectTestCompiler. The testTargetPatterns property has been removed.    *Probable fix:*  Replace testTargetPattern by iterator over testNames. ",Bug,High,Closed,"2013-12-05 12:01:55","2013-12-05 12:01:55",2
"Atlassian Clover","IDEA13 compatiblity issues","Compatiblity issues of Clover-for-IDEA with the latest IDEA13:    1) Attempt to load a license key from a file (About Clover box > License button > Load) fails with an error:        2) Compilation of the project with Clover enabled fails with compilation error package com_cenqua_clover does not exist. The most probably Clover fails to add clover.jar to project's class path.          3) There is no option to enable/disable external build feature. It seems that the classic build functionality has been removed in IDEA13.    ",Bug,Highest,Closed,"2013-12-05 07:52:15","2013-12-05 07:52:15",13
"Atlassian Clover","review ADG page layout in the HTML report","review layouting of various components on the page and an interaction between them",Suggestion,,Closed,"2013-12-02 14:12:24","2013-12-02 14:12:24",1
"Atlassian Clover","as a code reviewer I'd like to see ADG fonts and colours in the HTML report",,Suggestion,,Closed,"2013-12-02 14:11:47","2013-12-02 14:11:47",40
"Atlassian Clover","clover intrumented testcode with PersitenceConstructor and parameters fails ","If the integration tests running without clover instrumentation the test works fine, but with clover instrumentation the one test will fail.          its seem to be a problem with follow declaration    ",Bug,Medium,Closed,"2013-11-18 15:05:28","2013-11-18 15:05:28",1
"Atlassian Clover","Instrumentation of a branch condition with a generic type leads to javac compilation error","*For a declaration like this:*  {code:java} public <T> T getFeatureValue(); ... if (client.getFeatureValue()) { {code}  the instrumented line gets instrumented like:  {code:java} _CLR3_1_113f23f2hnz3nmqe.R.inc(5146);if ((((client.getFeatureValue())&&(CLR3_1_113f23f2hnz3nmqe.R.iget(5147)!=0|true))||(_CLR3_1_113f23f2hnz3nmqe.R.iget(5148)==0&false))) {{ {code}  which leads to compilation error:    *Reason:*  Javac performs autoboxing of the if condition. However it cannot deal properly if the same generic value is used with && or || operators. It looks like if javac wraps the entire if condition, not a single element.   Look at the example:    *Workaround:*  Don't rely on boolean autoboxing and change a generic type to Boolean.   or  Extract expression being autoboxed to a local variable and evaluate before if. Use the variable in if.    or  surround problematic code block with ///CLOVER:OFF and ///CLOVER:ON inline comments (note that three slashes are used)",Bug,Medium,Closed,"2013-11-14 09:13:11","2013-11-14 09:13:11",13
"Atlassian Clover","as a developer I'd like to have Spock @Unroll annotation being recognized by Clover","The  annotation causes that a test name will be unrolled for every combination of test data. It means that we can have multiple tests having different name, which in fact are related with exactly the same test method, but ran with different input arguments.     Examples (from http://docs.spockframework.org/en/latest/data_driven_testing.html):          Problem for Clover: we don't know neither a number of tests nor their names during compilation. it would have to be deferred to runtime.     => add some inner class for a test class which would monitoring the test name and somehow pass to the per-test coverage recorder?  ",Suggestion,,Closed,"2013-11-06 14:11:32","2013-11-06 14:11:32",20
"Atlassian Clover","Clover integration with Bamboo - enhancements","*THIS EPIC IS OPTIONAL*    There is a number of open issues in Bamboo JIRA project related with a Clover plugin. Sorted by importance (in my opinion):     * BAM-13564 (Remove the $\{buildKey\} from Clover plugin URLs)   * BAM-12852 (Add Clover tab for Build Summary page)   * BAM-13404 (Use BuildConfig's DSL to install Clover plugin)   * BAM-13208 (Improve Automatic Clover integration for multi-module maven builds)   * BAM-13610 (Facilitate Clover configuration for plans using automatic Clover integration)   * BAM-13786 (Test Coverage History drops to zero on days with no tests)   * BAM-12118 (Perform cleanup of clover_fs_rez* and grover*jar files)   * BAM-13787 (Allow Clover test coverage history duration be customized for the graph)   * BAM-11590 (Add job failure based on coverage threshold for Clover plugin)      TODO: check which ones could be implemented for this release.     ",Suggestion,,Closed,"2013-11-06 12:55:45","2013-11-06 12:55:45",40
"Atlassian Clover","Perform Scala spike","This task is time-boxed to 5 days. Take a look at:  * our Scala prototype  * SCCT  * Scoverage  to learn how instrumentation could be implemented. Expected outcome:  * knowledge how scalac works (compilation phases, AST structure, plugging into it)  * detailed list of tasks required  * task estimation  * prioritisation",Suggestion,,Closed,"2013-11-06 11:21:15","2013-11-06 11:21:15",5
"Atlassian Clover","Fully qualified java.lang is not used for system properties in Clover.getRecorder ","Generated code:      ",Bug,Medium,Closed,"2013-11-04 09:26:30","2013-11-04 09:26:30",2
"Atlassian Clover","Add lambda toggle to report wizards in Eclipse and IDEA","Add toggles for showInnerFunctions and showLambdaFunctions in report wizards in Eclipse and IDEA plugins. Toggles shall be visible for HTML and XML reports.     Consider using a drop down show lambda functions:   - NONE (inner=false, lambda=false)   - FIELDS ONLY (inner=false, lambda=true)   - FIELDS AND METHODS (inner=true, lambda=true)  ",Suggestion,,Closed,"2013-10-30 21:54:21","2013-10-30 21:54:21",2
"Atlassian Clover","Add showInnerFunctions and showLambdaFunctions to clover2:setup","Command line tools and a <clover-report> Ant task have these options.     Add:    showInnerFunctions=false   showLambdaFunctions=false    to CloverReportMojo. Pass these values to a report descriptor. Define such values also in the default descriptor (clover-report.xml).",Suggestion,,Closed,"2013-10-30 21:48:34","2013-10-30 21:48:34",1
"Atlassian Clover","Create API for handling optimization snapshot","*See:*   * [Hacking Clover / Updating optimization snapshot file|https://confluence.atlassian.com/display/CLOVER/Updating+optimization+snapshot+file]   * [src/it/optmized/snapshot-hacking|https://bitbucket.org/atlassian/maven-clover2-plugin]    *Problem:*    Internal classes are used to manipulate snapshot.        *Fix:*    Create proper interfaces/classes in c.a.c.api.optimization  ",Suggestion,,Closed,"2013-10-30 21:41:24","2013-10-30 21:41:24",8
"Atlassian Clover","Create API for handling coverage recording files","*Problem:*    Currently there's no API which would allow to create a global recording or a per-test recording file. Such API would be useful, e.g. for conversion of coverage data from other tools such as Cobertura or Emma.     *Fix:*   - publish global and per-test recording file format on CAC (including naming convention for files)   - expose class for global coverage file (equivalent of FileBasedGlobalCoverageRecording)    - expose class for per-test coverage file (equivalent of FileBasedPerTestRecording)  ",Suggestion,,Closed,"2013-10-30 21:31:34","2013-10-30 21:31:34",8
"Atlassian Clover","Interfaces and a template class for handling instrumentation sessions","*Problem:*      * We need some concrete classes in the API to perform the instrumentation. At the moment we have an InstrumentationSession interface but no way to get an instance of this!    * We need a way in the API to construct a MethodSignatureInfo (same problem as InstrumentationSession).    In order to update content of a database and store new instrumentation session a number of internal classes must be used, e.g.:          *Fix:*   - move MethodSignature, Modifier, Modifiers, Parameter to API   - create factory for FixedSourceRegion, ContextSet    - enterMethod (and others) shall use ContextSet from API  ",Suggestion,,Closed,"2013-10-30 21:19:35","2013-10-30 21:19:35",3
"Atlassian Clover","Interfaces and factory methods for loading Clover database","*Problem:*    Database entities are already in c.a.c.api.registry package.     However, in order to load the database you have to call an inner class, for example:        *Fix:*    Create proper interfaces and a factory hiding the CoverageDataSpec and CloverDatabase. ",Suggestion,,Closed,"2013-10-30 21:11:23","2013-10-30 21:11:23",1
"Atlassian Clover","Change signature of getXyz() methods in HasXyz interfaces","Current signatures have <? extends X>, for example:        This works fine for Clover's internal data structures (as there are subclasses), but it's not usable by developers using this API. It should be possible to have an assignment like:        Fix: change to <? super X>.     Note: We may need to expose additional methods in interface. They could throw Exception(not implemented) or return nulls.",Suggestion,,Closed,"2013-10-30 21:06:09","2013-10-30 21:06:09",3
"Atlassian Clover","Extend API for loading and manipulate coverage files ","Clover 3.2.0 published new interfaces describing a database model (com.atlassian.clover.api.registry). We need to reveal more Clover stuff via API in order to make it more usable by other developers.    For example:   * loading database and coverage files, handling instrumentation sessions   * manipulating coverage files",Suggestion,,Closed,"2013-10-30 21:01:30","2013-10-30 21:01:30",8
"Atlassian Clover","as a developer I don't need to run Clover on JDK1.5 anymore","*Idea:*    Sun Java 1.5 has:   * end of public updates - Oct 2009   * end of Premier Support - May 2011   * end of Extended Support - May 2015   * see http://www.oracle.com/technetwork/java/eol-135779.html    IBM Java 1.5:   * its End Of Servcie (EOS) will expire on September 2015   * see https://www.ibm.com/developerworks/java/jdk/lifecycle/    According to various sources, most popular are Java6 and Java7 with Java8 growing up; Java1.5 has a fraction of market right now:   * http://www.statowl.com/java.php   although the report above shows Java version in web browser. Production environment may be different (especially regarding IBM Java).    *Benefits:*    Dropping support for Java 1.5 would improve Clover development, as we could:   * use @Override for interfaces   * use newer version of Guava (we're on Guava 9 (!) due to required JDK1.5 binary compatibility)   * have all Clover modules and plugins on the same JDK level   ** Groovy/Grails require JDK6+ to compile and execute   ** Clover-for-IDEA (IDEA12 JPS) requires JDK6+ to compile and execute   ** rest is on JDK5    *Tasks:*     * update Supported-Platforms page   * update guava library (and all others which are compiled against jdk6)   * update build scripts   * affects Clover Core, Clover-for-Ant, Clover-for-Maven2&3, Clover-for-Eclipse, Clover-for-IDEA, Clover-for-Grails       *Out of scope:*     * adding Override annotations - this will be done gradually during daily development    ",Suggestion,,Closed,"2013-09-27 07:00:32","2013-09-27 07:00:32",1
"Atlassian Clover","as a developer I'd like to use test optimization for spock-based tests","Follow up of the CLOV-1256    As a I developer I would like to have an ability to use Clover's test optimization feature for tests written in the Spock framework in order to speed up my test cycle.     ",Suggestion,,Closed,"2013-09-02 11:51:42","2013-09-02 11:51:42",53
"Atlassian Clover","Ensure that reports show the test name and not the method name","Make sure that HTML, XML, PDF, JSON reports will display the test name (like my test name taken from def) rather than the actual name of test method (like $spock_feature). ",Sub-task,Low,Closed,"2013-09-02 10:11:55","2013-09-02 10:11:55",8
"Atlassian Clover","Add Spock test name patterns in default test detector ","Clover's default test detector should properly recognize Spock-framework test classes and which methods are test ones and which are helper ones. We shall not see stuff like this in the test summary:      ",Sub-task,Medium,Closed,"2013-09-02 10:04:25","2013-09-02 10:04:25",8
"Atlassian Clover","Implement test name to method name mapping in Clover","Based on the investigation results from CLOV-1360 write proper mapping in Clover so that we could keep original names of test cases in Clover database (like my test name instead of $spock_feature_1).     And these tests should properly link to appropriate sections in source code - for instance in order to allow navigation in HTML report from test result to the test class source code.",Sub-task,Medium,Closed,"2013-09-02 10:01:11","2013-09-02 10:01:11",13
"Atlassian Clover","Analyse how tests are converted by Spock ","Analyse how a test named like:        is converted to a method like:        It's being done during AST transformation I guess.     Check how it's possible to either:   * reverse engineer this behaviour i.e. get a back-ward mapping $spock_feature_1_0 -> def my test name or   * reproduce this behaviour, i.e. instrument methods in such order/way that Clover could 'calculate' the same method name   ",Sub-task,Low,Closed,"2013-09-02 09:56:51","2013-09-02 09:56:51",13
"Atlassian Clover","Fix test optimization and check all class versions","Depends on CLOV-1358    Test optimization should scan for hit count indexes of all versions of given class. This is necessary in order to workaround the problem of the groovyc compiler which resolves some of symbols at runtime and thus it does not always recompile test class if application class is not changed. ",Sub-task,Low,Closed,"2013-09-02 09:51:59","2013-09-02 09:51:59",13
"Atlassian Clover","Enhance Clover database to keep full instrumentation history","*Problem:*    Currently Clover database keeps list of instrumentation sessions plus information about classes which is a sum of all previous instrumentation sessions in such way that for given class only the latest class version is stored.     There are two limitations of current design:    1) Test optimization might not work correctly for some test frameworks for Groovy language. This is due to nature of the Groovy language itself, where compiler allows to compile code which does not have all symbols resolved (they're being resolved at runtime). As a consequence if a dependent application class is changed, this does not to have trigger recompilation of the test class. See comment for more details.     2) Syntax highlighting in HTML report is always based on the latest class version, so if someone has older source file, it can be rendered incorrectly. There's a warning for this in HTML report, but we could fetch the actual line/char indexes from the older class version.    *Solution:*    1) Enhance UpdateableRegFile and keep all versions of classes. This should be optional and disabled by default.     2) Enhance RegFile API to allow querying for older versions of given file (by default it should always return the latest version).     3) Add new option for <clover-setup> and <clover-instr> to allow to keep full instrumentation history. Either as true/false or as a number (maximum number of versions of the single class to store).    4) Add API to calculate index bitset as a logical OR of bitsets from all versions of the given file or class.  ",Sub-task,Low,Closed,"2013-09-02 09:49:28","2013-09-02 09:49:28",40
"Atlassian Clover","as an administrator I need to monitor Clover usage on machines","As a system administrator I need to have a way to track down usage of Clover licenses within my organization in order to make sure that Clover is not installed or used on more machines than the license allows to. Currently there is no tool for this purpose and the only indirect way is to scan for clover license files.     One of possible solutions:   * add the environment variable which will enable tracking of clover license usage, such variable could be set on all machines in users' profiles by system administrator     * the variable would point to the URL which will collect data about license usage, e.g.:        * whenever code instrumentation or report generation is performed and the environment variable is defined, clover will connect to the specified URL using simple HTTP GET request     * it would be up to the system administrator to collect data from such HTTP GET requests (e.g. parsing apache logs, using some php script to store data in database ...)     * options of HTTP GET          Scope: clover core (would work in ant, maven, grails, eclipse, idea ...)",Suggestion,,Closed,"2013-09-02 07:29:09","2013-09-02 07:29:09",13
"Atlassian Clover","Test if syntax highlighting in html report works fine","check manually or extend existing test case",Sub-task,Low,Closed,"2013-08-30 12:28:31","2013-08-30 12:28:31",0
"Atlassian Clover","Add new grammar rules for java8 syntax","just to correctly parse new syntax, do not add clover instrumentation to these new code constructs    something like:    lambda :      ( lambdaNoArgs | lambdaImplicitTypesArgs | lambdaExplicitTypesArgs )     '->'     ( lambdaExpressionLikeStatement | lambdaCodeBlock )    plus extend the method definition and add 'default' keyword as optional; probably won't need to distinguish between method declaration in interface and in a class",Sub-task,Low,Closed,"2013-08-30 12:27:33","2013-08-30 12:27:33",3
"Atlassian Clover","Set up a Bamboo build for JDK1.8","run all clover tests, including tests of java8 syntax on JDK1.8 on Bamboo",Sub-task,Low,Closed,"2013-08-30 12:23:37","2013-08-30 12:23:37",3
"Atlassian Clover","Prepare unit tests compiling and instrumenting code samples","test:  compile code samples from CLOV-1352 using JDK1.8 javac  instrument these code samples using Clover    expected:  no instrumentation of lambdas yet, just test if files are parsed correctly",Sub-task,Low,Closed,"2013-08-30 12:22:40","2013-08-30 12:22:40",13
"Atlassian Clover","Create code samples with java8 syntax","annontations on java types  repeating annotations  lambdas  virtual extension methods",Sub-task,Low,Closed,"2013-08-30 12:20:17","2013-08-30 12:20:17",13
"Atlassian Clover","Add ADG navigation bar in the HTML report"," * probably should be optional, because we embed reports in Bamboo -> how to handle this? all links from navigation bar shall be available somewhere else?     * what to put in the nav bar? we don't have 'create issue' button for sure ;-)",Suggestion,,Closed,"2013-08-29 13:24:16","2013-08-29 13:24:16",1
"Atlassian Clover","review navigation links on a page summary","frames/no frames - deleted show help - exists on some of pages overview/package/file - moved to breadcrumbs on a page header  todo: discuss with UX designer how breadcrumbs shall show the structure, e.g.:  - shall we display report name and a project name only?  - or some main section?  - or the entire path - if so, shall we have:  Report > Project > Test/App/Clouds > Package > FIle/Class > (Test)  or something else?",Suggestion,,Closed,"2013-08-29 13:21:51","2013-08-29 13:21:51",2
"Atlassian Clover","Added LICENSES.html file to Clover artfiacts","Add the LICENSES.html file containing a table with:   * name of third party library   * link to home page (download sources / binaries)   * link to the license file    into the following artifacts:   * Clover-for-Ant ZIP   * Clover-for-Eclipse update site ZIP   * Clover-for-IDEA plug-in JAR    Note:   * there's no need to add such file in the Clover-for-Grails and Clover-for-Maven2&3, because these plug-ins do not contain any third party libraries embedded in it (just references in pom.xml / BuildConfig.groovy)    Reason for change:    * ensuring that we obey requirements imposed by various open source licences    ",Suggestion,,Closed,"2013-08-29 10:04:42","2013-08-29 10:04:42",3
"Atlassian Clover","Implicit return in Groovy switch statement is instrumented incorrectly","*Problem:*    Consider the following code:         * switch statement is the last statement in function, so it's value is being returned from a function call   * new Integer() / new String() are last statements before 'break' which is a function's exit point   * thus 10 or abc are returned    Clover instruments code as follows:         * as a consequence, the last statement before 'break' becomes recorder.inc(), which returns void; as a result the create() function returns null    *Workaround:*    Use return instead of break in a switch statement, e.g.:          *Fix:*     *  do not add recorder.inc() before 'break'; drawback of the solution: we loose tracking of empty breaks, see below.        in the code above it would be nice to have case2: case 3: recorder.inc(3); break; colored in green, despite that code makes nothing ...  ",Bug,High,Closed,"2013-08-13 10:48:45","2013-08-13 10:48:45",5
"Atlassian Clover","The <testmethod name=.*> does not match constructors","*Problem:*    If you declare custom test detector, for instance:    {code:xml}  <clover-setup>    <testsources dir=src/test/java>      <testclass name=.*>        <testmethod name=.*/>      </testclass>    </testsources>  </clover-setup>  {code}    Then the test detector does not match constructors. As a consequence, a class like this:    {code:java}  public class SomeException extends Exception {    public SomeException(String s) {       super(s);     }  }   {code}    will be treated as APPLICATION not as TEST code.    *Background reason:*    {code:java}  public boolean isMethodMatch(SourceContext sourceContext, MethodContext methodContext) {          final MethodSignature signature = methodContext.getSignature();          return methodMatches(signature.getName()) &&                  methodAnnotationMatches(signature.getModifiers()) &&                  methodReturnPatternMatches(signature.getReturnType()) &&                  methodTagMatches(signature.getTags());      }    public boolean methodReturnPatternMatches(String methodReturnType) {          return methodReturnType != null &&                  (methodReturnTypePattern == null || methodReturnTypePattern.matcher(methodReturnType).matches());      }  {code}    The methodReturnType==null for constructors, thus constructor do not match the pattern.     *Solution:*    We could rewrite check like this:    {code:java}  return methodReturnTypePattern == null ||      (methodReturnType != null && methodReturnTypePattern.matcher(methodReturnType).matches());  {code}    However, this would require entirely new handling of code instrumentation for constructors. The reason is that code would be currently rewritten like:    {code:java}  public SomeException(String s) {          __CLR3_1_12_100hjv4vvu6.R.globalSliceStart(getClass().getName(), 0);          int $CLV_p$ = 0;          java.lang.Throwable $CLV_t$ = null;          try {              __CLR3_1_12_162c4pt0(s); // <<< ORIGINAL CONSTRUCTOR              $CLV_p$ = 1;          } catch (java.lang.Throwable $CLV_t2$) {              if ($CLV_p$ == 0 && $CLV_t$ == null) {                  $CLV_t$ = $CLV_t2$;              }              __CLR3_1_12_100hjv4vvu6.R.rethrow($CLV_t2$);          } finally {              __CLR3_1_12_100hjv4vvu6.R.globalSliceEnd(getClass().getName(), SomeException.SomeException, 0, $CLV_p$, $CLV_t$);          }      }        private __CLR3_1_12_162c4pt0(String s) { // << COMPILATION FAILURE, MISSING RETURN TYPE          super(s);          __CLR3_1_12_100hjv4vvu6.R.inc(1);          __CLR3_1_12_100hjv4vvu6.R.inc(0);      }  {code}    Problems:   * call to super() must be first   * we should not move constructor body into another method  ",Suggestion,,Closed,"2013-08-02 09:51:16","2013-08-02 09:51:16",20
"Atlassian Clover","Warn if directory selected on Test Classes tab is disabled on Source Files tab","On the Project Properties > Clover > Source Files tab user can select which source folders shall be instrumented by Clover. By de-selecting the checkbox, the whole source root becomes excluded from instrumentation:    !source_files.png!    On the Test Classes files user can select which source roots contain test sources:    !test_classes.png!    It it possible to have such combination that:   * source root is excluded   * source root is marked as a test root    This can be misleading. Add appropriate warning for it.",Suggestion,,Closed,"2013-07-26 13:07:21","2013-07-26 13:07:21",3
"Atlassian Clover","as a developer I want be able to select 1.8 language level","The 1.8 language level shall be available for:   * <clover-setup> <clover-instr> Ant tasks   * clover2:setup clover2:instrument goal   * project settings in Clover-for-Eclipse, Clover-for-IDEA     Add such option, if necessary, write unit tests. ",Suggestion,,Closed,"2013-07-22 12:16:36","2013-07-22 12:16:36",3
"Atlassian Clover","as a developer I'd like to have information about lambdas in the Clover database","1) Evaluate how to represent Java8 lambdas - for instance:   - as a separate entity in the model, like a class or a method   - as an integral part of enclosing scope - similarly as the inline class is being handled by Clover    2) Design the DB format having in mind a future extensibility (like functions, functions-in-functions, global variables etc) for other JVM-based languages (like Scala or Closure)    3) Implement it.    Scope:   * database format    Out of scope:   * source code instrumentation   ",Suggestion,,Closed,"2013-07-22 12:01:40","2013-07-22 12:01:40",20
"Atlassian Clover","as a developer I'd like to generate reports with Java8 sources","New language features might require enhancements of existing reports.     Evaluate how to represent lambdas - for instance:   - as a separate entity in the report, like a class or a method   - as an integral part of enclosing scope - similarly as the inline class is being handled by Clover    Scope:   * HTML, XML, JSON, PDF reports  ",Suggestion,,Closed,"2013-07-22 11:50:48","2013-07-22 11:50:48",13
"Atlassian Clover","as a developer I'd like to instrument Java8 new language features","This is an enhancement of CLOV-1139. Clover should be able not only to parse Java8 syntax without error, but also be able to add it's own code statements in order to measure code coverage for:  * lambda expressions  * ???  Scope:  * instrumentation (java.g file)  Out of scope:  * database format  * reporting",Suggestion,,Closed,"2013-07-22 11:32:33","2013-07-22 11:32:33",20
"Atlassian Clover","as a Clover developer I'd like to use the latest version of ANTLR","Clover uses ANTLR 2.x currently which is few light-years from the latest version, which is ANTLR 4.x. Upgrade to the latest ANTLR library version.     * check ANTLR 4.x license (it's different from 2.x) whether we can actually use it; if not - try to use 3.x, if possible   * check if there's any Java grammar (the best for Java 8) available for Antlr 4   * estimate whether it's better to use completely new grammar file and embed clover stuff there or to upgrade our existing grammar file from 2.x to 4.x   ** watch out for our custom extensions like unicode escape sequence handling, annotations etc",Suggestion,,Closed,"2013-07-22 10:02:16","2013-07-22 10:02:16",13
"Atlassian Clover","Class loader fails on clover.jar package-info","Occurs in Bamboo, for instance.      ",Bug,Medium,Closed,"2013-07-16 14:01:27","2013-07-16 14:01:27",3
"Atlassian Clover","Exclusion icon decoration is not visible in IDEA","Affects IDEA versions 10.5.x-12.1.x (works under IDEA 9.0.x). The toggle 'Annotate icons on included/excluded files ...' does not work:    !icon_decoration_do_not_work.png!",Bug,Low,Closed,"2013-06-27 11:46:02","2013-06-27 11:46:02",5
"Atlassian Clover","The 'include line info' toggle works in the opposite way","This toggle    !include_line_info.png!    works exactly opposite: when selected, the XML report does NOT contain <line> tags; and vice versa.",Bug,Low,Closed,"2013-06-26 08:44:11","2013-06-26 08:44:11",2
"Atlassian Clover","Add more values for a 'threads' drop-down in report dialog","The 'Generate Report' dialog has max 4 threads:  !report_generation_threads.png!    In age of multi-core multi-threaded processors, we shall have it up to 16 at least. ",Suggestion,,Closed,"2013-06-26 08:39:44","2013-06-26 08:39:44",2
"Atlassian Clover","Find workaround or fix for IDEA-108852","See http://youtrack.jetbrains.com/issue/IDEA-108852",Sub-task,High,Closed,"2013-06-19 12:38:26","2013-06-19 12:38:26",8
"Atlassian Clover","Contributed and unique coverage are equal","Possible bug. Investigate why these values are identical for MoneyBags tutorial.     !unique_and_contributed_coverage.png!",Bug,Medium,Closed,"2013-06-17 13:09:02","2013-06-17 13:09:02",3
"Atlassian Clover","HTML report shows only one test result per file if external XML JUnit files are used","In the <clover-report> we can define <testresults> element which causes that test results are being read from JUnit-compatible XML files, instead of from Clover's coverage recording files.     This works as long as the test name can be mapped to the method name (which is usually the case). However, in case of the Spock framework, test cases are named using a free text like:        which is later translated to a method named like:        As a consequence Clover is not able to match test name to the method name (in order to link to sources). It uses an empty test id to store the test result (SLICE_ID = -1). If there are more than one non-matched method in the same XML file, all get the same ID=-1, thus overwriting each other in hashmap. As a consequence only one is listed.    *Fix:*    Generate a unique test id using the test name - a String.hashCode() for instance.  ",Bug,Low,Closed,"2013-06-15 13:21:30","2013-06-15 13:21:30",5
"Atlassian Clover","Prepare documentation on CAC and AAC","On Clover-for-IDEA pages:     * screenshot with Compiler settings page from IDEA   ** external build can be enabled   ** incremental build shall be disabled (recommended)   ** parallel build must be disabled (refer to future story)    On supported platforms page:   * info that IDEA12.0-12.1 + Clover 3.1.8-3.1.11 must have 'external build' disabled    Release notes about this new nice feature    Update quiestion on AAC",Sub-task,Low,Closed,"2013-05-28 14:28:12","2013-05-28 14:28:12",3
"Atlassian Clover","Implement Clover data serialization from IDE to JPS","The following data must be serialized and passed to JPS builder:   * global configuration - other.xml (license key, sid, install date)   * project settings - <project>.ipr (flush policy, initstring etc ...)   * module settings - <module>.iml (exluding entire module from instrumentation)   * idea test detector (default test detector + all test source folders)   * state of some buttons in UI (FeatureManager) (e.g. 'toggle build with clover')",Sub-task,Low,Closed,"2013-05-23 23:24:42","2013-05-23 23:24:42",20
"Atlassian Clover","as a developer I'd like to build continuously using external build","Under the Project Settings / Compiler / Use external build checkbox there is the option 'Make project automatically'.    Enabling this feature runs 'continuous compilation', i.e. all sources are compiled as soon as they're modified (as saved actually, which happens automatically).     It means that we'd have Clover instrumenter called thousands of times during single IDEA IDE run. It means it would produce thousands of instrumentation sessions. And the current db structure is quite linear in search. And it would create thousands of coverage recorders - one instance per each class, practically.     Database structure and coverage records would have to be optimized for such continuous build approach.     Possible solutions:   * no instrumentation sessions, when new session starts, remove old data related with a source file being compiled and add the new one; might require extra index for fast search for the latest version   * using a SHARED coverage recorder;    * file-based hit count array indexes instead of the global one?  ",Suggestion,,Closed,"2013-05-23 23:14:02","2013-05-23 23:14:02",100
"Atlassian Clover","Check how parallel instrumentation sessions can be handled","External build will start/close single instrumentation session in which modules will be compiled in parallel (see CLOV-1267).    However, a parallel build in ant/maven might involve starting multiple instrumentation sessions at once (just think about <parallel> + <javac> in Ant for instance).     Check how we could deal with this. Possible problems:   * clover.db file locking (appending instrumentation session)    Areas for prototyping:   * clover db shared in memory   * clover db structure change - adding top-level index for sessions/files/classes etc, possibility to interleave data from several instrumentation sessions   * etc ...",Sub-task,Low,Closed,"2013-05-23 23:03:47","2013-05-23 23:03:47",13
"Atlassian Clover","PDF report with class-level and method-level summary","The PDF report contains package-level coverage table. Add an option for:   * <clover-report> Ant task   * clover2:clover mojo   * 'generate report' button in Eclipse    * 'generate report' button in IDEA    which would allow user to select report detail level:   * package (default)   * class   * method    for PDF file format. ",Suggestion,,Closed,"2013-05-23 12:05:51","2013-05-23 12:05:51",8
"Atlassian Clover","Support custom metrics in PDF report","Currently the PDF report does not handle <columns> element so it's not possible to have a custom set of metrics in the summary. ",Suggestion,,Closed,"2013-05-22 09:49:54","2013-05-22 09:49:54",5
"Atlassian Clover","Implement communication between IDEA IDE and JPS builder"," * notifications about build events, progress, error handling   * model refreshes",Sub-task,Low,Closed,"2013-05-10 12:18:24","2013-05-10 12:18:24",13
"Atlassian Clover","Code instrumentation using jps-builders","scope:  * java code instrumentation  * statement/method contexts  * test detection ",Sub-task,Medium,Closed,"2013-05-10 12:16:36","2013-05-10 12:16:36",20
"Atlassian Clover","as a developer I'd like to build projects using 'classic' build in IDEA12","Make sure that new 'external build' feature support does not break the old build functionality when the compilation is performed in IDEA IDE process.     It shall still use JavaSourceTransformingCompiler class, old Project structure, event handling etc. ",Suggestion,,Closed,"2013-05-10 12:14:35","2013-05-10 12:14:35",13
"Atlassian Clover","Write parallel integration tests for build server","Create IT for external build process with a parallel compilation enabled.",Sub-task,Low,Closed,"2013-05-10 12:10:22","2013-05-10 12:10:22",13
"Atlassian Clover","as a developer I'd like to build modules in parallel using IDEA12 external build","Support IDEA12 external build feature with a parallel build option ENABLED. To do:   * implement parallel compilation handling in clover core   ** affects FileInfo BitSet range for instance (will become non-continuous?)   ** concurrent addition of data to the model?   ** clover-report side-effects?   * write integration tests for clover core   * write integration tests for build server   * test idea ide - build server interaction",Suggestion,,Closed,"2013-05-10 12:03:36","2013-05-10 12:03:36",100
"Atlassian Clover","as a developer I'd like to build modules sequentially using IDEA12 external build","Support IDEA12 external build feature with the parallel build option DISABLED. To do:    * serialize Clover configuration for the JPS external process   * implement code instrumentation using builder API (jps-builders) and new project model (jps-model-api)   * implement notifications back to IDE   * implement model refreshing etc   * write integration tests for build server",Suggestion,,Closed,"2013-05-10 11:59:43","2013-05-10 11:59:43",100
"Atlassian Clover","Improve message for NoSuchRegistryException","See https://confluence.atlassian.com/x/AIP3F    A message Clover registry file: <path/to/clover.db> does not exist. is too general and does not help developer to understand what the exact problem is. Find a more meaningful message. ",Suggestion,,Closed,"2013-05-10 10:30:24","2013-05-10 10:30:24",1
"Atlassian Clover","Error when trying to Check for an Update","I just recently upgraded from IntelliJ IDEA 10.5.4 to 12.1.1 and now 12.1.2.  I think my last update to Clover was BEFORE I updated IDEA versions.",Bug,Highest,Closed,"2013-04-26 19:45:19","2013-04-26 19:45:19",5
"Atlassian Clover","Document how to configure Clover + Bamboo with 'mvn deploy' goal on CAC","The problem is that if 'mvn deploy' is used with Clover, it will deploy instrumented JARs into repository. There's no documentation on confluence.atlassian.com in the BAMBOO space how such separation can be achieved.       Create a page with a description like:      If you use Automatically integrate Clover into this build option, then Bamboo will add clover2:setup + clover2:clover goals into every Maven task found in the Job (more details can be found here). It means that you shall not use mvn deploy together with automatic Clover integration.    There are at least three ways to solve this problem:    1) Create a separate Plan (or Job) in which automatic Clover integration is enabled and the Maven 2.x task does not deploy artifacts (mvn verify is used for instance). So this plan would be used only for Clover reporting.    Benefits: full Clover separation from the Plan (or Job) performing deployment    Drawbacks: doubled Plan (or Job)    or    2) Use manual Clover integration (Clover is already integrated into this build) but run Clover in a parallel build lifecycle. It means that you'd have to configure Clover goals manually in the pom.xml and use the clover2:instrument instead of clover2:setup. You could have then just one Maven task with mvn clean deploy. Instrumented jars would have -clover.jar suffix.    Benefits: build is executed only once    Drawbacks: sometimes there might be problems with resolving correct (cloverized) dependent artifacts for multi-module projects or deploying the instrumented war to test server    or    3) Use manual Clover integration, but run Clover in a default build lifecycle. It means that you'd have to configure Maven task manually and use clover2:setup goal. Then you have to use two Maven tasks - one with ... clover2:setup test ... and one with deploy. This is an approach you have followed (according to screenshots I see in attached pdf).    Benefits: no problems with artifact dependencies    Drawbacks: two Maven tasks     Recommendation: approach #3.     Steps for approach #3:     clean clover2:setup test clover2:aggregate clover2:clover    b) define Clover Report artifact    On the 'Artifacts' tab, click Create Definition and complete the form as follows:  Name  This should begin with with Clover Report.  Location  This should point to the HTML report directory (e.g. target/site/clover)  Copy Pattern  Use **/*.*    More details on https://confluence.atlassian.com/display/BAMBOO/Enabling+the+Clover+add-on#EnablingtheCloveradd-on-ManualCloverintegration    ",Suggestion,,Closed,"2013-04-17 14:03:30","2013-04-17 14:03:30",1
"Atlassian Clover","Reduce coverage requirements for groovy safe operator","Currently any usage of the groovy safe operator requires that that reference be tested with a null and non-null value.  This adds significant overhead in the case where multiple calls are chained together with the safe operator.  It would be more useful as a coverage measurement if the chain was treated as one call.      Look at the following line as an example.    def value = a.getB()?.getC()?.getD()?.getE()    This line of code should require a test that sets value to null and a test that sets value to something non-null.  It should not however require a test where B is null a test where c is null a test where d is null and a test where e is null to reach 100% conditional coverage.    While I hope that lines that look like the above are not written very often, it still could happen, and having to write a bunch of tests to cover one line seems like a heavy burden.    ",Suggestion,,Closed,"2013-04-09 02:14:09","2013-04-09 02:14:09",8
"Atlassian Clover","Test IDEA IDE - build server interaction","Exploratory tests in user interface.",Sub-task,Low,Closed,"2013-04-03 14:20:45","2013-04-03 14:20:45",5
"Atlassian Clover","Write sequential integration tests for build server","Prepare integration tests for external build feature. Test the scenario when 'parallel compilation' for 'external build' is disabled.    Check if any helper test classes for it are available in IDEA code based. ",Suggestion,,Closed,"2013-04-03 14:19:55","2013-04-03 14:19:55",13
"Atlassian Clover","Implement parallel compilation handling","Based on analysis of CLOV-1267",Sub-task,Low,Closed,"2013-04-03 14:19:08","2013-04-03 14:19:08",13
"Atlassian Clover","Implement clover.db sharing between build server and IDE processes","Based on analysis",Sub-task,Low,Closed,"2013-04-03 14:18:47","2013-04-03 14:18:47",13
"Atlassian Clover","Check how parallel instrumentation can be handled","External build supports parallel compilation. Modules are built in parallel, while files in a single module are compiled sequentially.     Clover expects that at least a single file is instrumented sequentially (the FileInto getCoverageMask which returns bitmask based on index range), so that the clover database contains continuous range of indexes for code elements from a single file. It means that we need to synchronize per file. It should not be a problem that subsequent files in database are from different modules.     possible solutions:    1) simple lock per whole file in some synchronized block; drawback: turns parallel build into single-threaded one.    2) batch operations, like first instrument whole file using relative indexes, next lock database and store information about whole file, database would return base offset value; still in sychronized block but locked for shorter amount of time;    3) change clover.db structure so that elements could be registered in any order; change FileInfo getCoverageMask function (and related); check for any data structures which needs to be made thread-safe;  ",Sub-task,Low,Closed,"2013-04-03 14:17:28","2013-04-03 14:17:28",8
"Atlassian Clover","Check how clover.db can be accessed from build server and IDE processes at once","probably there are two possible ways to interact with build server process and the IDEA IDE process:    1) build server performs (parallel) instrumentation in memory and at the end of the whole build writes or updates clover.db (it has write access); next it sends notification to IDE which refreshes views and editors; potential problems: deletion of database during build, locking files    2) build server performs (parallel) instrumentation sending information about code structure back to IDEA IDE, which manages the database and sends back indexes of elements; potential problems: high messaging overhead -> need to send at most one message per file -> need to introduce local offset constant per each file;",Sub-task,Low,Closed,"2013-04-03 14:09:23","2013-04-03 14:09:23",13
"Atlassian Clover","as a developer I'd like to track build events in IDEA12 external build","*Prepare empty plugin for external build.*    analyze external build API, prepare a simple plugin which will log compilation progress (module name, file name being compiled) and send notifications about it to IDE; it should also notify about compilation finished event.",Suggestion,,Closed,"2013-04-03 14:02:04","2013-04-03 14:02:04",5
"Atlassian Clover","Performance problem with SHARED coverage recorder in Grails app","Follow up of CLOV-1189.          If I uncomment the testsources enabled:false line, it runs about as quickly as before. Normally our coverage run takes about 42 minutes. With the above configuration it's been running for about 3 hours and is about half finished.",Bug,Medium,Closed,"2013-03-26 09:24:52","2013-03-26 09:24:52",5
"Atlassian Clover","Race condition in IDEA during full rebuild and test execution","Clover-for-IDEA. Race condition during database cleanup and running unit tests at the same time.     Steps to reproduce;    1. Open Moneybags tutorial project  2. Prepare 'run all unit tests' configuration  3. Click Delete Coverage Database button in the Cloverage view  4. Click Rebuild now in the prompt dialog  5. Quickly click Run (Shift+F9)    Problem:    Project is being rebuilt and clover.db is recreated, at the same time unit tests are compiled and also clover.db is being modified. There's a warning in console log like this:      ",Bug,Low,Closed,"2013-03-25 11:17:52","2013-03-25 11:17:52",8
"Atlassian Clover","IDEA Darcula theme ignores <table border=0>","Clover's About dialog looks ugly when the Darcula theme is selected in IDEA 12. Despite having <table border=0> in JEditorPane(text/html), it shows table with a border. Example:    !clover_about_idea12_themes.png!",Bug,Low,Closed,"2013-03-25 10:33:07","2013-03-25 10:33:07",3
"Atlassian Clover","PDF report with include failed test coverage option fails","Eclipse    Install Clover-for-Eclipse, open tutorial project, select Run new report > PDF report > select Include failed test coverage > click Finish.    PDF report generation fails with error log message:    The JVM report process failed with error code 1 - see log for details    !pdf_fail.png!    Increasing heap size from 512M to 768M solved the problem. To do: check why such small project requires so much memory.    Check also PDFReporter, Clover-for-IDEA.",Bug,Low,Closed,"2013-03-25 10:11:19","2013-03-25 10:11:19",2
"Atlassian Clover","Add url for 'utils.js' home page","In Clover-for-Eclipse and Clover-for-IDEA About dialogs the Utils.js link does not open the library home page. ",Bug,Low,Closed,"2013-03-25 08:37:48","2013-03-25 08:37:48",2
"Atlassian Clover","Reduce friction in tutorial","Make Clover evaluation easier by simplifying the tutorial. The build.xml shall contain full Clover set-up so that just typing ant shall produce all reports. So swap build.xml <-> build_completed.xml, fix test target name, add default=clover.all etc.     Futhermore, Ant and Maven configuration in tutorial shall be unified - use 'target' directory for both of them. Get rid of clutter like 'clover', '.clover', 'build' directories.     Update tutorial page on CAC.    Consider adding groovy-all-1.7.0.jar into /lib directory so that user won't need to define GROOVY_HOME path.",Suggestion,,Closed,"2013-03-25 08:26:15","2013-03-25 08:26:15",5
"Atlassian Clover","Upgrade third party libraries used by Clover","Upgrade third party libraries to their latest versions:   * jebrains annotations 13.0 (/)   * ASM 5.0  (/) we're using ASM 3.0, 4.1 and 5.0 actually (for different purposes)   * commons-codec 1.9 (/)   * commons-collections 3.2.1 (/)   * commons-lang 2.6 (/)   * guava 18.0 (/)   * JCommon 1.0.23 (/)   * JFreeChart 1.0.19 (/)   * Log4J 1.2.17 (/)    * Velocity 1.7 (/)   ",Suggestion,,Closed,"2013-03-25 08:22:34","2013-03-25 08:22:34",8
"Atlassian Clover","Add clover.coverageRecorder field for Clover-for-Grails plugin","*A follow-up of CLOV-1189:*    Support the coverageRecorder natively in the plugin config. It would be nice to go back to using the simpler configuration instead of the setuptask/reporttask closures. Like:        *Implementation:*     If coverageRecorder field is defined, then create a single profile named default with coverageRecorder as specified and undefined distributedCoverage.    In case clover.setuptask is specified, then settings from this closure will override clover.coverageRecorder value.  ",Suggestion,,Closed,"2013-03-21 06:26:32","2013-03-21 06:26:32",3
"Atlassian Clover","as a developer I'd like to instrument tests written in the Spock framework","We use Clover for both Java and Groovy.    Unfortunately, Clover does not understand the tests we write in [Spock|http://code.google.com/p/spock/].    So a test like this:  {code}  class OpsWiseJobQueryTestSpec extends AbstractTestSpec {   OpsWiseJobQuery wait   static File existingFileMarker = File.createTempFile(opswiseJobQuery, .txt)      void setup() {    wait = new OpsWiseJobQuery()    wait.manifestDir = existingFileMarker.getParentFile()    existingFileMarker.createNewFile()   }      void cleanup() {    existingFileMarker.delete()   }      def should work with completed job() {    expect:     state == wait.getJobState(manifestFilename)    where:     state      | manifestFilename     OpsWiseJobState.WAITING  |   non-existing-name.whatever     OpsWiseJobState.DONE  | existingFileMarker.getName()   }   }  {code}    Ends up with a coverage report like this:        I would expect to see just a single test passed.  ",Suggestion,,Closed,"2013-03-13 07:26:54","2013-03-13 07:26:54",0
"Atlassian Clover","Prepare code example for Grails","Prepare sample Grails project with domain classes, controllers and unit tests which will use the 'shared' coverage recorder.",Sub-task,Low,Closed,"2013-03-11 12:43:24","2013-03-11 12:43:24",2
"Atlassian Clover","Add Ant dependendency to com.cenqua.clover:clover maven artifact","Problem occurs in Gradle framework. When developer declares dependency to Clover artefact and tries to instrument project with Clover, it fails with a not-very-informative error:        Debug logging reveals more information:        A reason is that normally this code is being called from Ant so the ant.jar is provided. In Gradle it's not available by default.    Workaround: add ant.jar dependency in the project build file.  ",Bug,Low,Closed,"2013-03-08 13:51:03","2013-03-08 13:51:03",4
"Atlassian Clover","Some of per-test recording strategies do not work for multi-threaded applications","*Introduction*    We've got five per-test recording strategies:    * Diffing - clover.pertest.coverage=diff  * Null - clover.pertest.coverage=off  * SingleThreaded  - clover.pertest.coverage=<empty> and clover.pertestcoverage.threading=<empty> - DEFAULT POLICY  * Synchronized clover.pertest.coverage=<empty> and clover.pertestcoverage.threading=synchronized  * Volatile - clover.pertest.coverage=<empty> and clover.pertestcoverage.threading=volatile    *Current status*    1) A SingleThreaded does not work with multi-threaded apps. Of course it's designed for single thread only. But at least it should have a correct value of coverage for a test case from a current thread.     Expected number of hit counts is between:        but currently actualHits can be < than hits(current test) due to fact that CloverBitSet.set\(n\) is not thread-safe.    2) A Volatile strategy has a similar problem. CloverBitSet.set\(n\) is not thread safe. Starting/ending of test slices works fine.    3) A Synchronized is correct because we've got 'CloverBitSet.set\(n\)' wrapped in a synchronized block. Starting/ending of test slices works fine.    4) A Diffing needs more tests.     *Possible fix*    CloverBitSet could have two variants:   * compact - store hits as bit mask in long[] array - set\(n\) is not thread-safe, can be used for report generation as it consumes less memory   * exploded - store hits as boolean[] array - set\(n\) \{ arr[n] = true \} would be thread-safe, used for runtime recording; it consumes 8x more memory but on the other hand we usually don't have 10'000 tests running in parallel; number of parallel tests is ~ number of processor cores available  ",Bug,Medium,Closed,"2013-03-08 07:53:44","2013-03-08 07:53:44",5
"Atlassian Clover","Prepare integration tests for SharedCoverageRecorder","Integration tests like (all with partial global and per-test coverage):     * SharedCoverageRecorder with single InstrumentationSession and many classes     * SharedCoverageRecorder with multiple InstrumentationSessions, classes from sessions running together     * SharedCoverageRecorder with multiple clover databases (different initstrings)      * SharedCoverageRecorder with the same class compiled multiple times, different versions are running with coverage measurement,  ",Sub-task,Low,Closed,"2013-02-21 23:35:36","2013-02-21 23:35:36",5
"Atlassian Clover","Prepare integration tests for GrowableCoverageRecorder","Integration tests like:     * GrowableCoverageRecorder on a large code base     * GrowableCoverageRecorder with different strategies     ** PerTestRecorder.One / Many / None     ** ThreadVisibilityStrategy.SingleThreaded / Volatile / Synchronized    => especially check if/how per-test code coverage is affected by multithreaded tests of multithreaded application     * GrowableCoverageRecorder with DistributedCoverage  ",Sub-task,Low,Closed,"2013-02-21 23:35:08","2013-02-21 23:35:08",5
"Atlassian Clover","Grails: extract clover-runtime into build directory","Usually it's here:    <home>\.grails\X.Y.Z\projects\<project_name>\classes",Suggestion,,Closed,"2013-02-20 07:59:08","2013-02-20 07:59:08",8
"Atlassian Clover","IDEA: extract clover-runtime classes into build directories","IDEA integration - put these classes into:   * out/production and    * out/test.     Add option in File > Settings > Project Settings or File > Settings > IDE Settings for this.",Suggestion,,Closed,"2013-02-20 07:55:36","2013-02-20 07:55:36",5
"Atlassian Clover","Eclipse: extract clover-runtime classes into build directory","Extract clover-runtime.jar into project's build folder so that other packaging tools could automatically pick these classes. Add pre-build or post-clean event handler to make sure that these classes will be still present after rebuild. Add some option in Window > Preferences or Project > Properties for this.",Suggestion,,Closed,"2013-02-20 07:54:23","2013-02-20 07:54:23",5
"Atlassian Clover","Maven: intercept maven-cargo-plugin and add clover-runtime dependency","The maven-cargo-plugin is the most popular plugin for running in-container tests. Add <dependency> for clover-runtime there. Add configuration option to have a possibility to disable this.",Suggestion,,Closed,"2013-02-20 07:53:25","2013-02-20 07:53:25",5
"Atlassian Clover","Maven: intercept maven-war-plugin and add clover-runtime","The same as CLOV-1242 but for maven-war-plugin",Suggestion,,Closed,"2013-02-20 07:51:04","2013-02-20 07:51:04",3
"Atlassian Clover","Maven: intercept maven-rar-plugin and add clover-runtime","The same as CLOV-1242 but for maven-rar-plugin",Suggestion,,Closed,"2013-02-20 07:49:27","2013-02-20 07:49:27",3
"Atlassian Clover","Maven: intercept maven-ear-plugin and add clover-runtime","The same as CLOV-1242 but for maven-ear-plugin",Suggestion,,Closed,"2013-02-20 07:47:00","2013-02-20 07:47:00",3
"Atlassian Clover","Maven: intercept maven-jar-plugin and add clover-runtime","Check if it would be possible to define some Maven property for maven-jar-plugin which would allow to define directory or list of files to be added to the archive. If yes, then extract clover-runtime into e.g. target/clover/runtime (note: it shall not interfere with CLOV-1241 somehow) and pass it to maven-jar-plugin. ",Suggestion,,Closed,"2013-02-20 07:46:09","2013-02-20 07:46:09",5
"Atlassian Clover","Maven extracts clover-runtime into target/classes or target/classes-clover","Automatic integration for unknown plug-ins: extract clover-runtime artifact into current build folder (target/classes for clover2:setup and target/classes-clover for clover2:instrument). Thanks to this these runtime classes might be automatically picked up and packaged. Check if there is any  Maven's build property holding list of classes which have to be updated.    Add configuration option for this, like:    ",Suggestion,,Closed,"2013-02-20 07:43:16","2013-02-20 07:43:16",3
"Atlassian Clover","Create clover2:embed-runtime-jar goal","Create MOJO for:        which will read the <targetJar> property and do the same what Ant task does.    Difference: we might use maven-assembly-plugin and download clover-runtime artifact for this.",Suggestion,,Closed,"2013-02-20 07:38:17","2013-02-20 07:38:17",3
"Atlassian Clover","Create <clover-embed-runtime> task","Create Ant task:    which will put all Clover's runtime classes into targetFile.     Unzip all com_cenqua_clover.* and com.atlassian.clover.runtime.* classes from clover.jar archive which is currently on a classpath (we've got a trick how to find it - see searching for clover.license) into a temporary directory and next put them into jar (use Ant <jar/> task for this or handle zip directly).",Suggestion,,Closed,"2013-02-20 07:35:59","2013-02-20 07:35:59",3
"Atlassian Clover","Split clover-core into clover-runtime + clover-core","1) Use class dependency analyzer. Check for classes loaded via reflections too!!! (/) _class dependency analyzer was also used to strip third party libraries from unused classes_    2) Move runtime classes to clover-runtime module. (/)    3) -Rename packages to com.atlassian.clover.runtime.* but keep few core classes in com_atlassian_clover. Reason: Clover-for-Ant will still have single clover.jar probably and it will use FileInputStream(clover.jar) to dynamically extract classes form archive so we must be able to distinguish them.- (/) _cancelled; too many changes in referenced classes and runtime still borrows few classes from core_    4) Enhance build script to publish this as com.atlassian.clover:clover-runtime artefact on Atlassian Central and Maven Central. (/)    Note:   - for backward compatibility clover-core shall still contain runtime classes and it's name will not change (com.atlassian.clover:clover) (/)   - -we can add dependency to clover-runtime in pom.xml, however - just to keep programmers informed about this change- (/) _dependency not added as clover-core already bundles the clover-runtime_    5) Update documentation on CAC and inform that new, small artifact is available since version 4.0.x. (/) _done_    6) Update UML in clover-maven-module-structure.graphml (/) _done_    7) Test it with Clover-for-Android (original clover-core exceeds method limit in Dalvik image)  (/) _couldn't test as Android Studio uses Gradle now and is based on IDEA not Eclipse_",Suggestion,,Closed,"2013-02-20 07:31:07","2013-02-20 07:31:07",5
"Atlassian Clover","as a developer I'd like not to deploy clover.jar to app server","*Embed clover-runtime.jar into created JAR/WAR/EAR*    *Problem:*    Instrumenting code by Clover is not enough, user has to manually add clover.jar to the runtime classpath. Otherwise it gets ClassNotFoundException com_cenqua_clover/CoverageRecorder error. There are over 6'000 views on answers.atlassian.com about this problem (it's #1 on the list)    *Solution:*    Create a possiblity to automatically or manually embed clover-runtime.jar into produced JAR/WAR/EAR artifacts.     *Tasks:*    1) (/) Restructure Clover modules and find exact set of runtime classes, create clover-runtime.jar artifact out of it (will be published on Maven Central). Such subset was already found for Clover-for-Android, but it does not have classes for Distributed Coverage feature. See linked issue.     2) Create Ant task like <clover-embed-runtime-jar targetJar=my.jar/> which will allow to manually put runtime classes into it.    3) Check if it would be possible to intercept all <jar/> calls as well and do it automatically. Add option to disable this automatic integration and/or to specify regular expression pattern which jars shall be enhanced.    4) Create Maven goal like clover2:embed-runtime-jar with <targetJar> property.    5) Check how to automatically embed Clover runtime classes. Possibilities:   * extract clover-runtime.jar into target/classes or target/classes-clover   * scan build reactor, intercept packaging tasks like maven-ear-plugin, maven-jar-plugin, maven-rar-plugin, maven-war-plugin, maven-assembly-plugin   * modify maven project at runtime and add clover:clover-runtime dependency    6) Eclipse integration - we already have -Xbootclasspath for Run with Clover as... but it's not enough if user has web application for example. Extract clover-runtime.jar into project's build folder so that other packaging tools could automatically pick these classes. Add pre-build or post-clean event handler to make sure that these classes will be still present after rebuild. Add some option in Window > Preferences or Project > Properties for this.    7) IDEA integration - put these classes into out/production and out/test. Add option in File > Settings > Project Settings or File > Settings > IDE Settings for this.    8) Grails integration - t.b.d.",Suggestion,,Closed,"2013-02-20 07:18:49","2013-02-20 07:18:49",40
"Atlassian Clover","Add 'clover.enabled' system property","If set to 'false' it should disable recording of the coverage data at runtime.",Suggestion,,Closed,"2013-02-19 11:32:45","2013-02-19 11:32:45",1
"Atlassian Clover","Dynamically select coverage recorder based on clover.profile","Clover.getRecorder():    Read -clover.profile system property and if securityexcetion or null then fallback to default.    If list of profiles is empty or given profile name was not found, fallback to fixed coverage recorder.    Should read coverageRecorder value and instantiate proper recorder type    Should fetch from cache using one of:    recorderKey = initString +  + dbVersion +  + cfgbits;  recorderKey = initString;    Add debug log messages for actions taken.    Prepare necessary tests for java and groovy (assert on log messages).  ",Sub-task,Low,Closed,"2013-02-13 10:08:33","2013-02-13 10:08:33",2
"Atlassian Clover","Create GrowableBitSet class","extend CloverBitSet,     add() method shall check index vs size() and call growToInclude();     make it thread-safe - check how antlr.collections.impl.BitSet.growToInclude() is implemented  ",Sub-task,Low,Closed,"2013-01-23 12:57:09","2013-01-23 12:57:09",2
"Atlassian Clover","Use GrowableBitSet for PerTestRecorder.One","In PerTestRecorder.One - wrap 'coverage' and coverageShortcut into a helper class (x)    set() method - if index is out of bounds then it shall resize 'coverage' BitSet and 'coverageShortcut' array (/)    refactor PerTestRecorder.Any, None, One, Many to top-level classes (/)    refactor ThreadVisibilityStrategy to top-level class (/)    write unit tests for (/)  ThreadVisibilityStrategy.SingleThreaded  ThreadVisibilityStrategy.Synchronized  ThreadVisibilityStrategy.Volatile  ",Sub-task,Low,Closed,"2013-01-23 12:50:49","2013-01-23 12:50:49",3
"Atlassian Clover","Embed clover profile array in instrumented classes","Enhance existing instrumentation and embed an array of CloverProfile in instrumented sources/classes, pass this array to Clover.getRecorder().    Java: source based instrumentation  RecorderInstrEmitter + Clover.getRecorder()     - add static field for _CLR class of *CloverProfile[]* type    Groovy: byte code instrumentation     - instantiate new CloverProfile[] { new CloverProfile(), ... } array at getRecorder() call    ",Sub-task,Low,Closed,"2013-01-23 12:36:01","2013-01-23 12:36:01",5
"Atlassian Clover","Add profiles for InstrumentationConfig",,Sub-task,Low,Closed,"2013-01-23 11:58:00","2013-01-23 11:58:00",1
"Atlassian Clover","Document <profiles> element on CAC","Write documentation for:   * http://confluence.atlassian.com/display/CLOVER/clover-setup   * http://confluence.atlassian.com/display/CLOVER/clover-instr   * https://confluence.atlassian.com/display/CLOVER/Advanced+setup+configuration  ",Sub-task,Low,Closed,"2013-01-23 11:55:52","2013-01-23 11:55:52",1
"Atlassian Clover","Add <profiles> element for <clover-setup> and <clover-instr>","Enhance Ant tasks by adding new sub-types and attributes:        coverageRecorder   * fixed - default value as now, fixed-size coverage recorder requiring presence of clover.db to read the size   * growable - like for Android, no need to have clover.db   * shared - for Grails app, not only with dynamic size, but also reusing the same instance of recorder if initstring is the same    Parse it on Ant level, pass it to InstrumentationConfig and Instrumenter.   ",Sub-task,Low,Closed,"2013-01-23 11:54:02","2013-01-23 11:54:02",2
"Atlassian Clover","Auto update version check reports new version when version strings are identical","Under File > Settings > IDE Settings: Clover > Auto Update, when you press Check now a window pops up saying:    New version available: 3.1.10.v20130108000000, you have 3.1.10.v20130108000000  Would you like to upgrade?    ",Bug,Low,Closed,"2013-01-17 11:23:21","2013-01-17 11:23:21",3
"Atlassian Clover","Show warning if new update is out of scope of the current license","Case:   * user has a valid license key with a certain end-of-maintenance date   * new Clover version is released but the release date is later than maintenance end   * IDEA / Eclipse gives user an ability to upgrade but   * after upgrading user cannot use Clover anymore (!)    Improvement:   * check end-of-maintenance date from current license key, if it is < than release date of the upgrade we want to download, put additional warning about it the the upgrade dialog box",Suggestion,,Closed,"2013-01-15 06:19:46","2013-01-15 06:19:46",1
"Atlassian Clover","CLMVNONE Integrate Distributed coverage","Moved from https://studio.plugins.atlassian.com/browse/CLMVNONE-13    Integrate Distributed coverage with Clover-Maven1-Plugin  ",Suggestion,,Closed,"2013-01-14 11:14:32","2013-01-14 11:14:32",3
"Atlassian Clover","CLMVNONE Use includes, instead of nested include to allow more than one pattern when merging","Moved from https://studio.plugins.atlassian.com/browse/CLMVNONE-9    For Maven1 plugin: It would be better to change the following code in the clover:merge goal from:            to:        ",Suggestion,,Closed,"2013-01-14 11:12:52","2013-01-14 11:12:52",1
"Atlassian Clover","CLMVNONE new property: maven.clover.instrumentationLevel","Moved from https://studio.plugins.atlassian.com/browse/CLMVNONE-14    This should only be set to 'method' if used in conjunction with Test Optimization if the default level (statement) is not performant enough.  Valid values are statement and method.",Suggestion,,Closed,"2013-01-14 11:08:57","2013-01-14 11:08:57",1
"Atlassian Clover","Remove retrotranslator","Remove all retrotranslator stuff:   * jar files (several extlib locations)   * build.xml and upgrade.xml files   * about boxes in Eclipse and IDEA   * etc/rights license files  ",Sub-task,Low,Closed,"2013-01-10 09:38:42","2013-01-10 09:38:42",1
"Atlassian Clover","Update Supported-Platforms page","On http://confluence.atlassian.com/display/CLOVER/Supported+Platforms:   * set JRE/JDK = 1.5 or later   * add footnote that support for JDK 1.5 has ended with 3.1.x  ",Sub-task,Low,Closed,"2013-01-10 09:36:01","2013-01-10 09:36:01",1
"Atlassian Clover","Compile maven-clover2-plugin using JDK1.5","Currently we have two executions of maven-compiler-plugin:   * one with source/target=1.3 for src/main   * one with source/target=1.5 for src/test    Use source/target=1.5 for the whole module. ",Sub-task,Low,Closed,"2013-01-10 09:33:17","2013-01-10 09:33:17",1
"Atlassian Clover","Perform migration of CLMVN and CLMVNONE from studio.plugins.atlassian.com","The site studio.plugins.atlassian.com is deprecated. All new projects shall be migrated to bitbucket.org or eventually to ecosystem.atlassian.net.     *Deadline:*      * final deadline 5.03.2013    * it's recommended to finish it before 5.02.2013    *Scope:*    -1) Migrate SVN repositories-     * https://studio.plugins.atlassian.com/svn/CLMVN   * https://studio.plugins.atlassian.com/svn/CLMVNONE    -to Mercurial on Bitbucket-      -2) Migrate Bamboo builds (if necessary) from-      * https://studio.plugins.atlassian.com/builds/browse/CLMVN-TRUNK    -Note: CLMVNONE has no builds configured-    -to new Bamboo location.-      -3) There is no need to migrate Wiki pages and Code reviews (practically empty).-      -4) Migrate JIRA issues from-     * https://studio.plugins.atlassian.com/browse/CLMVNONE   * https://studio.plugins.atlassian.com/browse/CLMVN    -to-      * https://jira.atlassian.com/browse/CLOV     -if this is feasible and set component Maven 1 Plugin and Maven Plugin, respectively.-    -Alternatively, create new issue trackers on Bitbucket or Ecosystem, copy all issues as is and set projects read-only with a message that issue tracking shall be done in JAC CLOV project.-      -5) Update build scripts (Maven / Ant) and handle:-   * -new repository type (tagging)-   * -new way of deployment of binaries (optional)-    -Update also BEAC builds.-    ",Suggestion,,Closed,"2012-12-14 14:30:16","2012-12-14 14:30:16",3
"Atlassian Clover","Add testSources parameter for clover2:clover mojo","The Ant <clover-report/> task has an optional nested <sourcepath> parameter where user can specify an Ant path that Clover should use when looking for source files.     Thanks to this, it is possible to generate report using sources from a different location (on a different machine, for instance).     Such option is missing for Maven clover2:clover MOJO. The workaround which can be used is to create a custom report descriptor, as described on https://confluence.atlassian.com/display/CLOVER/Creating+custom+reports, which is not convenient actually.    Fix: add <sourcepath> parameter for clover2:clover MOJO.",Suggestion,,Closed,"2012-12-13 07:48:45","2012-12-13 07:48:45",1
"Atlassian Clover","Groovy 2.x @CompileStatic annotation causes static methods to be ignored by Clover","Adding @CompileStatic to a tested Groovy class results in 0% coverage for static methods.    e.g.    Can anyone confirm this? Thanks.  ",Bug,Low,Closed,"2012-12-06 10:57:30","2012-12-06 10:57:30",8
"Atlassian Clover","as a developer I don't need to run Clover on JDK1.4 anymore","*Idea:*    Sun Java 1.4 has:   * end of public updates - Oct 2008   * end of Premier Support - Feb 2010   * end of Extended Support - Feb 2013   * see http://www.oracle.com/technetwork/java/eol-135779.html    IBM Java 1.4:   * is no longer Generally Available (GA) since Dec 2004;    * its End Of Servcie (EOS) will expire on September 2013:   * see https://www.ibm.com/developerworks/java/jdk/lifecycle/      According to various sources, most popular are Java6 and Java7; Java1.4 has a fraction of market right now:   * http://www.statowl.com/java.php  although the report above shows Java version in web browser. Production environment may be different (especially regarding IBM Java).      *Benefits:*    Dropping support for Java 1.4 would ease Clover development a lot, as we could:   * directly use Java5 generics in code   * replace raw collections (List, Map, Set etc) by typed collections (List<Foo> etc) in code    * get rid of Retrotranslator (2x faster build )   * it opens a door to introduce generic-based libraries in Clover code (for example replace Apache Commons by Guava)    *Tasks:*     * update Supported-Platforms page   * remove retrotranslator from build scripts   * update bamboo / maven configurations   * affects Clover, Clover-for-Maven2&3, Clover-for-Eclipse, Clover-for-IDEA  (note that Clover-for-Grails already need JDK1.5 or above)      *Out of scope:*     * replacing existing raw collections by typed ones (like List -> List<Foo> ), introducing foreach loops etc    ** this will be done gradually during daily development    ",Suggestion,,Closed,"2012-11-30 10:24:30","2012-11-30 10:24:30",1
"Atlassian Clover","Create ClassInfo objects for anonymous inline classes","During implementation of CLOV-1162 I've found that anonymous inline classes does not have their own ClassInfo object crated. Instead of this, methods of inline class are added to the enclosing class.    For instance, a following code:        is stored in clover database in this way:        It means that on reports the AggregatedMetrics.C class is presented as having 5 methods, while it has 2 actually.     It's not a bug. There was a design decision to not present anonymous classes in a report.     Possible improvement:   * create ClassInfo objects for anonymous classes   * add option for reporting whether to show anonymous classes (like InstrumentationSessionImplTestSample2$1) or not  ",Suggestion,,Closed,"2012-11-29 10:43:39","2012-11-29 10:43:39",5
"Atlassian Clover","The <testsources> tag from <clover-setup> is not passed to groovyc","As in subject. As a consequence, the DefaultTestDetector is always used for Groovy code.     *Fix:*    Build proper TestDetector instance in GroovycSupport, which will be next serialized into InstrumentationConfig (instrumentation.ser file), so that next the Grover can deserialize it and pass to InstrumentingCodeVisitor.  ",Sub-task,Medium,Closed,"2012-11-22 14:01:54","2012-11-22 14:01:54",2
"Atlassian Clover","Report generation seems to get into an infinite loop, never finishes","For some reason, in our Grails test environment, clover is stuck in what seems to be an infinite loop recording the data for all the files instrumented during the run.    This occurs at the end of a run started with grails test-app -clover.on which runs both unit and integration tests.    Our project is fairly reasonable in size:      During the run, Clover generates an amazing number of files in the .clover/ directory (about 600,000 files *.s files)    At the end of the run we get:      I've attached a chunk of the log file looping on the report generation, the full log file is 4GB before I stopped it.    Also, I've attached a stack trace taken while it is seemingly looping.    It's weird, we are evaluating clover and it works fine on our other project module, but not this one. The configuration is the same:          ",Bug,Highest,Closed,"2012-11-19 19:11:57","2012-11-19 19:11:57",0
"Atlassian Clover","Aggregate coverage by current author and commit regex","I love CIJ.  When I use git, I find myself making a lot of commits, and I want to see my test coverage aggregated by the jira ticket I've put in my commit log.  For example, let's say I'm working on a project for 3 days.  I might make 50 commits.  All throughout my development, I'd like to keep a running track of how the test coverage is *for my code, bounded by a commit regex*.  In other words, I'd like to use something like git blame, married with coverage, to give me feedback like Hey Zim, the feature you're working on only has 52% coverage.  Awesome-er still would be something like the class coverage pane, but using only lines I've changed.  So I could have a window that shows the classes I've changed, and a summary of the coverage for the lines that I've changed, again bounded by a the jira ticket in my commit logs.    This would be crazy to do in something other than a lightning fast DVCS like git or mercurial...but I have totally drunk the git cool aid.",Suggestion,,Closed,"2012-11-16 00:58:02","2012-11-16 00:58:02",13
"Atlassian Clover","Don't spam the console with println anytime clover grails plugin is installed","From looking at the _Events.groovy hooks in the plugin, there are several println statements which will execute in all contexts, not just testing and not just when clover.on is specified. Specifically, the set classpath and compile start/end hooks will happen everytime any Grails command is run.    This is bad practice for a plugin. The println statements should be changed to use the grailsConsole which is available automatically    println foo => grailsConsole.log foo    or grailsConsole.updateStatus foo    Secondly, this should probably be wrapped in a helper which only prints if the the clover is enabled, ie:    def logStuff(msg) {      if( config.on ) grailsConsole.log msg  }",Suggestion,,Closed,"2012-11-15 15:25:50","2012-11-15 15:25:50",1
"Atlassian Clover","IDEA12 JavaSourceTransformingCompiler functionality has been removed","Since build 122.694 Clover 3.1.8 cannot work with IDEA12 EAP, because the external build functionality was introduced and the JavaSourceTransformingCompiler is no longer supported. See issue    http://youtrack.jetbrains.com/issue/IDEA-94612",Bug,High,Closed,"2012-11-12 06:46:54","2012-11-12 06:46:54",5
"Atlassian Clover","Test optimization is broken in IDEA11 and above","JetBrains have changed sth in IDEA 11 regarding unit test run configuration, as a consequence Clover does not see and thus does not optimize all unit tests. Problem does not occur on IDEA 9.x, 10.x, 10.5.x. It is present on IDEA 11.x and probably also on 12.x.    See attached images.",Bug,Medium,Closed,"2012-11-08 14:25:18","2012-11-08 14:25:18",2
"Atlassian Clover","Check Now button does not work if project is not opened in IDEA","Install the latest Clover plugin version in IDEA. Click Settings > IDE Settings > Clover > Auto Update > Check now button.     If project is opened then pop-up is shown that the latest version is already installed. If no project is opened (i.e. you're on a IDEA's welcome page), pop-up is not shown. See attached images.    Problem occurs on IDEA 11.x and 12.x. ",Bug,Low,Closed,"2012-11-08 13:48:01","2012-11-08 13:48:01",1
"Atlassian Clover","Cloud Report in IDEA shows interfaces","Cloud Report in IDEA is inconsistent with a Cloud Report in Eclipse - it shows interfaces, which does not actually have any executable code. It shows also annotations.    Fix: don't list objects (interfaces, classes) which do not have any statements in the Cloud Report. Note that simple check if !isInterface() is not sufficient as interfaces in Java8 will have default methods with code.",Bug,Low,Closed,"2012-11-08 13:16:37","2012-11-08 13:16:37",2
"Atlassian Clover","Multiple test cases in Test Runs view in Eclipse","If unit tests are executed several times since the last build, the Test Run view shows multiple test results. Not a bug actually, but it could be improved by showing last results only. See screenshot. Affects all supported eclipse versions. ",Suggestion,,Closed,"2012-11-08 13:04:30","2012-11-08 13:04:30",3
"Atlassian Clover","Multiple test cases in Test Run Explorer in IDEA","Quickly click 'run' button in order to execute multiple sets of unit tests in parallel. IDEA runs them in parallel, as a consequence we've got duplicated test cases on a list. See attached screenshot. Affects all supported IDEA versions.     We should have test cases from last test run only.",Suggestion,,Closed,"2012-11-08 12:58:41","2012-11-08 12:58:41",2
"Atlassian Clover","Highlight whole method body if method is not covered","If given method was not executed at all, the HTML report shows red highlighting only for method header. It's not a bug in code - our Velocity templates are just written this way. We should highlight the whole method body in red - in the same way as Eclipse/IntelliJ does. See screenshot. ",Suggestion,,Closed,"2012-11-08 10:00:32","2012-11-08 10:00:32",5
"Atlassian Clover","Fix ruler coloring when include coverage from passed only is enabled","Eclipse. Java Editor. Left ruler showing coverage colours (green/yellow/blue). Rules shows yellow coverage when the include from passed only option is enabled. There should be no yellow colour in such case.     Note: source code is highlighted correctly, metrics are fine too.    See screenshot.",Bug,Low,Closed,"2012-11-08 09:34:31","2012-11-08 09:34:31",1
"Atlassian Clover","Errors in ErrorLog when toggling between projects with Dashboard view active","1) Toggle between cloverized projects. Dashboard visible.    Message: Unexpected URI in the Dashboard view: C:\Users\Marek\.workspace-eclipse-3.4.2\Moneybags\.clover\report\dashboard-eclipse.html          2) Right click on a closed project, which  was cloverized before. Dashboard view visible.     Message: Error creating the dashboard        3) Cloverized project selected in Package Explorer, Dashboard view opened. Close the selected project.    Message: Problem generating Dashboard report      ",Bug,Low,Closed,"2012-11-07 11:21:47","2012-11-07 11:21:47",1
"Atlassian Clover","The clover-log should use default test detection if testSources are not defined","*Steps to reproduce:*    1) Add following target to clover-ant-X.Y.Z/tutorial/build_completed.xml:    {code:xml}  <target name=clover.log>    <clover-log codeType=APPLICATION/>    <clover-log codeType=TEST/>    <clover-log codeType=ALL/>  </target>  {code}    2) Run         It will produce output like:        *Result:*    All classes were qualified to APPLICATION; if we compare it with XML or HTML reports, test and application classes are distinguished there. This is normal behaviour because <clover-log> requires the <testSources> tag to be defined, for instance:        works fine.    *Improvement:*    Try to use the [default test detection algorithm|https://confluence.atlassian.com/display/CLOVER/Clover+test+detection] in order to find test classes. It would work in the same way as [<clover-setup>|https://confluence.atlassian.com/display/CLOVER/clover-setup] task when the <testsources> tag is not defined.   ",Suggestion,,Closed,"2012-11-07 09:56:13","2012-11-07 09:56:13",3
"Atlassian Clover","Make HTML report more consistent about number of classes","See attached screenshot. HTML report should list interfaces too.",Suggestion,,Closed,"2012-11-07 08:58:34","2012-11-07 08:58:34",2
"Atlassian Clover","Add maxComplexity / maxStatements for Clover-for-Maven","Ant has extra maxComplexity and maxStatements attributes available which are not supported in Maven plugin, for example:    in Maven we have _name_ and _regexp_ attributes only:    *Possible solution*    Create <methodContextsExt> which would accept entries like:    Alternatively, extend parsing of existing <methodContexts> tag so whenever it finds the <methodContext> entry it will not treat it as name of new context but as a structure from sample above.    See also [-CLOV-1162-|../browse/CLOV-1162].",Suggestion,,Closed,"2012-10-26 13:46:58","2012-10-26 13:46:58",2
"Atlassian Clover","CloverOptimizerMojo does not support full include/exclude syntax","*Problem:*    CloverOptimizerMojo does not support full include/exclude syntax, which can be handled by maven-surefire-plugin. Two cases are not handled right now:    (1) multiple paths separated by comma       (2) regular expression instead of Ant-style pattern      See: http://maven.apache.org/plugins/maven-surefire-plugin/examples/inclusion-exclusion.html    *Workaround:*    (1) use separate entries, like:      (2) not available; user can try to replace regexp by set of Ant-style patterns      *Implementation:*    CloverOptimizerMojo relies an Ant-style patterns underneath. The CloverOptimizerMojo.createFileSet() method has          fix for (1) - split every element in includes/excludes arrays using the comma delimiter and pass expanded arrays to appendIncludes()    fix for (2) - find all elements from includes/excludes arrays having %regexp keyword, run file search on _directory_ using a filename matcher with regexp, create include/exclude for every file matched  ",Bug,Medium,Closed,"2012-10-22 08:58:04","2012-10-22 08:58:04",1
"Atlassian Clover","Grails Clover Plugin does not intercept 'testc' compiler","Grails 2.x has introduced a new compiler for building unit tests (from test/unit directory). The 'testc' task is the *org.codehaus.groovy.grails.test.compiler.GrailsTestCompiler* Build log looks like this:        Clover does not intercept this compiler call (it supports Groovyc, Grailsc, GrailsCompiler). As a consequence unit tests are not instrumented and not included in coverage.",Bug,High,Closed,"2012-10-15 11:50:09","2012-10-15 11:50:09",1
"Atlassian Clover","Clover does not work with Groovy 2.x","*Problem:*    Clover instrumentation fails for Groovy 2.x with a stack trace like below:        *Reason:*    RecorderGetterBytecodeInstruction extends org.codehaus.groovy.classgen.BytecodeInstruction  and implements a following method:  public void visit(groovyjarjarasm.asm.MethodVisitor methodVisitor)    In Groovy 1.x MethodVisitor is an interface. In Groovy 2.x MethodVisitor is a class. Although RecorderGetterBytecodeInstruction compiles correctly with both Groovy versions, it fails at runtime during bytecode verification, becase visit() method gets different bytecode signature.    *Solution:*    Compile RecorderGetterBytecodeInstruction against two different Groovy versions. Load proper version using reflections at runtime.   ",Bug,High,Closed,"2012-10-11 13:33:32","2012-10-11 13:33:32",2
"Atlassian Clover","Fix AbstractAntLogger","The AbstractAntLogger class logs the message only if Ant Task is not null:        As a consequence, no log is availalbe in case when code it's called outside Ant - problem was found in open-source Gradle Clover Plugin.",Bug,Low,Closed,"2012-10-10 07:54:24","2012-10-10 07:54:24",1
"Atlassian Clover","Generate cumulative statement / complexity metric for need of methodContext filtering","A method context has maxComplexity / maxStatements attributes which allow to reduce the scope of context filter for methods where these metrics are lower than defined level (by default maxComplexity/maxStatements is Int.MAX_VALUE, i.e. all methods are taken into account). Example:    {code:xml}  <methodContext name=trivial regexp=.* maxStatements=1/>  {code}    However, customer reported a problem that it excludes methods containing inline classes, for instance:    {code:java}  // the getListener() method has only one statement: return <object>;  // if you use <methodContext name=trivial regexp=.* maxStatements=1>  // then the whole code block will be filtered-out, including the actionPerformed() method  ActionListener getListener() {     return new ActionListener() {         public void actionPerformed(ActionEvent e) {             System.out.println(statement #1);             System.out.println(statement #2);         }     };   }  {code}    In the case above ActionListener() is an inner class so it has their own metrics. And because of fact that context filters are cumulative (so that whenever any code pattern is matched, then the whole block is excluded), the whole getListener() method is filtered-out, including inner class.    *Solution:*    We cannot change existing metrics (without breaking backward compatibility) and we cannot change the way how blocks are excluded (it would make no sense). But we can create new metrics called: cumulativeComplexity and cumulativeStatements. It would work as follows:     * for every interface, class, enum or method find all inner classes, interfaces, enums or methods (*)   ** this can be checked by matching occupied code regions (on a database level during metric calculation - preferred) or during instrumentation (code parser)   * calculate cumulativeComplexity and cumulativeStatements by adding cumulative value from all inner objects to current entity complexity/statements value   * add maxCumulativeComplexity / maxCumulativeStatments to Ant clover-setup/clover-instr and Maven clover2:setup / clover2:instr goals   ** html reports would probably remain unchanged (just grey-out)    (*) yes we should make code more flexible in order to make it ready to support code constructs like default methods in Java8 interfaces or Scala's functions inside functions etc   ",Suggestion,,Closed,"2012-10-08 20:33:31","2012-10-08 20:33:31",8
"Atlassian Clover","Add drop-down with two options for coverage","Add the drop-down listbox which will have show cumulative coverage and show coverage from last run options. It should be added in Eclipse and IDEA.    Note that the span option is already available (Window > Preferences > Clover) but we can have either:   * have time-based span or    * set it to 0seconds which means load everything.      Background reason: coverage is cumulative. Some customer have pointed out that coverage data for successive incremental change/save/compile/test cycles can lie and show coverage that's no longer there. That's because we aggregate all coverage data since the last full rebuild. We will hopefully have a better way of showing this in the future. In the meantime, scrubbing the coverage for a project and re-running the tests will show the coverage of tests just run.    ",Suggestion,,Closed,"2012-10-08 13:37:48","2012-10-08 13:37:48",2
"Atlassian Clover","Change default sort order in coverage report for packages/classes/methods","Coverage report - show the least covered packages/classes/methods first. Table should not start with the highest coverage (starting from 100%) at the top, because developer is not interested in code which is already covered and tested, but in white spots. Add the possibility to sort by any column.    Affected: HTML/IDE",Suggestion,,Closed,"2012-10-08 13:31:27","2012-10-08 13:31:27",2
"Atlassian Clover","Create small legend for Top Risks and Quick Wins in Cloud report","Currently user does not know what the font size and colour means until he reads the documentation. Add small legend box or at least a single-line description for these two reports.     Affects HTML report as well as Eclipse/IDEA views. ",Suggestion,,Closed,"2012-10-08 13:28:56","2012-10-08 13:28:56",1
"Atlassian Clover","Run with Clover as on a project with no Clover","Clover-for-Eclipse. When you have a project with Clover disabled, the Run with Clover as and Run optimized buttons are still active. It makes no sense, buttons should be grayed-out.",Suggestion,,Closed,"2012-10-08 12:54:01","2012-10-08 12:54:01",1
"Atlassian Clover","Refresh clover.atlassian.com","The http://clover.atlassian.com/ page was not updated for last 2 years. Re-activate Bamboo builds related with this site to have live data. Add a link to this page on main Clover product page:    http://www.atlassian.com/software/clover/overview  ",Suggestion,,Closed,"2012-10-08 12:41:44","2012-10-08 12:41:44",1
"Atlassian Clover","Simple installer for Clover-for-IDEA","When someone downloads the Clover-for-IDEA from www.atlassian.com he gets clover-idea-x.x.x.jar file. What to do next? Of course you have to open IDEA, select Settings > Plugins > Install from disk, but user might not know. Especially when taking into account that Install from disk is not available in older IDEA versions.     New feature: provide simple installer for Clover-for-IDEA. When user double-clicks on a JAR, a GUI installer starts (class defined in MANIFEST.MF) which asks for location of IDEA installation. Simple check whether selected folder contains config/plugins directory and copy jar into given location. Show also message how it can be installed from IDEA GUI.    Business value: makes Clover evaluation easier.  ",Suggestion,,Closed,"2012-10-08 12:39:06","2012-10-08 12:39:06",2
"Atlassian Clover","Inconsistent popup menu in different IDEA versions","IDEA 10 and newer is not showing the Exclude from compile option when sources are instrumented. In IDEA9 it was working fine. See 'popup_menu_in_ideas.png' screenshot. My suspicion is that IDEA somehow does not treat instrumented file as a source code, thus hiding this option from popup menu.    What's more, when you click on the Jump to source it opens the Explorer window, instead of opening the source file in IDEA.    See also:    META-INF/plugin.xml  com.cenqua.clover.idea.CloverPlugin.initComponent()    com.intellij.openapi.actionSystem.IdeActions;      @NonNls String GROUP_COMPILER_ERROR_VIEW_POPUP = CompilerErrorViewPopupMenu;    com.intellij.compiler.imp.CompilerErrorTreeView.addExtraPopupMenuActions();  ",Bug,Low,Closed,"2012-10-08 12:32:19","2012-10-08 12:32:19",2
"Atlassian Clover","Clover fails to find coverage snapshot files when IBM JRE is used","*Problem:* it seems that IBM JRE implementation differs from Oracle JRE in such way that Object.hashCode() can return a negative value. As a consequence, file name suffix generated for coverage snapshot and test slice snapshot may be composed not only of '0-9a-z_' characters, but also have minus - sign in it.     As a result such file name does not match regular expression used for searching of coverage files and coverage is not read.     *Workaround:* rename coverage snapshot file(s) and remove - character.  ",Bug,Low,Closed,"2012-09-28 15:23:53","2012-09-28 15:23:53",1
"Atlassian Clover","Clover does not instrument groovy source files, (groovy-eclipse compiler) when located in src/main/groovy","When building a groovy project with maven, I am trying to get clover code coverage reports. With all source files in .java and in src/main/java, clover works fine. However, with all source files in .groovy and in src/main/groovy, clover can not instrument the files (clover2:instrument, or clover2:setup).     Everything that I can find is saying that clover versions after 3.1.3 support the maven groovy eclipse compiler (so long as the groovy files are located in src/main/groovy). See this ticket: https://jira.atlassian.com/browse/CLOV-1021?page=com.atlassian.jira.plugin.system.issuetabpanels:changehistory-tabpanel      There is another support ticket that I found that seems to cover the same issue, however I cannot access it. Here is the link  https://support.atlassian.com/browse/CLV-5878    A partial output log is included here. I will try to come up with a small test project that I can upload here. Any help would be appreciated.    ",Bug,Medium,Closed,"2012-09-24 21:24:25","2012-09-24 21:24:25",5
"Atlassian Clover","Make possible to see instrumented sources in Clover-for-Eclipse","Clover-for-Eclipse: Clover instrumentation in performed in memory during compilation. As a consequence when there is any build error, we can see original source only and cannot check whether the problem lies in the Clover instrumenter itself.     For example, in Clover-for-IDEA we can see instrumented sources because they're stored in temporary directory.    To be implemented: add an option to get instrumented sources in Eclipse too.",Suggestion,,Closed,"2012-09-24 09:11:08","2012-09-24 09:11:08",1
"Atlassian Clover","Implement integration with Maven Tycho Plugin","Currently Clover-for-Maven cannot handle maven build with the maven-tycho-plugin. More details here: https://answers.atlassian.com/questions/1919/maven-3-tycho-and-clover    To be done: hack the maven-tycho-plugin and intercept its internal call of javac compiler and instrument sources on the fly.",Suggestion,,Closed,"2012-09-21 09:04:39","2012-09-21 09:04:39",4
"Atlassian Clover","Support *.groovy files in src/main/java folder for groovy-eclipse-plugin","*Problem:*    Clover fails during instrumentation of *.groovy files in case when sources are put in src/main/java directory, instead of src/main/groovy and when the groovy-eclipse-plugin is used.     *Steps to reproduce:*     * create a project with groovy-eclipse-plugin and maven-clover2-plugin   * put a *.groovy file inside src/main/java   * run build    *Expected error:*        A reason is that Java compiler is involved here, Clover is called, it filters out all files which do not have *.java extension and as a consequence it passes wrong argument to CloverInstr.    *Solution:*    1) Add check to AbstractInstrumenter (maven-clover2-plugin) so it does not call CloverInstr in case no matching files are found    2) Add support for src/main/java, src/test/java directories for Groovy - probably in GroovySourceScanner + CloverInstrumentInternalMojo      *Workaround:*    Put Groovy files in correct location i.e. src/main/groovy - they'll be handled correctly by Clover.    *Background:*    According to groovy-eclipse-plugin documentation, they recommend putting groovy files inside java folder - it's not nice, but it's the fastest set-up.     http://groovy.codehaus.org/Groovy-Eclipse+compiler+plugin+for+Maven",Bug,Medium,Closed,"2012-09-11 15:01:30","2012-09-11 15:01:30",3
"Atlassian Clover","Remove obsolete pages from Clover 3.1 space","Hi Melanie,    May I ask your team to delete following pages from CLOVER space? All of them are obsolete or available in spaces for older Clover releases. They are unnecessarily cluttering current documentation.     https://confluence.atlassian.com/display/CLOVER/Changes+in+2.6.3.2+for+IDEA  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.6.3+for+IDEA  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.6.0+for+IDEA  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.5.1+for+IDEA  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.5.0+for+IDEA  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.4.3+for+IDEA  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.4.2+for+IDEA  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.4.1+for+IDEA  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.4.0+for+IDEA  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.3.2-beta5+for+IDEA  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.3.2-beta4+for+IDEA  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.3.2-beta3+for+IDEA  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.3.2-beta2+for+IDEA  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.3.1-beta1+for+IDEA    https://confluence.atlassian.com/display/CLOVER/Changes+in+2.6.3+for+Eclipse  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.6.2+for+Eclipse  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.6.0+for+Eclipse  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.5.1+for+Eclipse  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.5.0+for+Eclipse  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.4.3+for+Eclipse  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.4.2+for+Eclipse  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.4.0+for+Eclipse  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.3.2+for+Eclipse  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.3.1+for+Eclipse  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.2.1+for+Eclipse  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.1.0+for+Eclipse  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.0.3+for+Eclipse  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.0.2+for+Eclipse  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.0.1+for+Eclipse  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.0.0+for+Eclipse  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.0.0.b2_1+for+Eclipse    https://confluence.atlassian.com/display/CLOVER/Changes+in+2.6.3+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.6.2+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.6.0+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.5.1+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.5.0+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.4.3+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.4.2+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.4.0+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.3.2+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.3.1+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.3.0+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.2.1+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.2.0+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.1.0+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.0b2+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.0b1+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.0a5+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.0a4+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.0a3+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.0a2+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.0a1+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.0.3+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.0.2+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.0.1+for+Ant  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.0.0+for+Ant    https://confluence.atlassian.com/display/CLOVER/Changes+in+2.6.0+for+Maven+2  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.5.0+for+Maven+2  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.4.3+for+Maven+2  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.4.2+for+Maven+2  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.3.2+for+Maven+2  https://confluence.atlassian.com/display/CLOVER/Changes+in+2.3.0+for+Maven+2  https://confluence.atlassian.com/pages/viewpage.action?pageId=110035179  https://confluence.atlassian.com/pages/viewpage.action?pageId=134873325  https://confluence.atlassian.com/pages/viewpage.action?pageId=103710921    https://confluence.atlassian.com/display/CLOVER/%5BTRASH%5D+Using+Clover+for+Maven+2+with+the+gwt-maven-plugin  https://confluence.atlassian.com/display/CLOVER/%5BTRASH%5D+Using+Clover+with+the+GWT-maven+plugin    https://confluence.atlassian.com/pages/viewpage.action?pageId=93683890  https://confluence.atlassian.com/pages/viewpage.action?pageId=71599635  https://confluence.atlassian.com/display/CLOVER/%5BTRASH%5D+Clover-for-Eclipse+User%27s+Guide  https://confluence.atlassian.com/display/CLOVER/%28hidden+draft%29+Clover-for+Eclipse+Upgrade+Guide  ",Suggestion,,Closed,"2012-09-07 12:06:04","2012-09-07 12:06:04",1
"Atlassian Clover","Expose a Service Provider Interface for Clover for handling new languages","Create a Service Provider Interface for Clover, which will allow to attach new source code and/or byte code instrumenters. It will allow us to create a pluggable architecture so that new programming languages (e.g. Scala, JRuby, Jython, Closure) could be supported.     *Rough idea:*   * new language instrumenters can be attached by META-INF/services   ** they can provide some callback like canInstrument(File) or canInstrument(InstrumentationSource)   ** clover shall pass file/instrumentation source to such instrumenter together with Clover's configuration and an open instrumentation session   ** extension instruments on its own calling session.enterXyz()/exitXyz() methods   ** extension writes output file on its own   ** language instrumenter could work also with an Abstract Syntax Tree (e.g. Groovy or Scala - we may need a different way of attaching here)     * new language renderers can be attached by META-INF/services - move to another issue?      ",Suggestion,,Closed,"2012-09-06 10:48:01","2012-09-06 10:48:01",8
"Atlassian Clover","Refresh Clover-for-Scala prototype","Tasks:   * take Scala prototype https://confluence.atlassian.com/display/DEV/ShipIt+12+Delivery+-+Clover+for+Scala,    * change the code so that it will use new Clover Service Provider Interface - CLOV-1142   * make it working with the latest Clover code base (version 4.0.x),   ",Suggestion,,Closed,"2012-09-06 10:31:07","2012-09-06 10:31:07",13
"Atlassian Clover","Make Clover-for-Android prototype publicly available","Take a ShipIt prototype prepared by Michael, merge with the latest Clover version, make it working on Eclipse ADT, publish manual how to use it on CAC/Clover-for-Android page. ",Suggestion,,Closed,"2012-09-06 10:26:03","2012-09-06 10:26:03",5
"Atlassian Clover","as a developer I'd like to instrument Java8 source code with no parse error","Ability to instrument source code containing Java8 syntax, but without instrumentation of the new language features (i.e. lambdas would be 'invisible for Clover).   See:  http://openjdk.java.net/projects/lambda/  Scope:  * instrumentation (transparency of new language features)  * java.g file  * reporting (syntax highlighting should still work)  Out of scope:  * changes in database format ",Suggestion,,Closed,"2012-09-04 12:58:02","2012-09-04 12:58:02",0
"Atlassian Clover","Create utility for upgrading third party libraries bundled in Clover","In Clover-for-Ant we have an upgrade.xml Ant script, which can repackage clover.jar and install new version of jfreechart library into it. We shall extend this script to support replacement of all third party libraries used in Clover. Such script should be also available for Clover-for-Eclipse and Clover-for-IDEA.     Keep in mind that we have to retrotranslate third party classes during repackaging to have them compatible with Java 1.4.    Keep in mind that we have to prefix java packages with clover. in order to avoid name space conflicts.    Packages:   * com.google.gson   * com.atlassian.* (Atlassian API)   * com.keypoint.*   * com.lowagie.*   * gnu.cajo.*   * it.unimi.dsi.fastutil.*   * org.apache.commons.*   * org.apache.log4j.*   * org.apache.oro.*   * org.apache.velocity.*   * org.codehaus.groovy.antlr (?)   * org.jfree   * retrotranslator   * org.apache.tools.ant.* (?)  ",Suggestion,,Closed,"2012-09-04 07:55:30","2012-09-04 07:55:30",1
"Atlassian Clover","Remove grover*.jar after build","A maven-clover2-plugin creates a groover*.jar file in $java.io.tmpdir directory. This JAR is next being dynamically added as a build dependency artifact. It must be available till end of the build.    Unfortunately Maven has nothing like post-build-cleanup phase (which would be always executed at end of build). We need a workaround for this, for example:    1) Create a new Clover goal, like clover2:post-build-cleanup, which will remove this file.     2) Alternatively, find a way to add Clover groovy runtime classes to classpath, so that creation of JAR file would not be needed anymore.     As soon as this bug is fixed, a corresponding update of Bamboo Clover Plugin is necessary. See linked issue.    *Solution implemented:*    Instead of playing with post-build cleanup, there are two new options available in <clover-setup/> taks (Ant) and clover2:setup / clover2:instrument goals (Maven):   * skipGroverJar - if set to true it will not extract artifact at all (can be used only if there's no Groovy code in a project)   * groverJar - target location of grover.jar file (fixed name and location instead of generating temporary file name in java.io.tmpdir)  ",Bug,Low,Closed,"2012-09-03 13:27:24","2012-09-03 13:27:24",2
"Atlassian Clover","Coverage ruler does not refresh correctly when all source code annotations are disabled","A left Clover coverage ruler does not refresh correctly after change in coverage in case when we don't have Clover-related source code annotations enabled. Steps to reproduce:   - install Clover, enable it for a Moneybags project, perform full rebuild   - open MoneyBagTest -> coverage is red   - open Window > Preferences > Editors > Text editors > Annotations   - for all Clover: xxx annotation types disable Vertical ruler, Overview ruler and Text as checkboxes   - run opened test case (right click, run as, junit test)    Result:   - JUnit view shows that tests were executed, Coverage Explorer view is also updated correctly, but the ruler is still highlighted in red   - now scroll the text editor up and down - ruler refreshes during repaint; (the same happens when editor is reopened or resized)    See attached screenshot.    Expected result:  1) ruler should refresh automatically when coverage data is changed, no matter whether source annotation is enabled or not OR  2) ruler should not draw any color if corresponding source code annotation is disabled  ",Bug,Low,Closed,"2012-08-31 10:11:25","2012-08-31 10:11:25",2
"Atlassian Clover","Coverage ruler does not read settings from Preferences","A left ruler showing code coverage markers is always reading default color values (defined in plugin.xml), instead of current settings from IDE (Window > Preferences > ... Text editors > Annotations). Note that color in text editor is updated correctly. See attached screenshot. ",Bug,Low,Closed,"2012-08-31 08:03:19","2012-08-31 08:03:19",1
"Atlassian Clover","Fix Clover-for-IDEA compatibility with IntelliJ IDEA 12","IDEA12 is going to be released quite soon. Make sure that Clover will work on it properly:     http://blogs.jetbrains.com/idea/2012/08/meet-august-with-new-intellij-idea-12-eap-build-120305/  http://confluence.jetbrains.net/display/IDEADEV/Leda+120.305+Release+Notes  http://confluence.jetbrains.net/display/IDEADEV/IDEA+12+EAP",Bug,Medium,Closed,"2012-08-02 10:06:44","2012-08-02 10:06:44",4
"Atlassian Clover","Unicode CR/LF characters in javadoc causes Eclipse/IntelliJ editors get out of sync","Try the following example:    {code:java}  class Unicode {         void foo() {       System.out.println(1);       /** {@code \u000a} LF */      }                        void goo() {       System.out.println(2);            /** {@code \u000d} CR */      }                        void hoo() {       System.out.println(3);      }                    } // end  {code}    In Eclipse editor, every CR/LF written in unicode causes that it interprets it as newline character. As a result left ruler sees more lines and all subsequent coverage blocks are shifted down.       In IntelliJ it's even worse, as we get exception. Stack trace:      ",Bug,Medium,Closed,"2012-07-30 12:49:30","2012-07-30 12:49:30",2
"Atlassian Clover","Prepare manual how to set-up cross-platform testing","Write how to set up Clover in case when someone is using a test framework not written in Java - for example shell scripts, C/C++ code. How to wrap this so that Clover can not only execute, but also optimize such tests. ",Suggestion,,Closed,"2012-07-24 07:47:16","2012-07-24 07:47:16",1
"Atlassian Clover","Reading clover database across platforms does not resolve path correctly for FileInfo","Clover database contains FileInfo objects for every source file. One of FileInfo fields is an absolute path to given file. When database is written, it uses current platform file separator for file name ('\' for windows, '/' for Linux/MacOS). However, when database is read it interprets file name using again current platform file separator.     As a consequence, when database is generated on Windows and report generated on Linux, it cannot resolve file name properly - it takes whole path as a single path segment, resulting in paths like:    /path/from/report/generation/sourcepath/D:/path/from/instrumented/build/file.java    As a consequence report generation does create html file containing source code with highlighted coverage.",Bug,Medium,Closed,"2012-07-11 11:55:15","2012-07-11 11:55:15",1
"Atlassian Clover","Prepare tutorial how to instrument RCP application under Eclipse","Prepare manual on confluence.atlassian.com describing how to instrument and run RCP application under Eclipse IDE. Topics to be covered:   * Run with Clover as ... vs Run as ...   * various options in Run Configuration dialog   * adding Clover dependency via Xbootclasspath or manually created plugin   * exporting instrumented code (plugins, fragments, features, product)   * config.ini for product and Xbootclasspath - running exported product (separately) and running it in IDE    Prepare also code example showing how we can use Clover with RCP application.     Open issue: how to distribute it with Clover-for-Eclipse. Options:   * prepare sample aside and attach as zip to manual on confluence   * implement a wizard so that using File > New > Example > Clover RCP Example will generate sample projects in workspace (preferred solution, but more work effort)  ",Suggestion,,Closed,"2012-07-11 07:56:18","2012-07-11 07:56:18",1
"Atlassian Clover","Unit test failure during Clover2 custom lifecycle do not fail builds","The Maven Clover2 plugin creates a custom lifecycle. When the unit tests are run in that lifecycle the build will not fail if there are test failures. This is because the lifecycle.xml file forces the Surefire plugin's testFailureIgnore configuration property to false. This is especially problematic in Jenkins builds where unit tests should fail the build (rather than allowing them to be unstable). Please remove this configuration or replace it with a mechanism that can be set in the POM.    The file in question is src/main/resources/META-INF/maven/lifecycle.xml. See the [related Answers discussion|https://answers.atlassian.com/questions/61973/clover-ignore-dmaven-test-failure-ignore-false].",Bug,High,Closed,"2012-06-29 06:24:51","2012-06-29 06:24:51",2
"Atlassian Clover","Eclipse does not exclude filtered-out methods from statistics","When we define certain methods to be filtered-out in Eclipse, they are being marked as not executed (hit count = 0) instead of not being taken into consideration at all (no hit count).     What's interesting, an HTML report generated from Eclipse use filters correctly. Metrics in Eclipse says: 4 methods, 4 statements; Metrics in HTML says: 3 methods, 3 statements.    See attached screenshots.",Bug,Medium,Closed,"2012-06-25 12:14:47","2012-06-25 12:14:47",1
"Atlassian Clover","bad alignment of About box in IDEA","see screenshot",Bug,Low,Closed,"2012-06-20 08:38:54","2012-06-20 08:38:54",1
"Atlassian Clover","license information inconsistent in IDEA","see screenshot",Bug,Low,Closed,"2012-06-20 08:37:28","2012-06-20 08:37:28",1
"Atlassian Clover","Drop support for Eclipse 3.4, 3.5 and RAD 7.5","Drop support for Eclipse 3.4.x and RAD 7.5. These tools are practically unused.     Background:    According to the latest 2012 [Eclipse community survey|http://ianskerrett.wordpress.com/2012/06/08/eclipse-community-survey-result-for-2012/] the 3.4 version is being used by 0.7% of users; 3.5 is used by 2.3% of users.    Rational Application Developer 8.0 which is based on Eclipse 3.6 is available since September 2010, so since nearly two years - i.e. we can expect that IBM customers had a lot of time to upgrade to the latest RAD. The previous version of RAD 7.5 (based on Eclipse 3.4) was released in 2008.    To do:   * update http://confluence.atlassian.com/display/CLOVER/Supported+Platforms page   * update clover-for-eclipse build scripts and manifest files  ",Suggestion,,Closed,"2012-06-11 07:23:07","2012-06-11 07:23:07",1
"Atlassian Clover","Guide users through Eclipse setup","Our current Clover-for-Eclipse documentation is hard to follow.     First it tells you how to enable Clover for your projects, mentions briefly that the views will pop up but won't have anything interesting on them yet, and then goes into great detail about each view.    It would be helpful to instead walk the user through how to enable Clover for a project, and then go straight to configuration. There's no need to explain the views until there's something to show on them!    It would also be helpful to describe how a project should be laid out. Do you need your test classes in the same Eclipse project as your source code, for example?  ",Suggestion,,Closed,"2012-05-31 18:59:42","2012-05-31 18:59:42",2
"Atlassian Clover","Finish About+Clover-for-Grails page","Complete content on http://confluence.atlassian.com/display/CLOVER/About+Clover-for-Grails and make it visible.    Expand http://confluence.atlassian.com/display/CLOVER/Coverage+Legend  Retake screengrab - with more context - i.e. bigger image and provide an explanation of the columns.    Expand http://confluence.atlassian.com/display/CLOVER/Source+Cross-Referencing+in+Reports  Add image with mouse pointer - i.e. hyperlinks within the code. Try to avoid getting the tooltip in the image as it is unrelated to the (point of the) hyperlink itself.    Add more examples for advanced setuptask / reporttask configuration. ",Suggestion,,Closed,"2012-05-21 12:18:50","2012-05-21 12:18:50",1
"Atlassian Clover","Consistent statistics reporting in IDE and HTML reports for subpackages","See https://answers.atlassian.com/questions/11664/package-summary-including-sub-packages    A problem is as follows.     In IDE (IntelliJ/Eclipse) in the Coverage view when we see statistics for given package it is a aggregated summary of the package and all its subpackages. By clicking Flatten packages we can see statistics for a package without subpackages. See idea1.png.     In HTML report we can see aggregated coverage only for the whole project. When we click on a certain package, we see statistics gathered only from classes from given package and not its subpackages. See html1.png and html2.png.    The expected behaviour is as follows:    1) When we click on the Coverage link in top-left frame in HTML report, the functionality shall be as it is now. I.e. it should open in the right (main) frame a list of packages, a statistics panel in the top-right corner will show stats for whole project, clicking on a package on the list will open a package details frame with stats in top-right corner for the package only.    2) When we click on the Coverage (Aggregate) link in top-left frame, it will open in right frame list of package and a statistics panel for whole project (as it is now). But when user clicks on a package from list it will open a different package details frame with aggregated stats in top-right corner for the package and all subpackages.    3) A stats panel     for option 1 shall have a label like Statistics for package (without subpackages) <package name> and     for option 2 like Statistics for package (with subpackages) <package name>    4) A stats panel should have a link show with subpackages / show without subpackages for easy switch between reports.    See html3.png      *Update:*    In new HTML report introduced in Clover 4, a package-level page could look this way:    [^clover4-adg-package.png]    so that toggle buttons would be similar to those a project-level page:    [^clover4-adg-project.png]    ",Suggestion,,Closed,"2012-05-16 09:19:34","2012-05-16 09:19:34",3
"Atlassian Clover","Prepare tutorial how to configure distributed coverage for web applications","Extend a following page:  http://confluence.atlassian.com/display/CLOVER/Working+with+Distributed+Applications  or add a subpage.     Prepare a step-by-step tutorial how to set compile options, deploy artifacts and set container options in order to test web applications. Things to be considered (not a complete list):     * fact that -Dclover.distributed.coverage=ON it will use the default settings including the default numClients=0     * numClients must be set to 1 in order to have blocking unit tests     * we need a servlet context listener to avoid circular dependency: unit tests are waiting for business code to connect, but business code will not connect until first request (which will be triggered by unit tests)",Suggestion,,Closed,"2012-05-07 14:21:54","2012-05-07 14:21:54",1
"Atlassian Clover","Line coverage data is inconsistent","I'm running 2.4.1 on IDEA 7 and get inconsistent line and branch coverage in the editor: every line that is hit by the a test always gets 1 as the hitcount.  ",Bug,Medium,Closed,"2008-11-18 04:51:26","2008-11-18 04:51:26",2
"Atlassian Clover","Message in Balloon after clean snapshot is bogus","# Clean shapshot  # First Optimised test run the balloon message is ok (see CIJ-272 re my thoughts on it)  # Second optmised test run has some odd figures in it relating to expected savings and total test run time.    ",Bug,Low,Closed,"2009-05-06 07:19:02","2009-05-06 07:19:02",2
"Atlassian Clover","No instrumentation Done, Always get two Tests run.","Although 0 instr. was done, I still see two tests run.    ",Bug,Medium,Closed,"2009-05-08 05:24:56","2009-05-08 05:24:56",1
"Atlassian Clover","Setting special instrumentation output dir to a source dir deletes all source!",,Bug,High,Closed,"2009-03-23 23:55:39","2009-03-23 23:55:39",1
"Atlassian Clover","Write up on CAC how to get Clover working with Maven and integration tests","In particular:  * numClients=1 should be set in the config  * that the test runner JVM should not have -Dclover.distributed.coverage=ON set as this will override the numClients setting  * that a context listener that starts on webapp start needs to be registered in web.xml so that the webapp Clover runtime connects back to the test runner JVM so that tests proceed ",Bug,Low,Closed,"2012-05-03 12:20:07","2012-05-03 12:20:07",1
"Atlassian Clover","Missing icons on TreeView and Cloud Report tabs","On IDEA 11 the Tree View and Cloud Report tabs have missing icons. See attached screenshot. ",Bug,Low,Closed,"2012-04-20 07:52:42","2012-04-20 07:52:42",2
"Atlassian Clover","Clover-for-Groovy failed to instrument Groovy sources having methods overridden by metaClass ","We were able to get clover report from maven-clover2-plugin even for groovy classes successfully. However when we try to override a method via Groovy metaclass in some tests, clover plugin fails on these tests.    We simply added the following lines to our tests.    MyClass.metaClass.myMethod = {     return called  }     Clover plugin gave the following error.    Exception in thread main BUG! exception in phase 'instruction selection' in source unit Test.groovy Clover-for-Groovy failed to instrument Groovy source: Test.groovy    I attached the full stacktrace for further details.",Bug,Low,Closed,"2012-03-02 08:13:00","2012-03-02 08:13:00",13
"Atlassian Clover","IDEA 11 error turning OFF Clover coverage","Error during dispatching of java.awt.event.MouseEvent[MOUSE_CLICKED,(691,256),absolute(1963,178),button=1,modifiers=Button1,clickCount=1] on frame0  java.lang.NullPointerException   at clover.net.sf.jtreemap.swing.JTreeMap$Zoom.setNewDimension(JTreeMap.java:694)   at clover.net.sf.jtreemap.swing.JTreeMap$Zoom.execute(JTreeMap.java:664)   at clover.net.sf.jtreemap.swing.JTreeMap.zoom(JTreeMap.java:570)   at clover.net.sf.jtreemap.swing.JTreeMap$HandleMouseClick.mouseClicked(JTreeMap.java:616)   at java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:270)   at java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:269)   at java.awt.Component.processMouseEvent(Component.java:6507)   at javax.swing.JComponent.processMouseEvent(JComponent.java:3321)   at java.awt.Component.processEvent(Component.java:6269)   at java.awt.Container.processEvent(Container.java:2229)   at java.awt.Component.dispatchEventImpl(Component.java:4860)   at java.awt.Container.dispatchEventImpl(Container.java:2287)   at java.awt.Component.dispatchEvent(Component.java:4686)   at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4832)   at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4501)   at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4422)   at java.awt.Container.dispatchEventImpl(Container.java:2273)   at java.awt.Window.dispatchEventImpl(Window.java:2713)   at java.awt.Component.dispatchEvent(Component.java:4686)   at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:707)   at java.awt.EventQueue.access$000(EventQueue.java:101)   at java.awt.EventQueue$3.run(EventQueue.java:666)   at java.awt.EventQueue$3.run(EventQueue.java:664)   at java.security.AccessController.doPrivileged(Native Method)   at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76)   at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:87)   at java.awt.EventQueue$4.run(EventQueue.java:680)   at java.awt.EventQueue$4.run(EventQueue.java:678)   at java.security.AccessController.doPrivileged(Native Method)   at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76)   at java.awt.EventQueue.dispatchEvent(EventQueue.java:677)   at com.intellij.ide.IdeEventQueue.e(IdeEventQueue.java:694)   at com.intellij.ide.IdeEventQueue._dispatchEvent(IdeEventQueue.java:530)   at com.intellij.ide.IdeEventQueue.b(IdeEventQueue.java:416)   at com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.java:374)   at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:211)   at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:128)   at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:117)   at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:113)   at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:105)   at java.awt.EventDispatchThread.run(EventDispatchThread.java:90)    ",Bug,Medium,Closed,"2012-01-20 22:17:42","2012-01-20 22:17:42",2
"Atlassian Clover","Log the actual percentage coverage instead of Coverage check PASSED.","Clover logs the minimum percentage:  Checking for coverage of [90.0%] for database    But not the actual percentage.  Coverage check PASSED    Please add this logging, in order to help us know when it's safe to bump the threshold higher.",Suggestion,,Closed,"2011-09-19 19:13:51","2011-09-19 19:13:51",1
"Atlassian Clover","Can't Use Google App Engine Run Configuration in IDEA 10.5 when Clover Plug-in is Installed","I am trying to start a GAE run configuration in IDEA 10.5 - after compilation and the web artifact being built, the process simply fails to start, with no errors.  I uninstalled the plug-in and the process once again starts correctly.    I also attempted to create a plain Java Application run configuration to start the process instead and this also fails with the same issue.  The GAE libraries are pulled in as module libraries, via a Maven POM.  I'm not sure if this is linked, but there definitely seems to be a problem with Run configurations when the main Java class being run is located in an external library, rather than being part of the project code-base.  I've checked the IDEA logs and no errors are thrown.  The plain Java Application run configuration had the following settings:    Main Class: com.google.appengine.tools.development.DevAppServerMain  VM Parameters: -Dappengine.sdk.root=<sdk_root> -javaagent:<sdk_root>/lib/agent/appengine-agent.jar  Program Parameters: --disable_update_check <war_file_location>  Working Directory: <sdk_root>",Bug,Medium,Closed,"2011-08-03 11:36:25","2011-08-03 11:36:25",2
"Atlassian Clover","Test Optimization says 0 tests should run but all tests are run anyway","Recently upgraded my Maven builds to use the Maven Surefire plugin version 2.9. Now my builds that run Clover2:optimized and say 0 tests should run, run all tests anyway. The upshot of this is that our optimized test runs are now taking over an hour versus the 15 to 20 minutes they were when the tests were correctly optimized away.      Here is a section of the log file that shows the problem:    ",Bug,High,Closed,"2011-07-22 21:18:41","2011-07-22 21:18:41",5
"Atlassian Clover","Coverage data not showing up in Intellij","I've got the dev build from CLOV-1004, which worked for Intellij 10.3 but since I upgraded to 10.5.1, neither the latest public rev (3.1.0.v20110608114626-dev) nor the dev version of the plugin from CLOV-1004 works.    In the projects view, it looks like the code is instrumented.  But after I run a test, no coverage information is displayed.  When I explicitly update the clover database, nothing is updated.  The Test Runs view behaves as if I never ran a test.",Bug,Highest,Closed,"2011-07-13 14:43:39","2011-07-13 14:43:39",1
"Atlassian Clover","clover2:check fails with negative coverage if no class to instrument","This happens either if no java class was found for instrumentation or if they were all excluded.  Clover then reports a negative coverage of -100%.    To my mind, this is not correct : strictly speaking, if no java class has to be tested for coverage, there is no relevant coverage value (I guess it is what the -100% means) but check should be OK.  ",Bug,Medium,Closed,"2011-06-24 13:59:51","2011-06-24 13:59:51",1
"Atlassian Clover","Ternary clauses never executed still get coverage","I don't know if this is disoverable at all, but the following example will work with any ternary statement:    @Test  public void testTernaryStatement() {   ternaryStatement(true);  }    public static void ternaryStatement(boolean bool) {   String value = bool ? true : false;   System.out.println(value);  }    This will mark the entire ternary statement as covered, while the false branch was in fact never triggered.      Since Clover is primarily a coverage tool, I marked this issue Major.",Suggestion,,Closed,"2011-03-30 19:36:23","2011-03-30 19:36:23",2
"Atlassian Clover","Cannot select contexts in IDEA 10.0.2","I select either the filter button in the coverage panel or go via the project settings (same either way) to get to the clover setting dialog. I select the 3rd tab (Contexts) and check the check-boxes 'catch bosy' and 'property methods'. The boxes become checked but the Apply button remains disabled (this is the main issue).    I add a new custom context - and the Apply button is enabled.    I click apply and the check boxes all reset back to their un-set state. The custom context remains.    ",Bug,Medium,Closed,"2011-02-16 10:43:10","2011-02-16 10:43:10",1
"Atlassian Clover","Clover's embedding of GSON brings in assembly-descriptor.xml into clover.jar which causes problems for ejbdoclet, others","see support case https://support.atlassian.com/browse/CLV-5576 and forum post http://forums.atlassian.com/thread.jspa?messageID=257357810    the solution is to simply exclude this file when building the clover.jar  ",Bug,Low,Closed,"2010-12-29 00:51:46","2010-12-29 00:51:46",1
"Atlassian Clover","<testsources> does not work with Ant groovyc task","Since TestSourceSet is not Serializable it doesn't work with Ant/groovyc.           ",Bug,Medium,Closed,"2010-10-11 05:13:55","2010-10-11 05:13:55",1
"Atlassian Clover","Occasionally clover is getting broken on the Hudson ","We are using Grails 1.2.2 , Hudson, clover  From time to time Hudson fails with the following console output. Without any changes the next build can be fine.    Licensed under Apache Standard License 2.0  Grails home is set to: D:\Apps\grails-1.2.2    Base Directory: D:\Apps-Pub\HUDSON_HOME\jobs\LifePoints\workspace\Lifepoints  WARNING: Dependencies cannot be resolved for plugin [clover-3.0.2] due to error: null  Resolving dependencies...  Dependencies resolved in 1422ms.  Running script D:\Apps\grails-1.2.2\scripts\TestApp.groovy  Environment set to test  Clover: Using config: [on:true]  Using clover license path: D:\Apps-Pub\HUDSON_HOME\jobs\LifePoints\workspace\Lifepoints/clover.license    [taskdef] Could not load definitions from resource cloverlib.xml. It could not be found.  Error executing script TestApp: Problem: failed to create task or type clover-env  Cause: The name is undefined.  Action: Check the spelling.  Action: Check that any custom tasks/types have been declared.  Action: Check that any <presetdef>/<macrodef> declarations have taken place.    : Problem: failed to create task or type clover-env  Cause: The name is undefined.  Action: Check the spelling.  Action: Check that any custom tasks/types have been declared.  Action: Check that any <presetdef>/<macrodef> declarations have taken place.     at org.apache.tools.ant.UnknownElement.getNotFoundException(UnknownElement.java:484)   at org.apache.tools.ant.UnknownElement.makeObject(UnknownElement.java:416)   at org.apache.tools.ant.UnknownElement.maybeConfigure(UnknownElement.java:160)   at _Events.toggleCloverOn(_Events.groovy:302)   at _Events$_run_closure3.doCall(_Events.groovy:56)   at _GrailsEvents_groovy$_run_closure5.doCall(_GrailsEvents_groovy:58)   at _GrailsEvents_groovy$_run_closure5.call(_GrailsEvents_groovy)   at _GrailsEvents_groovy.run(_GrailsEvents_groovy:62)   at _GrailsEvents_groovy$run.call(Unknown Source)   at _GrailsClean_groovy$run.call(Unknown Source)   at _GrailsClean_groovy.run(_GrailsClean_groovy:29)   at _GrailsClean_groovy$run.call(Unknown Source)   at TestApp.run(TestApp.groovy:44)   at TestApp$run.call(Unknown Source)   at gant.Gant.processTargets(Gant.groovy:494)   at gant.Gant.processTargets(Gant.groovy:480)  Error executing script TestApp: Problem: failed to create task or type clover-env  Cause: The name is undefined.  Action: Check the spelling.  Action: Check that any custom tasks/types have been declared.  Action: Check that any <presetdef>/<macrodef> declarations have taken place.",Bug,Low,Closed,"2010-07-31 00:41:07","2010-07-31 00:41:07",3
"Atlassian Clover","Assertion failing (call not made from EDT)",,Bug,Low,Closed,"2010-06-22 01:00:26","2010-06-22 01:00:26",2
"Atlassian Clover","clover + ant + GWT does not compile and test with clover.","https://support.atlassian.com/browse/BSP-2952      It looks like the GWT.clover.xxx are not executed.    build 06-May-2010 17:24:30 Build sequence for target(s) `clover.fullclean' is [clover.clean, clover.fullclean]  build 06-May-2010 17:24:30 Complete build sequence is [clover.clean, clover.fullclean, clover.save-history, GWT.clover.report, GWT.clover.json, checkstyle, common.checkstyle, buildonly, dist-dev, tools, apicheck-nobuild, apicheck, test, verify, common.all, build, doc, dist, -compile.emma.if.enabled, dev, GWT.with.clover, compile.emma.if.enabled, common.clean, GWT.clover.fullclean, common.build, GWT.clover.current, presubmit, all, GWT.clover.clean, GWT.clover.save-history, clover.snapshot, clover.json, clover.report, user, clover.log, common.compile.emma.if.enabled, ci, common.-compile.emma.if.enabled, GWT.clover.log, bikeshed, emma.merge, GWT.test, with.clover, jni, clean, clover.all, common.-create.emma.coverage.if.enabled, clover.xml, common.verify, -create.emma.coverage.if.enabled, buildtools, clover.current, samples, dist-bikeshed, soyc, GWT.clover.all, GWT.clover.xml, common.test, servlet, GWT.clover.snapshot, ]    However targets without GWT are executed.",Bug,Medium,Closed,"2010-05-10 00:38:13","2010-05-10 00:38:13",3
"Atlassian Clover","Implement Test Optimization for Grails: -clover.optimize","Running -clover.optimize will:  * save a clover.snapshot on the first build  * use this, to discern the optimal set of tests and their order, to run for subsequent builds based on:  ** which source files have been modified  ** length of test  ** test result - failed tests will always be re-run",Suggestion,,Closed,"2010-03-24 23:24:01","2010-03-24 23:24:01",2
"Atlassian Clover","Clover-for-Grails generates an exception when using the -clover.view option on the Grails command line.","Clover-for-Grails generates an exception when using the -clover.view option on the Grails command line. According to <USER>s assessment so far, this is a Windows-specific problem.    See output below:    ",Bug,Low,Closed,"2010-03-05 00:23:00","2010-03-05 00:23:00",1
"Atlassian Clover","Test Columns are empty (or -1) in project.js when generated via a JSON report  ","When a JSON report is generated, the test fields:  ErroneousTests:0,FailingTests:0,FilteredElements:0.42738318,PassingTests:0,PcErroneousTests:-1,PcFailingTests:-1,PcPassingTests:-1,TestExecutionTime:0,Tests:0,    are all -1 or 0 in the project.js.  e.g.  https://bamboo.extranet.atlassian.com/browse/CCD-WCLV-488/artifact/Clover-HTML/project.js    The test data is definitely available in the HTML report.",Bug,Low,Closed,"2009-08-24 02:45:43","2009-08-24 02:45:43",2
"Atlassian Clover","Add method/statement level instrumentation setting in project properties page ",,Suggestion,,Closed,"2009-04-28 22:54:15","2009-04-28 22:54:15",1
"Atlassian Clover","Clover should prompt to rebuild a project if its flush or initstring settings change",,Bug,Medium,Closed,"2009-05-13 20:24:36","2009-05-13 20:24:36",1
"Atlassian Clover","Surefire classpath is incorrect when depending on a jar and a test-jar from the same maven module","We have two different applications that have the same symptom. Their test cases work properly when executed without clover, but when we run them with clover, they fail because classes or resource files are missing from the classpath.    When running the builds with clover, the test cases are executed multiple times. Only the last time they run they fail. When checking the maven debug output (using the -X option), I found that the last time the test cases are run, a JAR file is missing from the classpath. With both applications it is a jar file from a maven module for which we both depend on the jar and test-jar types of the module.     For example we have the following in the pom.xml file:            <dependency>              <groupId>${parent.groupId}</groupId>              <artifactId>server-data-access</artifactId>              <version>${version}</version>              <type>test-jar</type>              <scope>test</scope>          </dependency>          <dependency>              <groupId>${parent.groupId}</groupId>              <artifactId>server-data-access</artifactId>              <version>${version}</version>          </dependency>    And for some reason, when the test cases are executed for the last time, the following second dependency is not included in the list of jars in the classpath.    I have attached the pom.xml files from the module for which the test cases fail (server-web.pom), the pom.xml files from its parents, the pom.xml file for the module that generates both a jar and a test-jar (server-data-access.pom) and the log file that I get when running maven with the -X option.    This is the classpath when the test cases fail (notice that  /opt/bamboo/Bamboo/xml-data/build-dir/MONITORING-NIGHTLY/monitoring-server/server-data-access/target/server-data-access-1.0.2-SNAPSHOT.jar is missing):  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/Bamboo/xml-data/build-dir/MONITORING-NIGHTLY/monitoring-server/server-web/target/test-classes  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/Bamboo/xml-data/build-dir/MONITORING-NIGHTLY/monitoring-server/server-web/target/classes  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/xerces/xercesImpl/2.9.1/xercesImpl-2.9.1.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/xml-apis/xml-apis/1.3.04/xml-apis-1.3.04.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/Bamboo/xml-data/build-dir/MONITORING-NIGHTLY/monitoring-server/server-model/target/server-model-1.0.2-SNAPSHOT.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/commons-lang/commons-lang/2.1/commons-lang-2.1.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/Bamboo/xml-data/build-dir/MONITORING-NIGHTLY/monitoring-server/server-actions/target/server-actions-1.0.2-SNAPSHOT.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/commons-logging/commons-logging/1.0.4/commons-logging-1.0.4.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/log4j/log4j/1.2.13/log4j-1.2.13.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/com/i4commerce/bml/util/8.19.0/util-8.19.0.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/com/i4commerce/bml/tk-util/8.19.0/tk-util-8.19.0.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/org/jboss/netty/netty/3.0.0.GA/netty-3.0.0.GA.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/org/springframework/spring/2.5.6/spring-2.5.6.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/Bamboo/xml-data/build-dir/MONITORING-NIGHTLY/monitoring-server/server-core/target/server-core-1.0.2-SNAPSHOT.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/Bamboo/xml-data/build-dir/MONITORING-NIGHTLY/monitoring-server/server-data-access/target/server-data-access-1.0.2-SNAPSHOT-tests.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/org/hibernate/hibernate/3.2.6.ga/hibernate-3.2.6.ga.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/net/sf/ehcache/ehcache/1.2.3/ehcache-1.2.3.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/commons-collections/commons-collections/2.1.1/commons-collections-2.1.1.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/javax/transaction/jta/1.0.1B/jta-1.0.1B.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/asm/asm-attrs/1.5.3/asm-attrs-1.5.3.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/antlr/antlr/2.7.6/antlr-2.7.6.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/cglib/cglib/2.1_3/cglib-2.1_3.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/asm/asm/1.5.3/asm-1.5.3.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/org/hibernate/hibernate-annotations/3.3.0.ga/hibernate-annotations-3.3.0.ga.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/javax/persistence/persistence-api/1.0/persistence-api-1.0.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/org/hibernate/hibernate-commons-annotations/3.3.0.ga/hibernate-commons-annotations-3.3.0.ga.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/org/hibernate/hibernate-validator/3.0.0.ga/hibernate-validator-3.0.0.ga.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/org/hibernate/hibernate-search/3.0.0.GA/hibernate-search-3.0.0.GA.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/org/apache/lucene/lucene-core/2.2.0/lucene-core-2.2.0.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/javax/servlet/servlet-api/2.3/servlet-api-2.3.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/org/drools/drools-core/4.0.7/drools-core-4.0.7.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/org/mvel/mvel/1.3.1-java1.4/mvel-1.3.1-java1.4.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/commons-io/commons-io/1.4/commons-io-1.4.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/javax/j2ee/1.3/j2ee-1.3.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/com/sun/xml/bind/jaxb-impl/2.1.3/jaxb-impl-2.1.3.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/com/i4commerce/common/common-configuration/1.0.25/common-configuration-1.0.25.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/opensymphony/oscache/2.1.1/oscache-2.1.1.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/com/i4commerce/bml/bml-core/8.20.0-SNAPSHOT/bml-core-8.20.0-SNAPSHOT.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/com/i4commerce/bml/cache/8.20.0-SNAPSHOT/cache-8.20.0-SNAPSHOT.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/com/i4commerce/common/common-spring-util/1.0.25/common-spring-util-1.0.25.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/esper/esper/2.2.0/esper-2.2.0.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/org/antlr/antlr-runtime/3.0.1/antlr-runtime-3.0.1.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/org/antlr/stringtemplate/3.1-b1/stringtemplate-3.1-b1.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/quartz/quartz/1.5.2/quartz-1.5.2.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/com/mockrunner/mockrunner/0.3.1/mockrunner-0.3.1.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/com/i4commerce/common/common-abstract-unit-tests/1.0.25/common-abstract-unit-tests-1.0.25-tests.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/com/i4commerce/bml/unittest/8.20.0-SNAPSHOT/unittest-8.20.0-SNAPSHOT.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/Bamboo/xml-data/build-dir/MONITORING-NIGHTLY/monitoring-server/server-data-access/target/server-data-access-1.0.2-SNAPSHOT-tests.jar  build 20-Nov-2008 08:47:57 [DEBUG]   /opt/bamboo/.m2/repository/com/oracle/oracle_jdbc/10.2.0.2.0/oracle_jdbc-10.2.0.2.0.jar    This is the classpath for when it succeeds:  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/Bamboo/xml-data/build-dir/MONITORING-NIGHTLY/monitoring-server/server-web/target/test-classes  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/Bamboo/xml-data/build-dir/MONITORING-NIGHTLY/monitoring-server/server-web/target/classes  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/xerces/xercesImpl/2.9.1/xercesImpl-2.9.1.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/xml-apis/xml-apis/1.3.04/xml-apis-1.3.04.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/Bamboo/xml-data/build-dir/MONITORING-NIGHTLY/monitoring-server/server-model/target/server-model-1.0.2-SNAPSHOT.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/commons-lang/commons-lang/2.1/commons-lang-2.1.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/Bamboo/xml-data/build-dir/MONITORING-NIGHTLY/monitoring-server/server-actions/target/server-actions-1.0.2-SNAPSHOT.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/commons-logging/commons-logging/1.0.4/commons-logging-1.0.4.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/log4j/log4j/1.2.13/log4j-1.2.13.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/com/i4commerce/bml/util/8.19.0/util-8.19.0.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/com/i4commerce/bml/tk-util/8.19.0/tk-util-8.19.0.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/org/jboss/netty/netty/3.0.0.GA/netty-3.0.0.GA.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/org/springframework/spring/2.5.6/spring-2.5.6.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/Bamboo/xml-data/build-dir/MONITORING-NIGHTLY/monitoring-server/server-core/target/server-core-1.0.2-SNAPSHOT.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/Bamboo/xml-data/build-dir/MONITORING-NIGHTLY/monitoring-server/server-data-access/target/server-data-access-1.0.2-SNAPSHOT.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/org/hibernate/hibernate/3.2.6.ga/hibernate-3.2.6.ga.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/net/sf/ehcache/ehcache/1.2.3/ehcache-1.2.3.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/commons-collections/commons-collections/2.1.1/commons-collections-2.1.1.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/javax/transaction/jta/1.0.1B/jta-1.0.1B.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/asm/asm-attrs/1.5.3/asm-attrs-1.5.3.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/antlr/antlr/2.7.6/antlr-2.7.6.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/cglib/cglib/2.1_3/cglib-2.1_3.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/asm/asm/1.5.3/asm-1.5.3.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/org/hibernate/hibernate-annotations/3.3.0.ga/hibernate-annotations-3.3.0.ga.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/javax/persistence/persistence-api/1.0/persistence-api-1.0.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/org/hibernate/hibernate-commons-annotations/3.3.0.ga/hibernate-commons-annotations-3.3.0.ga.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/org/hibernate/hibernate-validator/3.0.0.ga/hibernate-validator-3.0.0.ga.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/org/hibernate/hibernate-search/3.0.0.GA/hibernate-search-3.0.0.GA.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/org/apache/lucene/lucene-core/2.2.0/lucene-core-2.2.0.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/javax/servlet/servlet-api/2.3/servlet-api-2.3.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/org/drools/drools-core/4.0.7/drools-core-4.0.7.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/org/mvel/mvel/1.3.1-java1.4/mvel-1.3.1-java1.4.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/commons-io/commons-io/1.4/commons-io-1.4.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/javax/j2ee/1.3/j2ee-1.3.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/com/sun/xml/bind/jaxb-impl/2.1.3/jaxb-impl-2.1.3.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/com/i4commerce/common/common-configuration/1.0.25/common-configuration-1.0.25.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/opensymphony/oscache/2.1.1/oscache-2.1.1.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/com/i4commerce/bml/bml-core/8.20.0-SNAPSHOT/bml-core-8.20.0-SNAPSHOT.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/com/i4commerce/bml/cache/8.20.0-SNAPSHOT/cache-8.20.0-SNAPSHOT.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/com/i4commerce/common/common-spring-util/1.0.25/common-spring-util-1.0.25.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/esper/esper/2.2.0/esper-2.2.0.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/org/antlr/antlr-runtime/3.0.1/antlr-runtime-3.0.1.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/org/antlr/stringtemplate/3.1-b1/stringtemplate-3.1-b1.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/quartz/quartz/1.5.2/quartz-1.5.2.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/com/mockrunner/mockrunner/0.3.1/mockrunner-0.3.1.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/com/i4commerce/common/common-abstract-unit-tests/1.0.25/common-abstract-unit-tests-1.0.25-tests.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/com/i4commerce/bml/unittest/8.20.0-SNAPSHOT/unittest-8.20.0-SNAPSHOT.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/Bamboo/xml-data/build-dir/MONITORING-NIGHTLY/monitoring-server/server-data-access/target/server-data-access-1.0.2-SNAPSHOT-tests.jar  build 20-Nov-2008 08:45:07 [DEBUG]   /opt/bamboo/.m2/repository/com/oracle/oracle_jdbc/10.2.0.2.0/oracle_jdbc-10.2.0.2.0.jar",Bug,Medium,Closed,"2008-11-20 13:34:07","2008-11-20 13:34:07",2
