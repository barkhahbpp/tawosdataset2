Name,Title,Description,Type,Priority,Status,Creation_Date,Estimation_Date,Story_Point
"Hyperledger Indy SDK","Rich Shema / W3C demo in indy-credx",,Task,Medium,"In Progress","2020-03-27 13:52:57","2020-03-27 13:52:57",5
"Hyperledger Indy SDK","Complete integration of Indy-VDR inside of LibIndy","*Acceptance Criteria*  * Integration with Indy Node CI tests",Task,Medium,New,"2020-03-27 13:46:54","2020-03-27 13:46:54",5
"Hyperledger Indy SDK","IndyNode txn for Anoncreds 2.0",,"New Feature",Medium,New,"2020-03-22 19:07:42","2020-03-22 19:07:42",5
"Hyperledger Indy SDK","Tails-free optimization of Anoncreds 2.0 in libvcx","There is no Tails in revocation 2.0 but there are Merkle Tree. While they are sparse by default, the size may be significant.    Some optimization is required to have a right balance between performance and size to store","New Feature",Medium,New,"2020-03-22 19:05:55","2020-03-22 19:05:55",8
"Hyperledger Indy SDK","Support Anoncreds 2.0 in libvcx",,"New Feature",Medium,New,"2020-03-22 19:05:30","2020-03-22 19:05:30",5
"Hyperledger Indy SDK","Integrate Anoncreds 2.0 IndyCredX into libindy",,"New Feature",Medium,New,"2020-03-22 19:04:53","2020-03-22 19:04:53",8
"Hyperledger Indy SDK","Implement medium-level helpers for Anonreds 2.0 in IndyCredX","For Anoncreds 1.0 there are helpers methods in libindy which are map high-level flow (issue credential, provide complex proof, verify complex proof) to low-level math (create proof from particular credential for particular disclosed attrs).  The same bridge should be provided by IndyCredX","New Feature",Medium,New,"2020-03-22 19:04:11","2020-03-22 19:04:11",13
"Hyperledger Indy SDK","PoC demo test flows for Revocation 2.0 at the top of URSA","Implement full-functional demo for 3 roles (Issure Holder Verifier) at the top of URSA with Revocation","New Feature",Medium,New,"2020-03-22 19:03:32","2020-03-22 19:03:32",8
"Hyperledger Indy SDK","PoC demo test flows for Anoncreds 2.0 at the top of URSA","Implement full-functional demo for 3 roles (Issure Holder Verifier) at the top of URSA without revocation","New Feature",Medium,New,"2020-03-22 19:02:13","2020-03-22 19:02:13",13
"Hyperledger Indy SDK","LibVCX should be tested against the latest StreetCred app and verify that it stores credentials that LibVCX issues","Here is the branch we can do testing: [https://github.com/<USER>indy-sdk/tree/feature/streetcred-compatibilkity]    I used BuilderNet pool network.    I used Dummy-cloud-agent: [https://github.com/<USER>indy-sdk/tree/feature/streetcred-compatibilkity/vcx/dummy-cloud-agent]    Streetcred Mobile app is available in app store. `Streetcred Identity Wallet`.    Dummy  Agent Mobile app must be at the same WiFi network as PC to be reachable.    Steps:   * install the last stable Libndy and Libnullpay: [https://github.com/hyperledger/indy-sdk#ubuntu-based-distributions-ubuntu-1604-and-1804]   * build LibVCX from the source.  The branch contains some changes regarding DIDDoc preparation/validation (they need to establish connection).   `cd vcx/libvcx && cargo build` — copy target/debug/libvcx.so to /usr/lib or /usr/local/lib     * run dummy-agency: cd vcx/dummy-cloud-agent.   Update config/sample-config.json to use IP instead of the localhost.  use ngrok to make it public available.   Run agent with `cargo run config/sample-config.json`.   * go to vcx/wrappers/python3/demo – update `provisionConfig`  agency related parameters to point on dummy agent address.     * run faber with python3 faber.py.   It will print invite json.    You need to base64 encode invite -> put encoded string into [http://192.168.54.174:8080?c_i=|http://192.168.54.174:8080/?c_i=]<HERE> -> convert result to QR code. it Scan with Streetcred app.",Task,Medium,Complete,"2020-03-13 14:01:41","2020-03-13 14:01:41",5
"Hyperledger Indy SDK","Test Aries support in libvcx against Aries Test Suite","Here is the Indy branch we can do testing: [https://github.com/<USER>indy-sdk/tree/is-1450-vcx-against-test-suite]   This branch contains a function that allows creating test connections by skipping protocol steps.    I used a local pool network: [https://github.com/hyperledger/indy-sdk#how-to-start-local-nodes-pool-with-docker]    I used Dummy-cloud-agent: [https://github.com/hyperledger/indy-sdk/tree/master/vcx/dummy-cloud-agent]    The Corresponding Aries-Test-Suite branch containing compatibility fixes: [https://github.com/<USER>aries-protocol-test-suite/tree/vcx-against-test-suite]   It should use the same pool ledger as vcx.    Vcx Steps:   * install the last stable Libndy and Libnullpay: [https://github.com/hyperledger/indy-sdk#ubuntu-based-distributions-ubuntu-1604-and-1804]   * build LibVCX from the source. `cd vcx/libvcx && cargo build` — copy target/debug/libvcx.so to /usr/lib or /usr/local/lib   * Run agent with `cd vcx/dummy-cloud-agent && cargo run config/sample-config.json`.   * go to vcx/wrappers/python3/demo – update `provisionConfig` agency related parameters to point on dummy agent address.   * run faber or alice script depending on the running aries-test-suite test. `python3 faber.py` `python3 alice.py`.    Aries testsuite:   * Edit config.toml `tests` section to select running tests.   * Run with `protocoltest -s`",Task,Medium,Complete,"2020-03-13 13:59:47","2020-03-13 13:59:47",5
"Hyperledger Indy SDK","Release Indy SDK 1.15.0","*Release Goal*  Release everything that is ready.     *Acceptance Criteria*  Regular instructions:  * Code is tested  * Review upstream releases to decide what should be included in this build  ** Ursa  * Build is produced with automated CI / CD  ** Official build is tagged as released in Git  ** Official builds should be the only builds that are not marked in GitHub as pre-release  * Prepare basic documentation on new features  * Prepare the Release Notes  ** Link to the documentation on new features  ** Stored as a CHANGELOG.md in the root of the repo  ** Latest release at the top, above the release notes for all previous versions  * The release should be on GitHub “Releases” tab.  ** Release notes should be in the “Description field of the GitHub release artifact  * The release is marked in JIRA  * Add the correct fixVersion to included issues  * Enable others to use the release:  ** Email stakeholders with links to the artifacts and release notes",Task,Medium,Complete,"2020-03-10 11:04:12","2020-03-10 11:04:12",3
"Hyperledger Indy SDK","VCX protocols compatibility ","There is a lack of compatibility between Aries protocol and Proprietary.  We need to update library to make them compatible.     Here is a document describing the problem in more details:  [https://docs.google.com/document/d/1feASxDPDpbRYm9G2bq0RdMj8oz0iZz-bgf5-18KyWIk/edit?usp=sharing]    It was decided to choose option 3 to provide the fix:          ",Task,Medium,Complete,"2020-03-06 08:07:39","2020-03-06 08:07:39",8
"Hyperledger Indy SDK","Aries: support protocol types defined at HTTPS, not did:sov","RFC:  https://github.com/hyperledger/aries-rfcs/tree/master/features/0348-transition-msg-type-to-https    AC:  * be able to parse both variants  * send did:sov types  * update status section in the RFC doc ",Task,Medium,"Code Review","2020-03-02 11:36:13","2020-03-02 11:36:13",2
"Hyperledger Indy SDK","Integration tests for Indy VDR",,Task,Medium,Complete,"2020-03-02 11:13:55","2020-03-02 11:13:55",8
"Hyperledger Indy SDK","Pluggable State proofs for Indy VDR",,Task,Medium,Complete,"2020-03-02 11:00:31","2020-03-02 11:00:31",3
"Hyperledger Indy SDK","Port back ATTRIB fix from Indy VDR to libindy",,Task,Medium,Complete,"2020-03-02 10:59:24","2020-03-02 10:59:24",2
"Hyperledger Indy SDK","Minimal CI/CD pipelines for Indy VDR","Use GitHub Actions",Task,Medium,New,"2020-03-02 10:58:35","2020-03-02 10:58:35",2
"Hyperledger Indy SDK","Create PoA for Anoncreds/Revocation 2.0 support",,Task,Medium,"Code Review","2020-03-02 10:51:13","2020-03-02 10:51:13",8
"Hyperledger Indy SDK","Create an RFC for Connection Redirect","The implementation of Connection Redirect from LibVCX needs to be documented as an RFC, or issues should be created to migrate it to the approach taken by RFCs.    We need to incorporate our thinking with [~<USER>'s work on Out-of-Band messages:  https://github.com/hyperledger/aries-rfcs/pull/434    Discussion in Aries WG  recording 2020-02-26-B:  https://wiki.hyperledger.org/pages/viewpage.action?pageId=29035452",Task,Medium,New,"2020-02-28 14:22:30","2020-02-28 14:22:30",5
"Hyperledger Indy SDK","Use URSA instead of sodiumoxide","Will help with Indy-VDR dependency problems.",Task,Medium,"To Develop","2020-02-28 13:57:37","2020-02-28 13:57:37",5
"Hyperledger Indy SDK","Support presentation of W3C credentials in indy-credx","*Acceptance criteria*  - Implement methods for presentation workflow for W3C credentials with Rich Schema support  - Implementation should live in indy-credx (we consider options to do it in aries-credx as well)  - This can be a new set of methods (not overriding existing ones)  - presentation needs to be in W3C compatible format (see https://www.w3.org/TR/vc-data-model/#zero-knowledge-proofs)  - builders for presentation definition are not required (pres def can be passed as a JSON the same way proof request is passed now)  - we are going to support Presentation Definition version 0.5 which will have feature parity with existing proof request. Pres Def is going to be evolved, so that needs to be taken into account in implementation (different strategies?)  - If we do JSON-LD processing/substitution, then for MVP we may assume that we resolve the contexts (substitute the fields belonging to a context) belonging to the current ledger only. We are not going to resolve other Indy ledger's context, other blockchain's contexts, and Internet contexts.    *HIPEs/RFCs to use*  - https://github.com/hyperledger/aries-rfcs/tree/master/features/0037-present-proof (to be updated)  - https://github.com/hyperledger/aries-rfcs/tree/master/concepts/0250-rich-schemas, https://github.com/hyperledger/indy-hipe/tree/master/text/0119-rich-schemas  - https://github.com/hyperledger/aries-rfcs/tree/master/concepts/0420-rich-schemas-common, https://github.com/hyperledger/indy-hipe/tree/master/text/0120-rich-schemas-common  - https://github.com/hyperledger/aries-rfcs/tree/master/features/0249-rich-schema-contexts, https://github.com/hyperledger/indy-hipe/tree/master/text/0138-rich-schema-context (to be updated)  - https://github.com/hyperledger/aries-rfcs/tree/master/features/0281-rich-schemas, https://github.com/hyperledger/indy-hipe/tree/master/text/0149-rich-schema-schema (to be updated)  - https://github.com/hyperledger/aries-rfcs/tree/master/features/0418-rich-schema-encoding (to be updated)  - Mapping (TBD)  - CredDef (TBD)  - PresDef (TBD)  - Credentials format (TBD)  - Presentation format (TBD)    ",Task,Medium,New,"2020-02-26 04:27:55","2020-02-26 04:27:55",13
"Hyperledger Indy SDK","Support issuance of W3C credentils in indy-credx ","*Acceptance criteria*  - Implement methods for issuance of W3C credentials with Rich Schema support  - Implementation should live in indy-credx (we consider options to do it in aries-credx as well)  - This can be a new set of methods (not overriding existing ones)  - aries-credx has a set of methods for encodings to be used  - output of new credentials issuance methods should we W3C compatible credentials (see https://www.w3.org/TR/vc-data-model/#zero-knowledge-proofs)  - If we do JSON-LD processing/substitution, then for MVP we may assume that we resolve the contexts (substitute the fields belonging to a context) belonging to the current ledger only. We are not going to resolve other Indy ledger's context, other blockchain's contexts, and Internet contexts.    *HIPEs/RFCs to use*  - https://github.com/hyperledger/aries-rfcs/tree/master/features/0036-issue-credential (to be updated)  - https://github.com/hyperledger/aries-rfcs/tree/master/concepts/0250-rich-schemas, https://github.com/hyperledger/indy-hipe/tree/master/text/0119-rich-schemas  - https://github.com/hyperledger/aries-rfcs/tree/master/concepts/0420-rich-schemas-common, https://github.com/hyperledger/indy-hipe/tree/master/text/0120-rich-schemas-common  - https://github.com/hyperledger/aries-rfcs/tree/master/features/0249-rich-schema-contexts, https://github.com/hyperledger/indy-hipe/tree/master/text/0138-rich-schema-context (to be updated)  - https://github.com/hyperledger/aries-rfcs/tree/master/features/0281-rich-schemas, https://github.com/hyperledger/indy-hipe/tree/master/text/0149-rich-schema-schema (to be updated)  - https://github.com/hyperledger/aries-rfcs/tree/master/features/0418-rich-schema-encoding (to be updated)  - Credentials format (TBD)    *Tips*  - It looks like no JSON-LD processing/substitution is needed for issuance  - Issuance protocol should be the same as for old schema, but use rich schema objects as inputs and output w3c compatible credentials  - For ZKP signing of credentials the following can be done:    - sort attributes according to the 'rank' in mapping    - encode value according to the specified encoding(s) in mappings (the same attribute can be encoded twice)    - attributes can be identified by ranks in ZKP signature object    *Example of objects*  *Rich Schema*       *Mapping*  It follows the same pattern, but can exclude some attributes.  It specifies a list of encodings and ranks (to define the order of how attributes should be signed).          *W3C credential*  Follows the same pattern of attributes (as in Mapping):   ",Task,Medium,New,"2020-02-26 04:27:00","2020-02-26 04:27:00",13
"Hyperledger Indy SDK","Support getting Rich Schema txns in indy-vdr","Support `indy_build_get_schema_object_by_id_request` and `indy_build_get_schema_object_by_metadata_request` as described in https://github.com/hyperledger/indy-hipe/tree/master/text/0120-rich-schemas-common      *Acceptance criteria:*  * Implement `indy_build_get_schema_object_by_id_request` in indy-vdr  * Implement `indy_build_get_schema_object_by_metadata_request` in indy-vdr  * Cover by unit and integration tests (node implementation is already in master)",Task,Medium,Complete,"2020-02-26 04:22:05","2020-02-26 04:22:05",5
"Hyperledger Indy SDK","Support submitting of Rich Schema txns in indy-vdr","Support `indy_build_rich_schema_object_request` as defined in https://github.com/hyperledger/indy-hipe/tree/master/text/0120-rich-schemas-common    *Acceptance criteria:*  * Implement `indy_build_rich_schema_object_request` in indy-vdr  * Cover by unit and integration tests (node implementation is already in master)    Note: we may need to substitute and resolve a Rich Schema (to have all the attributes from all the referenced and parent schemas) in order to create a Mapping object.  So, it makes sense to create a helper method for this",Task,Medium,Complete,"2020-02-26 04:21:47","2020-02-26 04:21:47",8
"Hyperledger Indy SDK","Investigate Circle CI","We should evaluate if CircleCI can meet the CI / CD needs of Indy SDK.    Questions to answer:   * Easy of use   * Platform and environment support   * Difficulty of launching an Indy Pool for CI testing",Task,Medium,Complete,"2020-02-21 13:11:29","2020-02-21 13:11:29",3
"Hyperledger Indy SDK","Investigate Azure Pipelines","We should evaluate if Azure Pipelines can meet the CI / CD needs of Indy SDK.    Questions to answer:  * Easy of use  * Platform and environment support  * Difficulty of launching an Indy Pool for CI testing",Task,Medium,Complete,"2020-02-20 14:50:46","2020-02-20 14:50:46",5
"Hyperledger Indy SDK","PoC usage of Indy VDR inside of libindy",,"New Feature",Medium,"Code Review","2020-02-17 13:54:39","2020-02-17 13:54:39",5
"Hyperledger Indy SDK","Investigate GitLab CI again","Has GitLab CI fixed the problems identified during our last investigation (INDY-2168)?    Questions to answer:  * Easy of use  * Platform and environment support  * Triggering builds from GitHub PRs sent from forks  * Difficulty of launching an Indy Pool for CI testing",Task,Medium,Complete,"2020-02-12 14:44:35","2020-02-12 14:44:35",5
"Hyperledger Indy SDK","Investigate GitHub Actions","We should evaluate if GitHub Actions can meet the CI / CD needs of Indy SDK.    Questions to answer:  * Easy of use  * Platform and environment support  * Difficulty of launching an Indy Pool for CI testing",Task,Medium,Complete,"2020-02-12 14:44:14","2020-02-12 14:44:14",5
"Hyperledger Indy SDK","Release Indy SDK 1.14.3","*Release Goal*  Release everything that is ready.     *Acceptance Criteria*  Regular instructions:  * Code is tested  * Review upstream releases to decide what should be included in this build  ** Ursa  * Build is produced with automated CI / CD  ** Official build is tagged as released in Git  ** Official builds should be the only builds that are not marked in GitHub as pre-release  * Prepare basic documentation on new features  * Prepare the Release Notes  ** Link to the documentation on new features  ** Stored as a CHANGELOG.md in the root of the repo  ** Latest release at the top, above the release notes for all previous versions  * The release should be on GitHub “Releases” tab.  ** Release notes should be in the “Description field of the GitHub release artifact  * The release is marked in JIRA  * Add the correct fixVersion to included issues  * Enable others to use the release:  ** Email stakeholders with links to the artifacts and release notes",Task,Medium,Complete,"2020-02-11 14:45:55","2020-02-11 14:45:55",3
"Hyperledger Indy SDK","Switch libs to libssl 1.1 on Ubuntu 18.04",,Task,Highest,Complete,"2020-02-03 15:12:57","2020-02-03 15:12:57",3
"Hyperledger Indy SDK","Fix content type for outgoing messages in libVCX for Aries scope","HTTP headers in libVCX should be aligned to RFC",Task,Medium,Complete,"2020-02-03 14:50:53","2020-02-03 14:50:53",2
"Hyperledger Indy SDK","Async libVCX internals","Apply Rust async / io patterns, to match the approach used in the new indy-aries-vdr.    Will make the code base easier to understand and maintain.",Task,Medium,New,"2020-02-03 11:57:24","2020-02-03 11:57:24",8
"Hyperledger Indy SDK","Refactor libVCX integration and unit tests","LibVCX unit tests are sharing environments, which results in false negatives and reduces our confidence in the tests.    The wallet is the major example.",Task,Medium,Complete,"2020-02-03 11:56:28","2020-02-03 11:56:28",13
"Hyperledger Indy SDK","Apply PoC of async libindy internals to master codebase","There was a PoC to use async/await in libindy itself  https://github.com/jovfer/indy-sdk/tree/feature/async_libindy_ce_on_nightly_rust    It should be improved to have appropriate quality and be merged to master",Task,Medium,Complete,"2020-02-03 11:19:31","2020-02-03 11:19:31",5
"Hyperledger Indy SDK","Cleanup warnings in libvcx/libindy shown by lgtm","There are some findings at  https://lgtm.com/projects/g/hyperledger/indy-sdk?mode=list&severity=warning  https://lgtm.com/projects/g/hyperledger/indy-sdk?mode=list&severity=error    1. They should be fixed  2. We need to decided: may be it worth adding as a part of CI  3. Check similar for rust codebase",Task,Medium,Complete,"2020-02-03 11:12:25","2020-02-03 11:12:25",2
"Hyperledger Indy SDK","Update existing revocation state is sometimes slower rather creating new one","<USER>added a comment - 31/Jan/20 7:59 AM - edited  I was timing the two approaches, plus a third (  1: update state since last timestamp,  2: create state from timestamp=0  3: merge deltas since last timestamp, then create state  ).    Imagine my surprise when consistently, the 2nd approach (create state from timestamp=0) came out consistently fastest (the idea is to time the actions after parsing the revocation registry delta response - so it's not too surprising that #3 comes in slowest, since it repeats two calls: merge deltas, then create state).    This is certainly no longer urgent, but when someone has the time and inclination, feel free to look over the sample at  https://drive.google.com/open?id=1g_EhrTtB0NAvAM8F5dsMovPl30Ctmlgs  for wonder and speculation.",Task,Medium,New,"2020-02-03 09:29:55","2020-02-03 09:29:55",2
"Hyperledger Indy SDK","CLI should return the TAA digest","*Story*  As a administrator of an application designed for an Indy Network that enforces a Transaction Author Agreement, I want to use the Indy CLI to view the hash of the TAA on the ledger so that I can put it in the configuration of my application to demonstrate TAA acceptance by my organization.","New Feature",Medium,Complete,"2020-01-28 23:28:34","2020-01-28 23:28:34",0
"Hyperledger Indy SDK","Proof of non-Revocation returning false except when credential is the only non-revoked credential","Original issue from [~<USER> of eSatus:  {quote}I'm facing some issues with proofing credentials issued on cred defs with revocation support.    When there's only one credential issued for the corresponding revoc reg everything is fine.    But if I issue another credential, every following proof is verified as false.    Thanks, Christopher  {quote}  [~<USER> has provided an example of the problem in a relatively small python program found [here|https://drive.google.com/file/d/1HY20iVK0Aah2U2dVHUqnN7nM0_jVMSCU/view].    We're getting close to the point where we need to use revocation in production so this is pretty high priority for us and other members of the community.     ",Task,Medium,Complete,"2020-01-22 17:31:45","2020-01-22 17:31:45",2
"Hyperledger Indy SDK","Release Indy SDK 1.14.2","*Release Goal*  Release everything that is ready.     *Acceptance Criteria*  Regular instructions:  * Code is tested  * Review upstream releases to decide what should be included in this build  ** Ursa  * Build is produced with automated CI / CD  ** Official build is tagged as released in Git  ** Official builds should be the only builds that are not marked in GitHub as pre-release  * Prepare basic documentation on new features  * Prepare the Release Notes  ** Link to the documentation on new features  ** Stored as a CHANGELOG.md in the root of the repo  ** Latest release at the top, above the release notes for all previous versions  * The release should be on GitHub “Releases” tab.  ** Release notes should be in the “Description field of the GitHub release artifact  * The release is marked in JIRA  * Add the correct fixVersion to included issues  * Enable others to use the release:  ** Email stakeholders with links to the artifacts and release notes",Task,Medium,Complete,"2020-01-14 15:32:38","2020-01-14 15:32:38",3
"Hyperledger Indy SDK","LibIndy Pack/Unpack moves to Aries","*Acceptance Criteria*  * A c-callable library exists for Aries utility functions: aries-shared-util  * It contains the current functions for pack  and unpack  * -FFI API-  * -Should be accepted as hl repo-",Task,Medium,New,"2020-01-14 15:21:39","2020-01-14 15:21:39",3
"Hyperledger Indy SDK","Migrate to Ursa 0.3.0",,Task,Medium,Complete,"2020-01-13 13:39:05","2020-01-13 13:39:05",2
"Hyperledger Indy SDK","Release Indy SDK 1.14.1","*Release Goal*  Release everything that is ready. Especially:  * Flexible attribute tagging  * Improvements to offline signing    *Acceptance Criteria*  Regular instructions:  * Code is tested  * Review upstream releases to decide what should be included in this build  ** Ursa  * Build is produced with automated CI / CD  ** Official build is tagged as released in Git  ** Official builds should be the only builds that are not marked in GitHub as pre-release  * Prepare basic documentation on new features  * Prepare the Release Notes  ** Link to the documentation on new features  ** Stored as a CHANGELOG.md in the root of the repo  ** Latest release at the top, above the release notes for all previous versions  * The release should be on GitHub “Releases” tab.  ** Release notes should be in the “Description field of the GitHub release artifact  * The release is marked in JIRA  * Add the correct fixVersion to included issues  * Enable others to use the release:  ** Email stakeholders with links to the artifacts and release notes",Task,Medium,Complete,"2019-12-30 15:06:43","2019-12-30 15:06:43",3
"Hyperledger Indy SDK","Additional validation for CL Nonce in libindy","In default configuration Ursa doesn't provide enough check for Nonce deserialization in CL anoncreds flow. libindy should do this check until Ursa would be fixed",Task,Medium,Complete,"2019-12-25 10:37:45","2019-12-25 10:37:45",1
"Hyperledger Indy SDK","Aries LibVCX: API to decline proof request",,Task,Medium,Complete,"2019-12-24 11:01:05","2019-12-24 11:01:05",3
"Hyperledger Indy SDK","Integrate TAA changes with latest Indy Node",,Task,Medium,Complete,"2019-12-20 17:52:54","2019-12-20 17:52:54",2
"Hyperledger Indy SDK","Aries compatible issuing from LibVCX","*Story*  As an application developer building solutions on LibVCX, I want the credentials I issue to work with any Aries compatible mobile applications so that my customers have a choice about what identity wallet they use.    *Acceptance Criteria*  * Set up a test environment.  * Test interop  * Fix any bugs we find    *Notes*  * We have already done a very basic test of LibVCX issuing to ACA-Py as a holder.  * Examples of Aries compatible mobile applications include StreetCred's mobile wallet and the Open Source Mobile Agent (OSMA) from Mattr Global.","New Feature",Medium,Complete,"2019-12-16 22:31:14","2019-12-16 22:31:14",3
"Hyperledger Indy SDK","Release Indy SDK 1.14.0","*Release Goal*  Release everything that is ready. Especially:  * Flexible attribute tagging  * Improvements to offline signing    *Acceptance Criteria*  Regular instructions:  * Code is tested  * Review upstream releases to decide what should be included in this build  ** Ursa  * Build is produced with automated CI / CD  ** Official build is tagged as released in Git  ** Official builds should be the only builds that are not marked in GitHub as pre-release  * Prepare basic documentation on new features  * Prepare the Release Notes  ** Link to the documentation on new features  ** Stored as a CHANGELOG.md in the root of the repo  ** Latest release at the top, above the release notes for all previous versions  * The release should be on GitHub “Releases” tab.  ** Release notes should be in the “Description field of the GitHub release artifact  * The release is marked in JIRA  * Add the correct fixVersion to included issues  * Enable others to use the release:  ** Email stakeholders with links to the artifacts and release notes",Task,Medium,Complete,"2019-12-16 15:34:27","2019-12-16 15:34:27",5
"Hyperledger Indy SDK","Support VC-Authn-OIDC","*Story*  As a developer of an application using LibVCX for credential exchange, I want to be able to fulfill a proof request without first creating a connection so that I can complete the VC-Authn-OIDC flow implemented in ACA-Py and get access to services provided by BC.gov to citizens.    *Notes*  * The VC-Authn-OIDC flow implemented in ACA-Py needs to be supported in LibVCX so that users of Evernym's Connect.Me can fulfill proof requests without making connections (the ephemeral credential flow).  * See:  https://github.com/bcgov/vc-authn-oidc/blob/master/docs/DemoInstructions.md","New Feature",Medium,Complete,"2019-12-16 14:20:47","2019-12-16 14:20:47",5
"Hyperledger Indy SDK","Confirm our implementations against the RFCs","Confirm that our implementations match the latest approved versions of the Aries RFCs.    Especially:  * Error Report  * ACK",Task,Medium,Complete,"2019-12-13 15:38:31","2019-12-13 15:38:31",8
"Hyperledger Indy SDK","Service Decorator","https://github.com/hyperledger/aries-rfcs/tree/master/features/0056-service-decorator    In terms of practical interoperability, this is important for the ephemeral proof request use case.",Task,Medium,Complete,"2019-12-13 15:37:57","2019-12-13 15:37:57",2
"Hyperledger Indy SDK","Indy CLI: support multiple active TAA on the ledger",,Task,Medium,Complete,"2019-12-06 14:16:41","2019-12-06 14:16:41",3
"Hyperledger Indy SDK","Dockerized Android CI",,Task,Medium,Complete,"2019-12-06 13:55:35","2019-12-06 13:55:35",2
"Hyperledger Indy SDK","LibVCX Aries: Implement Trust Ping protocol","In libVCX 0.5.0 there is a basic trust ping functionality like answering ACK to ping in some states. The library should have full support of the protocol and provide required API","New Feature",Medium,Complete,"2019-12-04 11:43:43","2019-12-04 11:43:43",3
"Hyperledger Indy SDK","libVCX demo documentation improvements","* cross-links to other parts of docs (like building the deps, running pool, agency, etc)  * python deps",Task,Medium,Complete,"2019-11-27 11:33:07","2019-11-27 11:33:07",2
"Hyperledger Indy SDK","deb artifacts should append source list",,Task,Medium,Complete,"2019-11-27 11:06:10","2019-11-27 11:06:10",3
"Hyperledger Indy SDK","Review, clean-up and merge Aries Protocol in libVCX to master",,Task,Medium,Complete,"2019-11-25 14:03:39","2019-11-25 14:03:39",2
"Hyperledger Indy SDK","Support updates to TAA txn","INDY-2302 defines a transaction for retiring a Transaction Author Agreement. This needs to be supported by the SDK.    INDY-2313 adds the ratified date to the TAA object.",Task,Medium,Complete,"2019-11-22 12:51:22","2019-11-22 12:51:22",3
"Hyperledger Indy SDK","Fixes to TAA documentation","[https://github.com/hyperledger/indy-sdk/blob/master/docs/how-tos/transaction-author-agreement.md]    #1 Typo: liibndy    #2 There should be a note clarifying that the hash can be provided instead of the full text, and what hash algorithm should be used.",Task,Medium,Complete,"2019-11-19 22:52:27","2019-11-19 22:52:27",1
"Hyperledger Indy SDK","Mark Indy SDK Getting Started docs as deprecated","Most new developers building on Indy should start with Aries Agents and Aries language libraries. As a result, the documentation for Aries will be more helpful than the legacy documentation in Indy SDK.    *Acceptance Criteria*   * Review the documentation to decide what is directly applicable to users of LibIndy, versus what is superseded by the Aries documentation.   * Mark the appropriate documentation as deprecated, pointing people to the Aries documentation.   * An issue exists to delete the deprecated  documentation in a future version.",Task,Medium,Complete,"2019-11-13 16:02:51","2019-11-13 16:02:51",1
"Hyperledger Indy SDK","Mark LibIndy wrappers as deprecated (round 1)","People building on top of Indy are encouraged to start with the Aries agents and language libraries instead of the Indy SDK wrappers. Most of the development has shifted there, and some Aries language libraries are already mature enough to use in favor of the Indy wrappers. As a result, the Indy wrappers will not keep pace with the evolution of the Aries protocols. We need to communicate this information to users of the Indy SDK.    *Wrappers in Round 1*   * DotNet    *Acceptance Criteria*   * User documentation is updated.   * Release notes include a note.   * API documentation is marked.   * Jira issues related to these wrappers are closed.   * A task exists in Jira to remove these wrappers from a future version.",Task,Medium,New,"2019-11-13 15:53:30","2019-11-13 15:53:30",2
"Hyperledger Indy SDK","Support for empty attributes in credentials","*Story*    As a developer building a solution that uses Indy and Aries, I sometimes need to include an empty attribute in my proof because the data is present but empty. This allows me to model things like the second line of a U.S. address, which is often blank.    *Acceptance Criteria*    If a credential attribute contains no information, it should still be properly encoded so that it can be presented as part of a proof.    Guidance should be included in the documentation on how best to model credentials:   * empty information (empty string)   * information not present (NULL)   * a placeholder such as None or 0 (Zero)   * optional information (see IS-1408)    *Examples*   * Second line of an address   * U.S. middle name / Russian patronymic    *Notes*   * Once Rich Schemas are implemented (IS-1402), there will be a way  for the encoding to specify the null value.",Task,Medium,Complete,"2019-11-05 15:54:21","2019-11-05 15:54:21",3
"Hyperledger Indy SDK","Evaluate aries-framework-go","Evaluate the approaches to Aries taken by the aries-framework-go.   * What good ideas are represented by the implementation?   * In what ways would be propose to improve the implementation?   * What changes would be required to support anoncreds?   * How does it compare with LibIndy as the starting point for Aries-Core libraries.    Timebox the effort to 3 engineering days.    *Notes*    * Current RFC support:  [https://github.com/hyperledger/aries-framework-go/issues/920]",Task,Medium,Complete,"2019-11-05 15:21:59","2019-11-05 15:21:59",5
"Hyperledger Indy SDK","Test harness for LibVCX / Dummy Cloud Agent and Aries Test Suite","*Acceptance Criteria*   * Be able to run LibVCX against the Aries Test Suite using the Dummy Cloud Agent.   * Collect a report on success or failure.    *Notes*   * Automating the running of this test will be considered in a separate issue.",Task,Medium,Complete,"2019-10-28 14:29:02","2019-10-28 14:29:02",8
"Hyperledger Indy SDK","Support optional attributes in proof request","As a Verifier I should be able to request optional attributes in Proof Request and it's up to Holder decision to fill those or not    While verification libindy should process this flag appropriately and doesn't affect that part of Verifier App.    *Notes*    * This is about the verifier requesting to know if information exists in a signed credential, but not rejecting the proof if the holder refuses to share that information. Attributes that are empty are handled in IS-1421.",Task,Medium,New,"2019-10-18 13:03:34","2019-10-18 13:03:34",5
"Hyperledger Indy SDK","Release 1.13.0","*Release Goal*  Release everything that is ready. Especially:  * Improvements to LibVCX to support Aries protocols    *Acceptance Criteria*  Regular instructions:  * Code is tested  * Review upstream releases to decide what should be included in this build  ** Ursa  * Build is produced with automated CI / CD  ** Official build is tagged as released in Git  ** Official builds should be the only builds that are not marked in GitHub as pre-release  * Prepare basic documentation on new features  * Prepare the Release Notes  ** Link to the documentation on new features  ** Stored as a CHANGELOG.md in the root of the repo  ** Latest release at the top, above the release notes for all previous versions  * The release should be on GitHub “Releases” tab.  ** Release notes should be in the “Description field of the GitHub release artifact  * The release is marked in JIRA  * Add the correct fixVersion to included issues  * Enable others to use the release:  ** Email stakeholders with links to the artifacts and release notes  Special instructions:  * Documentation should note that The Indy SDK wrappers are moving to Aries. Python, JavaScript, DotNet, and Go have already moved. In future releases of the Indy SDK, these wrappers will be marked as deprecated and then removed. However, people are welcome to submit pull requests against the wrappers in Indy SDK so long as they continue to be included in releases.",Task,Medium,Complete,"2019-10-08 15:29:04","2019-10-08 15:29:04",5
"Hyperledger Indy SDK","Release 1.12.1","*Release Goal*  Release everything that is ready. Especially:  * Support for Fully Qualified DIDs    *Acceptance Criteria*  Regular instructions:  * Code is tested  * Review upstream releases to decide what should be included in this build  ** Ursa  * Build is produced with automated CI / CD  ** Official build is tagged as released in Git  ** Official builds should be the only builds that are not marked in GitHub as pre-release  * Prepare basic documentation on new features  * Prepare the Release Notes  ** Link to the documentation on new features  ** Stored as a CHANGELOG.md in the root of the repo  ** Latest release at the top, above the release notes for all previous versions  * The release should be on GitHub “Releases” tab.  ** Release notes should be in the “Description field of the GitHub release artifact  * The release is marked in JIRA  * Add the correct fixVersion to included issues  * Enable others to use the release:  ** Email stakeholders with links to the artifacts and release notes",Task,Medium,Complete,"2019-10-08 15:28:46","2019-10-08 15:28:46",5
"Hyperledger Indy SDK","LibVCX Aries: Integration and system tests improvements","* add more integration tests for new flow (vcx + dummy)  * run VCX python demo as system test manually  * try to run VCX + dummy against ACA-Py",Task,Medium,Complete,"2019-10-08 13:15:57","2019-10-08 13:15:57",13
"Hyperledger Indy SDK","LibVCX Aries: Implement Credential Presentation RFC","Current VCX flow:    Verifier:   1) vcx_proof_create -> creates `Proof` state object associated with handle -> state.Initialized = 1   2) vcx_proof_send_request -> generates `proof request` message -> send `proof request` -> move state.OfferSent = 2   3) vcx_proof_update_state -> wait until get `proof` message -> move state.VcxStateAccepted = 4/ state.RequestReceived = 3 -> accumed that proccess is finished.    Prover:   1) vcx_disclosed_proof_get_requests -> asks agency for messages -> wait until get `proof request` ----> proof request json   2) vcx_disclosed_proof_create_with_request -> creates `DisclosedProof` state object associated with handle -> state.RequestReceived = 3   3) vcx_disclosed_proof_send_proof -> generates `proof` message -> send `proof` message -> move state.VcxStateAccepted = 4 -> accumed that proccess is finished. successfully???    Aries flow: [https://github.com/hyperledger/aries-rfcs/tree/master/features/0037-present-proof]    Verifier:   1) vcx_proof_create -> creates `Proof` state object associated with handle -> state.Initialized = 1   2) vcx_proof_send_request -> generates `proof request` message -> send `proof request` -> move state.ProofRequestSent = 2   3) vcx_proof_update_state --> asks agency for messages by sending `GetMessages` command with status code `Pending`? -> (decrypt)  wait until get `proof` message -> move state.VcxStateAccepted = 4/ state.RequestReceived = 3 -> send `ack` or `reject` -->  send UpdateMessageStatus`  command to agenct with status code `Accepted`? -> accumed that proccess is finished.    Prover:   1) vcx_disclosed_proof_get_requests -> asks agency for messages by sending `GetMessages` command with status code `Pending`? -> (decrypt)  wait until get `proof request` ----> proof request json   2) vcx_disclosed_proof_create_with_request -> creates `DisclosedProof` state object associated with handle -> state.RequestReceived = 3   3) vcx_disclosed_proof_send_proof -> generates `proof` message -> send `proof` message -> move state.ProofSent = 4 -> send UpdateMessageStatus`  command to agenct with status code `Accepted`?   4) vcx_disclosed_proof_update_state ->asks agency for messages by sending `GetMessages` command with status code `Pending`? -> (decrypt)  wait until get ack -> move state.Accepted = 5/ state.Rejected = 3 -> send UpdateMessageStatus`  command to agenct with status code `Accepted`? -> accumed that proccess is finished. -> accumed that proccess is finished.    Already supported:   - Message encryption/decryption: [https://github.com/hyperledger/aries-rfcs/tree/master/features/0019-encryption-envelope]   - Message Id and Threading: [https://github.com/hyperledger/aries-rfcs/tree/master/concepts/0008-message-id-and-threading]    Difference:   1) The format of outgoing and incoming messages are absolutely different.    2) Vcx packs messages according to pairwise DIDDoc stored in the state and sends them to pairwise remote endoint directly. NOT to it's own Agency.   3) Agency collects incoming messages in encoded view and with received status. Vcx gets them -> decodes them -> processes them -> sends updaes messages status command to Agency.   4) The genera VCXl flow is almost the same but only to complete the process:   - Verifier has to send `ack` or `reject` message.   - Prover has to wait for `ack` or `reject` message and set the final status based on the response type.    5) Verifier handles `proof_proposal` message. We need to decide either he should accept it and create proof request or reject.   6) Both sides can handle `proof_reject` message on every step.",Task,Medium,Complete,"2019-10-08 10:37:34","2019-10-08 10:37:34",8
"Hyperledger Indy SDK","LibVCX Aries: Implement Credential Issuance RFC","Current VCX flow:    Issuer:   1) vcx_issuer_create_credential -> creates `IssuerCredential` state object associated with handle -> state.Initialized = 1   2) vcx_issuer_send_credential_offer -> generates `offer` message -> send `offer` to pairwise -> move state.OfferSent = 2   3) vcx_issuer_credential_update_state -> wait until get `credential_request` message -> processes received data -> move state.VcxStateRequestReceived = 3   4) vcx_issuer_send_credential -> generates `credential` message -> send `credential` message -> move state.VcxStateAccepted = 4 -> assume that credential is issued   5) Python Demo does `vcx_issuer_credential_update_state` in the loop to wait until the state is equal to state.Accepted but it is already true..    Holder:   1) vcx_credential_get_offers -> asks agency for messages -> wait until get `offer` message ----> offer json   2) vcx_credential_create_with_offer -> creates `Credential` state object associated with handle -> state.VcxStateRequestReceived = 3   3) vcx_credential_send_request -> prepares and send `redential_request` message -> move state.OfferSent = 2   4) vcx_credential_update_state -> wait until get `credential` message -> processes data -> move state.VcxStateAccepted = 4 -> assume that the process is finished    Aries flow: [https://github.com/hyperledger/aries-rfcs/tree/master/features/0036-issue-credential]    Issuer:   1) vcx_issuer_create_credential -> creates `IssuerCredential` state object associated with handle -> state.Initialized = 1   2) vcx_issuer_send_credential_offer -> generates `offer` message -> send `offer` to pairwise -> move state.OfferSent = 2   3) vcx_issuer_credential_update_state -> asks agency for messages by sending `GetMessages` command with status code `Pending`? -> (decrypt) until get `credential_request` message -> processes received data -> move state.RequestReceived = 3   4) vcx_issuer_send_credential -> generates `credential` message -> send `credential` message -> move state.CredentialSend = 4 -> send UpdateMessageStatus`  command to agenct with status code `Accepted`?   5) vcx_issuer_credential_update_state -> asks agency for messages by sending `GetMessages` command with status code `Pending`? -> (decrypt) wait until `ack` -> move state.Accepted = 5 -> send UpdateMessageStatus`  command to agenct with status code `Accepted`? -> assume that credential is issued    Holder:   1) vcx_credential_get_offers -> asks agency for messages by sending `GetMessages` command with status code `Pending`? -> (decrypt) wait until get `offer` message ----> offer json   2) vcx_credential_create_with_offer -> creates `Credential` state object associated with handle -> state.OfferReceived = 3 -> send UpdateMessageStatus`  command to agenct with status code `Accepted`?   3) vcx_credential_send_request -> prepares and send `redential_request` message -> move state.RequestSend = 2   4) vcx_credential_update_state -> asks agency for messages by sending `GetMessages` command with status code `Pending`? -> (decrypt) until get `credential` message -> processes data -> move state.CredentialReceived = 4 -> send `ack` message -> send UpdateMessageStatus`  command to agenct with status code `Accepted`? -> move state.Accepted = 5 -> assume that the process is finished    Already supported:   - Message encryption/decryption: [https://github.com/hyperledger/aries-rfcs/tree/master/features/0019-encryption-envelope]   - Message Id and Threading: [https://github.com/hyperledger/aries-rfcs/tree/master/concepts/0008-message-id-and-threading]    Difference:   1) The format of outgoing and incoming messages are absolutely different.    2) Vcx packs messages according to pairwise DIDDoc stored in the state and sends them to pairwise remote endoint directly. NOT to it's own Agency.   3) Agency collects incoming messages in encoded view and with received status. Vcx gets them -> decodes them -> processes them -> sends updaes messages status command to Agency.   4) The general flow from VCX side is almost the same but only to complete the process:   - Holder has to send `ack` message.   - The issuer has to wait for `ack` message.   2) New functions to start the process with `credential_proposal` message:   - Issuer: `vcx_issuer_get_credential_proposals` which acks agency for new messages and `vcx_issuer_create_credential_with_proposal` to create initial state.   We need to decide either Issuer always accepts `credential_proposal` or reject in the initial implementation.     - Holder: `vcx_credential_create_with_proposal` to create initial state and `vcx_credential_send_proposal` to send it to pairwise connection.    5) New functions to start the process with `credential_request` message:    – Issuer `vcx_issuer_create_credential_with_request` create internal state object with state.RequestReceived = 3   - Holder ?    6) Handle `credential_reject` messages on every state.",Task,Medium,Complete,"2019-10-08 10:36:37","2019-10-08 10:36:37",8
"Hyperledger Indy SDK","Dummy cloud agent connection protocol","LibVCX is initially designed to have a backend for mobile agent use case. In order to support Aries RFCs we have to update dummy agent to use them as [mediator|https://github.com/hyperledger/aries-rfcs/blob/master/concepts/0046-mediators-and-relays/README.md#scenario-2-a-gatekeeper]    Draft Idea for flow:   * dummy cloud agent registers VCX-based agent (proprietary protocol is acceptable)   * while connection (DID Exchange) protocol, VCX use the cloud agent as mediator and list it in route keys    So from 3rd party Aries-compatible agent point of view, the pair of VCX-based mobile agent and Dummy cloud agent would look like Aries-compatible, but internally we can follow old protocol (introduced by Evernym) to deliver messages from the backend to mobile.    Agency side:      We can keep the common workflow as is.      We still can create Pairwise Agents on the initiation of connection or accepting an invitation but use it as a mediator only.     In the current state Pairwise Agents are already able   - collect incoming messages   - return collected messages   - update status of received messages    The key difference is that we will not use Agency anymore for sending messages to another connection side,   so we don't need to keep other side keys on the Agency.  Vcx will do the message preparation and sending itself.    There is a problem with message forwarding:       Now DIDs must be used as target (`to` filed) according to Cross-Domain Messaging HIPE.    This problem is reflected in the issue: https://github.com/hyperledger/aries-rfcs/issues/255.  Lovesh's suggestion sounds acceptable to us.       So, we need to change on Agency is making support of messages forwarding based on Verkey's (in addition to DID's based).  It should be easy to distinguish because fully-qualified DID's must be used for a new protocol version.         Each message sent to our Pairwise Connection should be wrapper into 2 Forward messages and  Anonymously encrypted.         ",Task,Medium,Complete,"2019-10-08 10:30:55","2019-10-08 10:30:55",2
"Hyperledger Indy SDK","Set Protocol Version in Indy CLI","If we update the protocol version between Indy Node and LibIndy, we need to be able to select which protocol we should use in Indy CLI so that it is possible to create offline transactions that will be valid when submitted to the ledger.    *Notes*  * Once a pool connection has been established, the CLI will already automatically use the correct protocol version for that pool.","New Feature",Medium,Complete,"2019-10-04 17:17:32","2019-10-04 17:17:32",2
"Hyperledger Indy SDK","Optimize deb publishing in CD pipeline","Packaging pre-built debian packages takes an hour. We should improve it to go faster.",Task,Medium,Complete,"2019-10-04 16:08:52","2019-10-04 16:08:52",2
"Hyperledger Indy SDK","Extend configuration doc with VCX info","This document should also discuss LibVCX configuration:  https://github.com/hyperledger/indy-sdk/blob/master/docs/configuration.md    Questions that should be answered:  * What incantation is needed to get logs with libvcx?  * How to configure the Indy pool?",Task,Medium,Complete,"2019-10-04 16:08:21","2019-10-04 16:08:21",1
"Hyperledger Indy SDK","[VCX] Validate credential exchange protocol supports fully qualified DIDs","*Acceptance Criteria*  * LibVCX supports fully qualified DIDs alongside the existing credential exchange protocol without fully qualified DIDs",Task,Medium,Complete,"2019-10-03 16:33:13","2019-10-03 16:33:13",2
"Hyperledger Indy SDK","Validate credential exchange protocol supports fully qualified DIDs","*Acceptance Criteria*  * LibVCX supports fully qualified DIDs alongside the existing credential exchange protocol without fully qualified DIDs  * The support must be backwards compatible: issuer with a FQDID, verifier without, and vice-versa.",Task,Medium,Complete,"2019-09-30 15:55:10","2019-09-30 15:55:10",3
"Hyperledger Indy SDK","POA: LibVCX and Aries protocols","*Acceptance Criteria*  * Analyze the difference between the current Aries RFCs and the LibVCX protocol  ** Connection  ** Issuance  ** Proving   * Prepare issues  * Size the work","New Feature",Medium,Complete,"2019-09-19 14:38:02","2019-09-19 14:38:02",5
"Hyperledger Indy SDK","Migrate the Indy Wallet to aries-wallet","See details in the Epic description.    Git history does not need to be moved.",Task,Medium,"Code Review","2019-09-16 15:24:36","2019-09-16 15:24:36",8
"Hyperledger Indy SDK","Remove Android dependency on libgnustl and change to libc++","We urgently need to get off of our dependency on libgnustl for building the Android libindy.so artifact. This means changing the indy-sdk/libindy/android.build.sh script and the indy-sdk/libindy/android.test.sh and the indy-sdk/libnullpay/android.test.sh scripts. We may also need to change the libsovtoken build to not depend on libgnustl as well.    Our iOS Xcode 10.1 dependency is forced on us by this because we cannot upgrade react native to 0.59.x because react native 0.59.x no longer supports libgnustl. Due to these blocking issues it is becoming more and more urgent that we remove our Android libgnustl dependency and upgrade the NDK to android-ndk-r20-linux-x86_64.zip or android-ndk-r20-darwin-x86_64.zip rather than using the current NDK   android-ndk-r16b-darwin-x86_64.zip or android-ndk-r16b-linux-x86_64.zip.",Task,High,Complete,"2019-09-11 21:19:05","2019-09-11 21:19:05",5
"Hyperledger Indy SDK","Add testing instructions to doc on HowToAddAPICall","The documentation on How to Add an API Call needs more guidance on how to test the APIs.    https://github.com/hyperledger/indy-sdk/blob/master/docs/how-tos/how-to-add-a-new-API-call.md",Task,Medium,Complete,"2019-09-11 14:22:25","2019-09-11 14:22:25",2
"Hyperledger Indy SDK","PoC: Async/await Command Executor layer in libindy","Libindy has 3 main layers of code organization and there are some concerns about code complexity of Command Executor Layer.    One of the factor is usage of manually written Commands (sometimes chain of multiply commands) for asynchronous logic like get data from the ledger.    There is unstable async/await in nightly Rust, and it would be nice to re-implement the part of CE layer and compare the code complexity.",Task,Medium,Complete,"2019-09-10 14:52:58","2019-09-10 14:52:58",5
"Hyperledger Indy SDK","Fix authors in packages distributed for Indy SDK",,Task,Medium,Complete,"2019-09-09 15:53:02","2019-09-09 15:53:02",1
"Hyperledger Indy SDK","Update credential exchange protocol to support fully qualified DIDs","*Acceptance Criteria*  * LibVCX supports fully qualified DIDs alongside the existing credential exchange protocol without fully qualified DIDs  * The support must be backwards compatible: issuer with a FQDID, verifier without, and vice-versa.",Task,Medium,Complete,"2019-08-30 15:09:25","2019-08-30 15:09:25",13
"Hyperledger Indy SDK","Design Aries Resolver library","The Indy ledger resolver needs to migrate from LibIndy to be used by Aries Frameworks. The end result is that we have libraries like:  * aries-shared-vdri that provides the interface that will be followed by specific ledgers  * indy-aries-vdr that instantiates that interface for Indy  * aries-shared-vdri-peer that instantes that interface for peer DIDs    This issue is only to migrate the LibIndy functions to indy-aries-vdr. The common interface will be designed in other issues, and indy-aries-vdr will be migrated to it.    *Acceptance Criteria*  * Create design document for this interface that can be followed by Peer DIDs and the Indy Resolver  * Create a plan of attack that can be followed by the various contributors  * Create related issues    *Notes*  * Prior Art  ** Aries RFC: https://github.com/hyperledger/aries-rfcs/tree/master/features/0124-did-resolution-protocol  ** The work from Markus: https://wiki.hyperledger.org/pages/viewpage.action?pageId=16320115  * This work must be coordinated with the in-progress work being done by [~cywolf]  * The work to build a generic Aries Verifiable Data Registry Interface will be tracked separately (probably in the Aries project).  * The work to build an Aries Peer VDRI will be tracked separately.",Task,Medium,Complete,"2019-08-30 14:12:50","2019-08-30 14:12:50",5
"Hyperledger Indy SDK","Write an RFC for Aries Overview","We need an Aries overview RFC to help pull all the parts together.    *Acceptance Criteria*  * It should be a concept RFC:      https://github.com/hyperledger/aries-rfcs/tree/master/concepts  * Link to the other RFCs  * UML diagram describing the flow and how it touches each part of the stack    *Notes*  * Brevity is an important attribute of this document. It should be a compact overview. If the architecture does not allow a digestible overview, then we should re-examine the architecture.  * We need to time-box this effort.  * It should drive conversation and help people find consensus on the concepts. We can't be involved in many of those conversations, so if others don't find it valuable to finish the effort, we should rescind it.",Task,Medium,"To Develop","2019-08-27 14:24:03","2019-08-27 14:24:03",8
"Hyperledger Indy SDK","Release 1.12.0","*Release Goal*  Release everything that is ready. Especially:  * Support for Fully Qualified DIDs    *Acceptance Criteria*  Regular instructions:  * Code is tested  * Review upstream releases to decide what should be included in this build  ** Ursa  * Build is produced with automated CI / CD  ** Official build is tagged as released in Git  ** Official builds should be the only builds that are not marked in GitHub as pre-release  * Prepare basic documentation on new features  * Prepare the Release Notes  ** Link to the documentation on new features  ** Stored as a CHANGELOG.md in the root of the repo  ** Latest release at the top, above the release notes for all previous versions  * The release should be on GitHub “Releases” tab.  ** Release notes should be in the “Description field of the GitHub release artifact  * The release is marked in JIRA  * Add the correct fixVersion to included issues  * Enable others to use the release:  ** Email stakeholders with links to the artifacts and release notes",Task,Medium,Complete,"2019-08-19 14:41:21","2019-08-19 14:41:21",5
"Hyperledger Indy SDK","POA: DIDs resolution for multiple Indy ledgers","*Story*  As a developer building applications for Indy networks, I want my wallet to be able to store DIDs from multiple networks: Sovrin Main, Sovrin Test, my development network, and my corporate network. This will make it easier to develop, test, and demo my applications.    *Notes*  * Need to be able to work with multiple Indy networks:  ** Sovrin Builder  ** Sovrin Staging  ** Sovrin Main  ** Internal dev networks  ** Findy  * For each of these networks, we can identify associated DIDs and the connection information for the network.  * We should be able to prove verifiable credentials anchored on each network for which we have ledger connection information. Ledger connection information needs to include the DID prefix and genesis information for each ledger.  * A credential will be tied to a particular network: the schema definition and credential definition must be anchored on the same network.  * We should add this support to Indy (instead of waiting for Aries) because people will continue using Indy in their identity solutions for some time after Aries matures.  * Indy solutions should be able to deal with old style DIDs and Fully Qualified DIDs simultaneously.  * If the application is asked to deal with a Fully Qualified DID  for which it does not have ledger connection information, it should raise an exception for the application layer to resolve.    *Acceptance Criteria*  * Evaluate the current functionality of LibIndy, and the suggested application architecture for achieving this goal.  * Create issues for remaining work.",Task,Medium,New,"2019-08-16 17:03:31","2019-08-16 17:03:31",5
"Hyperledger Indy SDK","Wallet migration API for full-qualified DID","*Story*  As an application developer using the Indy wallet, I need a way to modify the prefix of a DID to make a legacy  DID fully qualified, or to do other DID maintenance.    *Acceptance Criteria*  * API(s) exists for editing the prefix of a DID  ** If the DID has no prefix, we can add a prefix (prepend did:peer or did:sov to a legacy did)  ** If the DID has a prefix, we can modify the prefix (migrate did:sov to did:sov-new)  * Documentation exists for helping an application developer use this API for migrating their wallet    *Notes*  * In addition to modifying a single DID, it would be nice to be able to also modify multiple DIDs (migrate all did:sov to did:sov-new)  * We evaluated having a method for migrating the entire wallet from legacy DIDs (missing the network-specific prefix such as did:sov: ), to fully qualified DID's, but the wallet doesn't have the information necessary to distinguish between Indy DIDs and Peer DIDs. So instead, we want to provide the API necessary for the application to manage whatever migration it intends to do.  * If we were to migrate the entire wallet, we considered an API like:  ** indy_wallet_migrate(wallet_config, credentials, migration_config) - will open the wallet by config and credential, check content version, check current version, apply migration logic (taking into account migration_config), close wallet and return status code   ** migration config - optional JSON with optional parameters. For full-qualified DID migration (from None version to 1st version) only one parameter is expected: default_did_prefix  ** all existing DIDs would be re-placed by full-qualified form with defined by config prefix  ** We would also need to version the wallet contents to distinguish between the legacy DIDs and the post-migration fully qualified DIDs.",Task,Medium,Complete,"2019-08-16 14:02:07","2019-08-16 14:02:07",2
"Hyperledger Indy SDK","Minimal support of full-qualified DID","See requirements in IS-451    h1. POA    h2. Option 1: Breaking Changes    * All DID-related output of libindy API is fully-qualified. The only exception is the JSONs for Client-Node communication.  * libindy may consume both full-qualified and short forms, but short form would be always extended by the configurable default prefix.  *  JSON output for Clinet-Node communication (e.g. build_nym_request) will depend on protocol version set in libindy. Current protocol version is 2, and it will always cut off the configured DID prefix. We will evaluate if a future version of Indy Node will keep full-qualified form in the JSONs as well.  * Wallets should be migrated before usage.    h3. Transactions Builders    Transaction builders API would allow to pass DID in both (full-qualified and short) forms. If the net prefix specified but it's default and configured to skip by settings - it should be removed while creating transaction JSON.    If the prefix is not defined, the short form of DID would be used in transaction JSON as well.    h3. DID in the wallet    DIDs always would be stored in full-qualified form. If short DID passed to the API, the configured prefix would be applied before storing to the wallet    See IS-1359 about wallet migration    h2. Option 2: Backwards Compatible: Configurable behavior  * There would be a way to define behavior of libindy like protocol version for Client-Node communication.  * If an App setup new behavior then it follows the approach in breaking changes.  * The App can chose the current deprecated behavior. In this case libindy will always return short form of DIDs.  * Optionally it may accept full-qualified form of DIDs but the prefix would be totally ignored (cut of right after the API layer, not stored in the wallet, etc)    h2. See Also  * https://jira.hyperledger.org/browse/INDY-51  * [https://github.com/hyperledger/indy-sdk/pull/1487]  * [https://openssi.github.io/peer-did-method-spec/index.html]  * [https://w3c-ccg.github.io/did-spec/]",Task,Medium,Complete,"2019-08-16 14:00:20","2019-08-16 14:00:20",5
"Hyperledger Indy SDK","Release 1.11.1","*Release Goal*  Release everything that is ready. Mostly bug fixes.    *Acceptance Criteria*  Regular instructions:  * Code is tested  * Review upstream releases to decide what should be included in this build  ** Ursa  * Build is produced with automated CI / CD  ** Official build is tagged as released in Git  ** Official builds should be the only builds that are not marked in GitHub as pre-release  * Prepare basic documentation on new features  * Prepare the Release Notes  ** Link to the documentation on new features  ** Stored as a CHANGELOG.md in the root of the repo  ** Latest release at the top, above the release notes for all previous versions  * The release should be on GitHub “Releases” tab.  ** Release notes should be in the “Description field of the GitHub release artifact  * The release is marked in JIRA  * Add the correct fixVersion to included issues  * Enable others to use the release:  ** Email stakeholders with links to the artifacts and release notes",Task,Medium,Complete,"2019-08-15 14:20:19","2019-08-15 14:20:19",5
"Hyperledger Indy SDK","Make Libvcx support payment by endorser","We need to update Libvcx to support endorser functionality according to PoA provided in the [ticket|IS-1339]    This is needed to support use cases where 3rd parties can add a payment to a transaction, such as described in:  https://sovrin.atlassian.net/browse/ST-608  ",Task,Medium,New,"2019-08-15 11:06:27","2019-08-15 11:06:27",5
"Hyperledger Indy SDK","Study Peer DID RFC","[https://github.com/hyperledger/aries-rfcs/tree/master/features/0030-sync-connection]         [https://openssi.github.io/peer-did-method-spec]",Task,Medium,Complete,"2019-08-14 14:55:59","2019-08-14 14:55:59",5
"Hyperledger Indy SDK","Improve Indy SDK architecture overview","There is an architecture of Indy SDK overview in [https://github.com/hyperledger/indy-sdk/tree/master/docs/architecture]         The goal for this ticket is to collect notes and wishlist about improvements and detalization in these documents.",Task,Medium,Complete,"2019-08-14 13:41:06","2019-08-14 13:41:06",3
"Hyperledger Indy SDK","Pool: Configure the number of nodes to send read requests","As a developer building an application using the Indy SDK, I want to be able to configure the number of nodes Libindy sends read requests.",Task,Medium,Complete,"2019-08-14 11:13:45","2019-08-14 11:13:45",1
"Hyperledger Indy SDK","LibVCX initialize accepts pool config","libIndy accepts a configuration parameter for tuning pool connections.    https://github.com/hyperledger/indy-sdk/blob/master/docs/configuration.md#pool    Users of LibVCX should be able to set the same configuration, which would get forwarded to LibIndy.",Task,Medium,Complete,"2019-08-07 17:02:15","2019-08-07 17:02:15",1
"Hyperledger Indy SDK","Make Libvcx support endorser","We need to update Libvcx to support endorser functionality according to PoA provided in the [ticket|IS-1339]    ",Task,Medium,Complete,"2019-08-07 07:32:26","2019-08-07 07:32:26",5
"Hyperledger Indy SDK","Reduce load on CI pipeline for PRs (PoA + impl)","The CI pipeline is not keeping pace with the PRs.    Example options:  * Increase resources  * Evaluate which tests are required to have confidence in a PR, and which tests can be run less frequently (such as a nightly build)    Acceptance Criteria  * Evaluate the concern  * Share findings on the Indy mailing list  * Present in an Indy Maintainers call  * Create issues for follow up work",Task,High,Complete,"2019-08-05 15:13:49","2019-08-05 15:13:49",8
"Hyperledger Indy SDK","POA: Make Libvcx support endorser","Libindy provides `indy_append_request_endorser` that allows appending Endorser to an existing request.   It allows writing transactions to the ledger with preserving an original author but by different Endorser.   We need to update Libvcx to support endorser functionality.    *Goals*   * See the story and goals in INDY-1999    *Acceptance Criteria*  * Analyze the work required.  * Raise issues for completing the work.",Task,Medium,Complete,"2019-07-31 08:26:51","2019-07-31 08:26:51",2
"Hyperledger Indy SDK","Make Indy-CLI support endorser","Libindy provides `indy_append_request_endorser` that allows appending Endorser to an existing request.  It allows writing transactions to the ledger with preserving an original author but by different Endorser.    We need to update Indy-CLI to provide a way of adding endorser to request and sending them to the ledger.   Also, we need to update CLI output in reading requests to print endorser if it presents.",Task,Medium,Complete,"2019-07-30 09:32:32","2019-07-30 09:32:32",2
"Hyperledger Indy SDK","Implement sign_with_address/verify_with_address in LibVCX","Right now sign_with_address/verify_with_address functionality is not available to LibVCX.  Plan of Attack:  * Specify usecases for VCX and this functionality  * Design new calls  * Implement them and needed tests",Task,Medium,Complete,"2019-07-29 16:10:40","2019-07-29 16:10:40",3
"Hyperledger Indy SDK","Implement sign_with_address/verify_with_address calls in wrappers","Currently sign_with_address/verify_with_address are implemented only in Rust wrapper. We need this functionality in all wrappers.    *Acceptancce criteria*:  * Calls are implemented in Java, NodeJS, iOS and Python wrappers  * Tests in these wrappers also implemented",Task,Medium,Complete,"2019-07-29 16:09:14","2019-07-29 16:09:14",2
"Hyperledger Indy SDK","Improve architecture documentation for Indy SDK","*Acceptance Criteria*  * Relevant architecture diagrams that already exist should be added to the design folder of the repository  * Key parts of the Indy SDK architecture should be documented  ** Threading model  ** Language bindings",Task,Medium,Complete,"2019-07-29 15:20:10","2019-07-29 15:20:10",5
"Hyperledger Indy SDK","Document Generator Point","Indy and Plenum are using a constant that is the generator point for keys used for the signatures.    `3LHpUjiyFC2q2hD7MnwwNmVXiuaFbQx2XkAFJWzswCjgN1utjsCeLzHsKk1nJvFEaS4fcrUmVAkdhtPCYbrVyATZcmzwJReTcJqwqBCPTmTQ9uWPwz6rEncKb2pYYYFcdHa8N17HzVyTqKfgPi4X9pMetfT3A5xCHq54R2pDNYWVLDX`    [https://github.com/hyperledger/indy-sdk/blob/master/libindy/src/services/pool/request_handler.rs#L66]    [https://github.com/hyperledger/indy-plenum/blob/master/crypto/bls/indy_crypto/bls_crypto_indy_crypto.py#L19]         The documentation should explain the value of the constant and what properties it has.    Also why plenum and libindy _need_ to have the same constant and what happens when the values differ.         One outcome of the discussion and the documentation could be that libindy needs to get the value from the pool config or genesis file of the pool if a pool is using a different constant then the hardcoded one in Plenum.         I stumbled upon this in this PR [https://github.com/hyperledger/indy-sdk/pull/1739]          ",Task,Medium,Complete,"2019-07-26 14:59:03","2019-07-26 14:59:03",1
"Hyperledger Indy SDK","Support `need_to_be_on_ledger` flag for auth rules","Libindy should support `need_to_be_on_ledger` flag for auth rules (INDY-2171).",Task,Medium,Complete,"2019-07-24 15:52:15","2019-07-24 15:52:15",2
"Hyperledger Indy SDK","Create public apt repository for Ubuntu 18.04",,"New Feature",Medium,Complete,"2019-07-22 14:47:09","2019-07-22 14:47:09",2
"Hyperledger Indy SDK","Transaction authors don't need to be endorsers","SDK side of the work to allow tracking authors separate from endorsers.    *Acceptance Criteria*   * API changes as described in [https://github.com/hyperledger/indy-node/blob/master/design/transaction_endorder.md]   * Make sure that `sign_request` and `multi_sign_request` can be called interchangeably",Task,Medium,Complete,"2019-07-19 15:14:31","2019-07-19 15:14:31",3
"Hyperledger Indy SDK","Release Indy SDK 1.11.0","*Release Goal*  Release everything that is ready. Especially:  * Flexible attribute tagging  * Improvements to offline signing    *Acceptance Criteria*  Regular instructions:  * Code is tested  * Review upstream releases to decide what should be included in this build  ** Ursa  * Build is produced with automated CI / CD  ** Official build is tagged as released in Git  ** Official builds should be the only builds that are not marked in GitHub as pre-release  * Prepare basic documentation on new features  * Prepare the Release Notes  ** Link to the documentation on new features  ** Stored as a CHANGELOG.md in the root of the repo  ** Latest release at the top, above the release notes for all previous versions  * The release should be on GitHub “Releases” tab.  ** Release notes should be in the “Description field of the GitHub release artifact  * The release is marked in JIRA  * Add the correct fixVersion to included issues  * Enable others to use the release:  ** Email stakeholders with links to the artifacts and release notes",Task,Medium,Complete,"2019-07-19 14:19:24","2019-07-19 14:19:24",5
"Hyperledger Indy SDK","CLI: Allow building of transactions without signature","Indy-CLI provides an optional `send` flag which allows building a transaction without sending to the ledger. It will be useful to add a flag which indicates it signing of a transaction is needed.","New Feature",Medium,Complete,"2019-07-18 13:51:02","2019-07-18 13:51:02",3
"Hyperledger Indy SDK","Official RPMs for CentOS","*Acceptance Criteria*  * RPMs that are analogous to the current DEB packages  * CentOS environments for builds  * Automated tests run    *Notes*  * This is only for Indy SDK. Indy Node work is tracked as the epic INDY-47  * Creating the Yum repository for distribution is tracked as INDY-1000",Task,Medium,Complete,"2019-07-17 17:01:18","2019-07-17 17:01:18",5
"Hyperledger Indy SDK","Evaluate Aries agents","Evaluate the approaches to Aries agents taken in the following repositories:   * Aries-CloudAgent-Python   * Aries-StaticAgent-Python    What functionality should Aries SDK and Indy SDK provide in order to assist these agents?",Task,Medium,Complete,"2019-07-17 14:45:03","2019-07-17 14:45:03",5
"Hyperledger Indy SDK","Support state proofs in GET_TXN",,Task,Medium,Complete,"2019-07-17 14:42:46","2019-07-17 14:42:46",5
"Hyperledger Indy SDK","Allow usage payment address instead of explicit payment sources in CLI",,"New Feature",Medium,Complete,"2019-07-05 14:44:53","2019-07-05 14:44:53",5
"Hyperledger Indy SDK","Indy CLI command history should persist between sessions","*Acceptance Criteria*  * Sensitive data such as seeds and private keys should not be written to disk, even in encrypted form.    *Notes*  * We considered whether the history should be encrypted on the disk, and unlocked. We decided against it.  ** That the CLI history is no more concerning than the Bash history.  ** It would be odd to ask the user to retain a different password just for the history, and have to provide it before having to provide the password for opening a wallet.",Task,Medium,Complete,"2019-07-01 15:32:33","2019-07-01 15:32:33",2
"Hyperledger Indy SDK","Document how to prefer specific validators","LibIndy allows clients to set the order in which they want to read from validator nodes. This can allow stewards to prefer querying their own node.    https://github.com/hyperledger/indy-sdk/blob/master/libindy/src/api/pool.rs#L72    This needs to be documented.    The documentation should note that consistently querying a single node can open up a class of attacks against a user, but the BLS signature can help to detect if the node is malicious.",Task,Medium,Complete,"2019-06-28 17:29:34","2019-06-28 17:29:34",1
"Hyperledger Indy SDK","upgrade vcx packages to improve security","Some of the rust crates that we use should be updated to eliminate security vulnerabilities. See attached graphic. !Screen Shot 2019-06-27 at 11.18.48 AM.png!",Task,Medium,Complete,"2019-06-27 18:20:14","2019-06-27 18:20:14",1
"Hyperledger Indy SDK","Return the identifier of a cred def that already exists","*Story*  As a developer of an application for an Indy network, if I try to create a credential definition that is already in the wallet, I want the wallet to return the identifier for the cred def instead of giving me an error that it already exists so that it is easy for me to use the cred def.    After making the create call, the developer should be able to use the previously existing cred def the same as if it was newly created.","New Feature",Medium,Complete,"2019-06-25 15:28:19","2019-06-25 15:28:19",1
"Hyperledger Indy SDK","Answering yes to prompts when using Indy CLI batch automation","*Story*  As a network administrator using indy-cli to automate administration, I will call Indy CLI in batch mode and perform potentially dangerous actions that will prompt a warning requiring user acknowledgement. I want to be able to use a flag that tells indy-cli to always accept a yes when acknowledgement is required in this mode.    *Acceptance Criteria*  * A flag exists that similar to -y  * When the flag is provided at the time indy-cli is called, any operation which would normally require user acknowledgement of yes or no proceeds as if the user entered yes.  * A message is printed to the logs and console that is similar to Proceeding with response of 'yes' because of '-y' flag.    *Note*  * As an example, see the Apt tool for Debian.","New Feature",Medium,Complete,"2019-06-24 23:46:47","2019-06-24 23:46:47",1
"Hyperledger Indy SDK","Only return the date (not time) for the TAA acceptance","If an application attempts to use a TAA timestamp with too much precision, it can be a privacy risk. LibIndy should discard the time portion and only provide to the ledger the date as part of the signed transaction.",Task,Medium,Complete,"2019-06-24 18:01:15","2019-06-24 18:01:15",2
"Hyperledger Indy SDK","Return already existing DID","*Story*  As a developer building an application that uses LibIndy, if I try to submit a DID to the wallet that already exists, I want the wallet to return a handle to the DID instead of issuing me an error.    Or at least give me a hint as to how to get the DID out of the wallet.","New Feature",Medium,Complete,"2019-06-12 02:01:40","2019-06-12 02:01:40",1
"Hyperledger Indy SDK","Tab completion in the Indy CLI","*Story*  As a developer using the Indy CLI, I want tab to cycle through logic values to complete my current action so that it is easier to use the CLI.    *Acceptance Criteria*  Tab completion exists for:  * Wallet names  * DIDs  * Previously used payment addresses    Issues are created for further work.","New Feature",Medium,Complete,"2019-06-12 01:52:41","2019-06-12 01:52:41",5
"Hyperledger Indy SDK","Release Indy SDK 1.10.0","*Release Goal*  Release everything that is ready. Especially:  * Flexible attribute tagging  * Improvements to offline signing    *Acceptance Criteria*  Regular instructions:  * Code is tested  * Review upstream releases to decide what should be included in this build  ** Ursa  * Build is produced with automated CI / CD  ** Official build is tagged as released in Git  ** Official builds should be the only builds that are not marked in GitHub as pre-release  * Prepare basic documentation on new features  * Prepare the Release Notes  ** Link to the documentation on new features  ** Stored as a CHANGELOG.md in the root of the repo  ** Latest release at the top, above the release notes for all previous versions  * The release should be on GitHub “Releases” tab.  ** Release notes should be in the “Description field of the GitHub release artifact  * The release is marked in JIRA  * Add the correct fixVersion to included issues  * Enable others to use the release:  ** Email stakeholders with links to the artifacts and release notes",Task,Medium,Complete,"2019-06-11 19:00:35","2019-06-11 19:00:35",5
"Hyperledger Indy SDK","In indy-cli batch mode, a user should be able to automatically exit upon completion of the script","*Desired:*    When an exit instruction is encountered in a batch script, the indy-cli shell should exit at that point.    *Current behavior:*    When running in batch mode, currently the user remains in the indy-cli shell when the script is completed. This is undesirable for users that wish to use indy-cli as part of a larger script. This is true even if the user puts exit as the final line of his script.    For example, for this batch script:         the current result is:                    ","New Feature",Low,Complete,"2019-06-05 19:37:24","2019-06-05 19:37:24",2
"Hyperledger Indy SDK","Indy SDK 2.0: Design for Aries vs Indy","Key considerations:   * What moves from LibIndy to LibAries. What stays.  ** Indy: Ledger resolver  ** Aries: Wallet, Pack / unpack, payment API  ** CLI: move to Aries to be generic, or stay in Indy to focus on usability?   * The future of LibVCX  ** Which API calls should stay in Indy, move to Aries, or move to be Evernym specific   * Threading model improvements.   * Renaming Wallet    *Acceptance Criteria*  * Close the current Indy SDK Architecture proposal design PR  * Create a new Indy SDK design PR with a revised architecture proposal  * Review this proposal with the Aries and Indy communities and decide on next steps",Task,Medium,Complete,"2019-06-05 15:26:02","2019-06-05 15:26:02",13
"Hyperledger Indy SDK","Better document getCredDefResponse","In the node.js libindy wrapper, parseGetCredDefResponse (getCredDefResponse ) isn't adequately documented. For example what do the values n, s, r, rctxt and z represent? Also what do the digits for each attribute represent - e.g age:“641...’?    Goal:    To get the necessary credential definition data from the ledger that would be needed to verify a proof relating to the credential definition.    Concerns:   * Single letter variable names, with no comment explaining their purpose   * No link to more information    Notes:   * The variable names come from this paper: [https://github.com/hyperledger/ursa/blob/master/libursa/docs/AnonCred.pdf]   * Validation is documented in this HIPE:   [https://github.com/hyperledger/indy-hipe/blob/c761c583b1e01c1e9d3ceda2b03b35336fdc8cc1/text/anoncreds-protocol/README.md]    Action items:   * A comment should be added that links to the HIPE and paper.   * A comment should be added to briefly describe each variable that does not have a descriptive names.   * If a higher level function is recommended for most purposes, there should be a comment that explains that.   * Issues are created to add further documentation if necessary.",Task,Medium,Complete,"2019-05-31 00:18:57","2019-05-31 00:18:57",1
"Hyperledger Indy SDK","Enable fees determining based on GET_AUTH_RULES in VCX",,"New Feature",Medium,Complete,"2019-05-24 13:57:00","2019-05-24 13:57:00",3
"Hyperledger Indy SDK","Support Set AuthRules for multiply entries",,"New Feature",Medium,Complete,"2019-05-20 14:48:37","2019-05-20 14:48:37",3
"Hyperledger Indy SDK","Can't make REVOC REG DELTA state proof reading with both FROM and TO timestamps","Build Info:  libindy 1.8.3~1097    Steps to Reproduce:  1. Get current time timestamp.  2. Write REVOC REG DEF and REVOC REG ENTRY.  3. Get another current time timestamp.  4. Try to read REVOC REG DELTA with both timestamps as FROM and TO parameters.    Actual Results:  Consensus is impossible error. If we use only Step 3 timestamp as TO parameter than we read state proof successfully.    Expected Results:  We should make successfull state proof reading in both cases.",Task,Medium,Complete,"2019-05-17 14:58:58","2019-05-17 14:58:58",2
"Hyperledger Indy SDK","Can't make REVOC REG state proof reading if timestamp is older than REVOC REG DEF","Build Info:  libindy 1.8.3~1097    Steps to Reproduce:  1. Get current time timestamp.  2. Write REVOC REG DEF and REVOC REG ENTRY.  3. Try to read REVOC REG using state proof (from 1 alive node) and timestamp from Step 1.    Actual Results:  Consensus is impossible error. If we use timestamp that is newer than REVOC REG DEF than we read state proof successfully.    Expected Results:  We should make successfull state proof reading in both cases.",Task,Medium,Complete,"2019-05-17 14:57:29","2019-05-17 14:57:29",2
"Hyperledger Indy SDK","Rename TRUST_ANCHOR to ENDORSER",,Task,Medium,Complete,"2019-05-17 08:57:28","2019-05-17 08:57:28",1
"Hyperledger Indy SDK","CLI should allow to send custom request from context",,"New Feature",Medium,Complete,"2019-05-10 10:42:56","2019-05-10 10:42:56",1
"Hyperledger Indy SDK","Process feedback on Aries vs IndySDK 2.0 proposal",,Task,Medium,Complete,"2019-05-09 10:19:34","2019-05-09 10:19:34",5
"Hyperledger Indy SDK","TAA Integration with Node",,Task,High,Complete,"2019-05-09 10:18:26","2019-05-09 10:18:26",3
"Hyperledger Indy SDK","TAA acceptance mechanism should be configurable in CLI","*Acceptance Criteria*    When accepting the Transaction Author Agreement, the string used to indicate the Acceptance Mechanism should be pulled from a configuration parameter.   * The configuration parameter could be pulled from a text file or on the command line.   * The configuration parameter should default to blank.   * It has to be filled  to be filled with the string enforced by the ledger they are using, if that ledger requires acceptance of an agreement.","New Feature",Low,Complete,"2019-05-09 10:05:23","2019-05-09 10:05:23",2
"Hyperledger Indy SDK","Update VCX to use the new AUTH_RULE-based approach for GET_FEES","As of now, VCX sends GET_FEES before every SCHEMA or CLAIM_DEF request.    With the new AuthRules logic, VCX needs to do the following:   * Send GET_AUTH_RULE for CLAIM_DEF/SCHEMA action (hardcode the action ID since it's not changed)   * Parse the AuthConstraint and find fees aliases (if any)   * Set GET_FEES(alias) to get how much SCHEMA/CLAIM_DEF costs.    Note: unlike fees, Auth Rules are changed rarely, so it may be fine to cache result of GET_AUTH_RULE.",Task,Medium,Complete,"2019-05-08 08:49:49","2019-05-08 08:49:49",5
"Hyperledger Indy SDK","Replace Indy-Crypto with Ursa",,Task,Medium,Complete,"2019-04-26 16:18:09","2019-04-26 16:18:09",1
"Hyperledger Indy SDK","Allow user to modify claim_def","Implement functionality so that user could modify claim_def and revoc_reg_def (probably, need to be checked if this case needed)",Task,Medium,Complete,"2019-04-25 08:34:50","2019-04-25 08:34:50",5
"Hyperledger Indy SDK","Release Indy SDK 1.9.0","*Task Overview*   Perform all necessary tasks to have a release of LibIndy. We want to release everything that is ready.    *Acceptance Criteria*   * Code is tested   * Release is tagged   * Release notes are drafted  * Issues in JIRA are assigned to the correct fix version   * Release notes are reviewed by Docs and Product Management   * A new release of Indy-Crypto is part of this release    *Notes*  * Evernym maintained ledger plugins may also need to be released.",Task,Medium,Complete,"2019-04-23 15:34:41","2019-04-23 15:34:41",8
"Hyperledger Indy SDK","Release Indy SDK 1.8.3","*Task Overview*   Perform all necessary tasks to have a release of LibIndy. We want to release everything that is ready.    *Acceptance Criteria*   * Code is tested   * Release is tagged   * Release notes are drafted  * Issues in JIRA are assigned to the correct fix version   * Release notes are reviewed by Docs and Product Management   * A new release of Indy-Crypto is part of this release    *Notes*  * Evernym maintained ledger plugins may also need to be released.",Task,Medium,Complete,"2019-04-23 15:34:26","2019-04-23 15:34:26",5
"Hyperledger Indy SDK","CLI should provide the way to multisign any transaction","It needs to be possible to add signatures to an existing transaction without requiring cut-and-paste the text    *Acceptance Criteria*  The CLI needs to be able to:  * Generate a transaction without submitting it to the ledger.  * Allow the transaction to be saved as a text file.  * Import a transaction from a text file.  * Append a signature to an existing transaction.    *Notes*  I'm picturing a user interaction like:  ","New Feature",Medium,Complete,"2019-04-23 13:01:49","2019-04-23 13:01:49",2
"Hyperledger Indy SDK","Force update to list of active pool","*Story*  As a developer building an application for an Indy network that is expected to run continuously for a long time, I want to be able to force an update of the list of active nodes in the pool so that I keep valid connections without having to restart libindy.    Specific use cases include hosted services which could have  very long uptimes.    *Acceptance Criteria*  * LibIndy should automatically update the pool list on a configurable frequency.  * It should be possible to disable the automatic update.  * An API command exists which will cause libindy to re-synchronize the pool list.  * The process needs to be documented.    *Notes*  * Would client application developers prefer to manage the cron for automatic updates in their application instead of having libindy do it?","New Feature",Medium,New,"2019-04-18 15:09:04","2019-04-18 15:09:04",3
"Hyperledger Indy SDK","Credential Exchange HIPE improvements","*Acceptance Criteria*  * Incorporate into the HIPE the improvements suggested by reviewers.  * Define how payments can be optionally included in credential exchange (might be a separate HIPE).","New Feature",Medium,Complete,"2019-04-12 14:21:19","2019-04-12 14:21:19",5
"Hyperledger Indy SDK","POA: Transaction Author Agreement API","*Story*  As a steward of an Indy network, I want transaction authors to agree that the information they submit to the ledger meets the requirements outlined by ledger governance for the current transaction to minimize the liability that stewards accept when storing the data on an immutable ledger.    *Acceptance Criteria*  Design the API calls to:  * Pull the list of valid acceptance mechanisms from the ledger.  * Allow downstream applications to expose the agreement in an acceptable way to users receive their consent.  * Pulling the hash of the agreement so that downstream applications can detect when the agreement changes.    Show how existing calls can modified to:  * Require transaction author agreement  acceptance before submitting a write to the public ledger.  * Include as part of the transaction signature a digital signature indicating the acceptance of the author agreement. (To achieve this, it is sufficient to include the hash of the agreement in the existing signed transaction. A second signature is not required.)  * The transaction also records the time and date when the agreement was accepted.  * The transaction records an indication of how it was accepted pulled from a list of valid mechanisms that is stored on the ledger.    Questions:  * Should we store the agreement acceptance date and time in the wallet? (This would allow the acceptance to be backed up and restored with the wallet.)",Task,Medium,Complete,"2019-04-12 14:10:45","2019-04-12 14:10:45",3
"Hyperledger Indy SDK","HIPE for payment transfer","Need to create a HIPE for wallet-to-wallet payment transfer.    Notes:  * Some of the process might better be documented as a SIP in the Sovrin project.","New Feature",Medium,Complete,"2019-03-15 12:27:21","2019-03-15 12:27:21",5
"Hyperledger Indy SDK","Review TODO / FIXME items","There are a number of TODO / FIXME items in our code base (see attached).    We should review these items as we prepare a plan for SDK 2.0.",Task,Medium,Complete,"2019-02-27 21:07:30","2019-02-27 21:07:30",3
"Hyperledger Indy SDK","Review github security vulnerability notices","Github is reporting some security vulnerabilities in indy-sdk repo.   We should review this and make a decision what to do.        {quote}We found a potential security vulnerability in a repository for which you have been granted security alert access.  @hyperledger     hyperledger/indy-sdk  Known low severity security vulnerability detected in just-extend < 4.0.0 defined in package-lock.json.  package-lock.json update suggested: just-extend ~> 4.0.0.  Always verify the validity and compatibility of suggestions with your codebase  {quote}    *Acceptance Criteria*  * Diagnose the problem  * Decide on the severity  * If we decide it is a real problem, fix it if it is small, or raise a new ticket      ",Task,Medium,Complete,"2019-02-27 17:50:45","2019-02-27 17:50:45",2
"Hyperledger Indy SDK","GET_AUTH_RULE commands support","See INDY-2010.    *Acceptance criteria*   * Implement GET_AUTH_RULE command   * Implement GET_ALL_AUTH_RULES command   * Integrate into CLI   * Cover by tests",Task,Medium,Complete,"2019-02-27 10:41:12","2019-02-27 10:41:12",3
"Hyperledger Indy SDK","AUTH_RULE command support","See INDY-2003.    *Acceptance criteria*   * Add AUTH_RULE command builder     ** Think about a reasonable way to build/create CONSTRAINT field   * Integrate into CLI   * Cover by tests",Task,Medium,Complete,"2019-02-27 10:39:22","2019-02-27 10:39:22",3
"Hyperledger Indy SDK","Release Indy SDK 1.8.2","*Task Overview*   Perform all necessary tasks to have a release of LibIndy. We want to release everything that is ready.    *Acceptance Criteria*   * Code is tested   * Release is tagged   * Release notes are drafted  * Issues in JIRA are assigned to the correct fix version   * Release notes are reviewed by Docs and Product Management   * A new release of Indy-Crypto is part of this release    *Notes*  * Evernym maintained ledger plugins may also need to be released.",Task,Medium,Complete,"2019-02-26 20:05:49","2019-02-26 20:05:49",8
"Hyperledger Indy SDK","Document how LibIndy will consume message protocols","*Story*  As a developer extending LibIndy, I want to be able to insert my own helper API functions for a new protocol message family by using an existing protocol message family definition, modifying the implementation, and recompiling LibIndy. This will make it easy for me to make my protocol message family definition available to other users of the Indy ecosystem regardless of the language their agent is written in (through the C-callable API).    *Acceptance Criteria*  A MarkDown document exists in the SDK design doc folder that describes the architecture LibIndy will need to support for message protocols (message families and state machines). The document must contain the pros / cons of this approach, and other approaches we considered.    *Notes*  * It is expected that the protocol message family will consist of a set of APIs exposed through the C-callable interface. The API implementation will encode the messages in the family, and the transitions between them.  * Business logic is expected to exist in the agent, and not in LibIndy.",Task,Medium,Complete,"2019-02-25 15:36:08","2019-02-25 15:36:08",8
"Hyperledger Indy SDK","Document future architecture of LibIndy with message families","Acceptance Criteria:  A MarkDown document exists in the SDK design doc folder that describes how the SDK will be structured after adding support for message protocols (message families and state machines). It should specifically address:  * number of artifacts  * how to add support for a message protocol  * organization of CI / CD  * pros / cons of this approach    Optional:  * A diagram of the layers of a full solution  * A diagram of the components of LibIndy    Overview of proposed architecture:    Indy SDK 2.0 consists of  * LibIndy which provides API helper functions to generate plain text messages, manage the wire message protocol, generate specific plaintext messages, and manage protocol transitions.  ** LibIndy namespace  *** Wallets  *** Resolver  *** Ledger Comms  *** DID Comm Infrastructure  **** Pack / Unpack  **** Message family handler  **** Protocol transition handler  *** Payment plugin handler  ** VCX namespace  *** Message family  *** Protocol transitions  ** DIDComm namespace  *** Trust Ping  *** Connections  **** Protocol transitions  *** Basic message  * Ursa  * Basic protocol test harness  * Thin SDK wrappers    Consumed by:    Fat language idiomatic wrapper    or    Agent_Helpers (public and open source)  * Provides a C-callable interface similar to LibVCX today  * Wallet handles  * Transport  * Payment plugin instantiation  * Agent test suite  * Protocol state machine  * Fat language idiomatic wrappers (Android, IOS, NodeJS, Enterprise Java, Python)    Downstream applications can consume LibIndy through a fat wrapper or through the Agent Helpers. The downstream application needs to provide the business logic and the business logic state machine.    Note:  * Names like Agent Helpers are placeholders and can be improved  ** It makes too many decisions to be a library, but doesn't take enough control to be a framework  * Here is a diagram showing Nathan's view of the large stack:  https://docs.google.com/drawings/d/14lVjP4UzteIqO2aJOy3JinjcGkKH-KYjIKqRgbXU2a0/edit",Task,Medium,Complete,"2019-02-22 22:16:56","2019-02-22 22:16:56",5
"Hyperledger Indy SDK","Investigate Aries protocol tests","*Story*  Aries is producing a protocol test suite that will be used to verify compatibility across all agents. LibVCX needs to pass this test suite for the core messages we want to support at this time (connecting, holding, proving). This will give us confidence that a message family will work work appropriately on all the platforms that are supported.    *Acceptance Criteria*   * Review the current Aries protocol test suite.   * Plan improvements required in the test suite.   * Review the plan with an architect.   * Create the necessary tickets.    *Notes*   * Previous analysis in IS-946.   * In the future, we will evaluate whether we need automated testing of protocols included in LibVCX.",Task,Medium,Complete,"2019-02-22 22:14:59","2019-02-22 22:14:59",5
"Hyperledger Indy SDK","Implement basic message protocol","Review these HIPEs:    Provide feedback on the HIPEs    Implement the changes possible in the current code base.    Pass the basic message tests of the agent test suite. Contribute missing tests to the agent test suite.    Provide feedback on the open questions that aren't resolved in the HIPE PR.    Raise relevant issues for further improvements.    Notes   * LibVCX currently expects that all connections are started by the issuer agent, not by the mobile agent. This could make it difficult to pass both directions of the test. It may be necessary to raise a separate issue for implementing the connections initiated by the mobile agent.",Task,Medium,Complete,"2019-02-22 21:11:01","2019-02-22 21:11:01",5
"Hyperledger Indy SDK","Update READMEs for new artifacts location","New locations for *com.evernym.vcx* and *org.hypereldger.indy* java wrapper packages: [https://repo.sovrin.org/repository/maven-release] (might be referenced using[https://repo.sovrin.org/repository/maven-public] as well)",Task,Medium,Complete,"2019-02-21 19:45:11","2019-02-21 19:45:11",1
"Hyperledger Indy SDK","Add public api to encrypt data","Connect.me has a feature to send logs to team members for debug capabilities. We have a requirement to encrypt these logs but there is no public api in crypto.rs to do this. I spoke in person with  [~m.serg32] about this.    Acceptance Criteria:  * Provide an API endpoint to handle arbitrary encryption",Task,Medium,Complete,"2019-02-18 20:55:06","2019-02-18 20:55:06",1
"Hyperledger Indy SDK","A2A: Process feedback on Credential Exchange MF HIPE","Feedback that needs to be addressed:  * The credential attachment is too opaque. Some items need to be metadata and we need a detailed explanation of the contents of the credential attachment.  * We need to be specific about how are credential payments transferred.",Task,Medium,Complete,"2019-02-15 09:52:56","2019-02-15 09:52:56",3
"Hyperledger Indy SDK","LibVCX and Aries connection protocol","Current VCX flow    Inviter:   1) vcx_connection_create -> creates `Connection` state object associated with handle -> state.Initialized = 1   2) vcx_connection_connect -> prepares invite which already contains inviter pairwise keys -> move state.OfferSent = 2 -> share invite somehow with Invitee   3) vcx_connection_update_state -> wait until get `invite response` -> store recived pairwise data -> move state.VcxStateAccepted = 4 -> assume that connection is establised.    Invitee:   1) vcx_connection_create_with_invite -> creates `Connection` state object associated with handle -> store recived pairwise data -> state.VcxStateRequestReceived = 3   2) vcx_connection_connect -> send invite response -> move state.VcxStateAccepted = 4 -> assume that connection is establised.    Aries flow: [https://github.com/hyperledger/aries-rfcs/tree/master/features/0023-did-exchange]    Inviter:   1) vcx_connection_create -> creates `Connection` state object associated with handle -> state.Initialized = 1   2) vcx_connection_connect -> prepares invite which contains minimal agent data necessary to reply on invite -> move state.Invited = 2 -> share invite somehow with Invitee   3) vcx_connection_update_state -> asks agency for messages by sending `GetMessages` command with status code `Pending`? -> (decrypt)  wait until get `connection_request` message -> move state.Requested = 3 -> prepare `connection_request` message containing paiwise connection data -> send `connection_request` -> move state.Responded = 4 -> send UpdateMessageStatus`  command to agenct with status code `Accepted`? -> (decrypt) wait until get `ack` -> stores recived pairwise data -> move state.Accepted = 5 -> send UpdateMessageStatus`  command to agenct with status code `Accepted`? -> assume that connection is establised.    Invitee:   1) vcx_connection_create_with_invite -> creates `Connection` state object associated with handle -> state.Invited = 2   2) vcx_connection_connect -> prepare `connection_request` message containing paiwise connection data -> send `connection_request` -> move to state.Requested = 3   3) vcx_connection_update_state -> asks agency for messages by sending `GetMessages` command with status code `Pending`? -> (decrypt)  until get `connection_response` -> stores recived pairwise data -> move state.Responded = 4 -> send `ack` -> move state.Accepted = 5  -> send UpdateMessageStatus`  command to agenct with status code `Accepted`? -> assume that connection is establised.    Already supported:   - Message encryption/decryption: [https://github.com/hyperledger/aries-rfcs/tree/master/features/0019-encryption-envelope]   - Message Id and Threading: [https://github.com/hyperledger/aries-rfcs/tree/master/concepts/0008-message-id-and-threading]    Difference:    Difference:   1) The format of outgoing and incoming messages are absolutely different.    2) Vcx packs messages according to pairwise DIDDoc stored in the state and sends them to pairwise remote endoint directly. NOT to it's own Agency.   3) Agency collects incoming messages in encoded view and with received status. Vcx gets them -> decodes them -> processes them -> sends updaes messages status command to Agency.   4) The general idea and format of the Invite message differ:   - In the current flow -> already contains all pairwise data need for other side connection establishment.   - In the aries -> only minimal data of the user and associated agent necessary to reply to the invite.    5) Aries protocol implies more state - We can hide it under `vcx_connection_update_state` function for both Inviter and Invitee. There were some additional states before moving to `Accepted`.   - Inviter should wait for `ack` message   - Invitee should wait to `respond` message and send `ack`.    6) Support sending and handling of Error Messages as described here: [https://github.com/hyperledger/aries-rfcs/tree/master/features/0160-connection-protocol#errors]    7) Minimal DidDoc handling.    Old description:   Review these HIPEs:   [https://github.com/hyperledger/indy-hipe/pull/54]    Provide feedback on the HIPEs    Implement the changes possible in the current codebase.    Pass the connection protocol tests of the agent test suite.    Provide feedback on the open questions that aren't resolved in the HIPE PR.    Raise relevant issues for further improvements.    *Notes*   * LibVCX currently expects that all connections are started by the issuer agent, not by the mobile agent. This could make it difficult to pass both directions of the connection test. It may be necessary to raise a separate issue for implementing the connections initiated by the mobile agent.",Task,Medium,Complete,"2019-02-13 14:33:28","2019-02-13 14:33:28",13
"Hyperledger Indy SDK","Evaluate Streetcred's Credential Exchange library","Streetcred has produced a credential exchange library:  https://github.com/streetcred-id/agent-framework    Acceptance Criteria:  * Review the library  * Give feedback to the Streetcred team  * Determine how Indy SDK can improve based on the ideas in the library  * Raise associated tickets",Task,Medium,Complete,"2019-02-11 14:58:45","2019-02-11 14:58:45",5
"Hyperledger Indy SDK","Release Indy SDK 1.8.1","*Task Overview*   Perform all necessary tasks to have a release of LibIndy.    *Acceptance Criteria*   * Code is tested   * Release is tagged   * Release notes are drafted  * Issues in JIRA are assigned to the correct fix version   * Release notes are reviewed by Docs and Product Management   * A new release of Indy-Crypto is part of this release    *Notes*  * Evernym maintained ledger plugins may also need to be released.",Task,Medium,Complete,"2019-02-11 14:33:39","2019-02-11 14:33:39",8
"Hyperledger Indy SDK","A2A: PoA for routing message family","Review these HIPEs:  * https://github.com/hyperledger/indy-hipe/tree/master/text/0022-cross-domain-messaging  * https://github.com/hyperledger/indy-hipe/pull/75    Provide feedback on the HIPEs    Provide a POA for reconciling the current implementation with the HIPEs.    Raise relevant issues.    Notes:  * Might need to create an additional message family for our current use case.",Task,Medium,Complete,"2019-02-11 08:44:58","2019-02-11 08:44:58",5
"Hyperledger Indy SDK","Need documentation for LibVCX iOS and Android build scripts","Fix and or add documentation and scripts so that anyone can build and run VCX iOS and android.",Task,Medium,Complete,"2019-02-07 17:33:05","2019-02-07 17:33:05",2
"Hyperledger Indy SDK","Update Libsovtoken to use new logging pattern","Libsovtoken logging initialization is implemented using the old model.  The new model involves calling indy_get_logger.    Update libsovtoken to use new pattern.",Task,Medium,Complete,"2019-02-07 17:31:04","2019-02-07 17:31:04",2
"Hyperledger Indy SDK","A2A: change message structure in dummy-agent",,Sub-task,Medium,Complete,"2019-02-07 12:29:02","2019-02-07 12:29:02",3
"Hyperledger Indy SDK","A2A: change message structure in VCX",,Sub-task,Medium,Complete,"2019-02-07 12:28:15","2019-02-07 12:28:15",8
"Hyperledger Indy SDK","DID API should allow pairwise key rotation","How do I update a pairwise did/verkey association in a wallet? I can call `did.store_their_did()` to set one in the first place. Now suppose the other party rekeys and I want to update the association in my wallet, or else I just fat-fingered it somehow. Calling it again with a new identify using the same DID but a new verkey raises a uniqueness exception as expected, but I don't see a way to delete or overwrite such an association.    The non_secrets API can handle all that pairwise can, plus updating/deleting and WQL searching by tags. My preference would be to get rid of pairwise, but that appears to be a minority opinion. Including functionality to update, replace, delete pairwise non_secrets via the pairwise API would suffice, while presenting (puzzling, to newcomers) redundancy with non_secrets.    For the moment, the non_secrets API offers a workaround.",Task,Medium,Complete,"2019-01-31 15:13:42","2019-01-31 15:13:42",3
"Hyperledger Indy SDK","iOS build OpenSSL build error","Running this command ci/ios-build.sh libindy x86_64-apple-ios from indy-sdk root folder, I was able to recreate the openssl compile error:    {quote}Compiling openssl-sys v0.9.40  error: failed to run custom build command for `openssl-sys v0.9.40`  process didn't exit successfully: `/Users/matt.raffel/src/work/indy-sdk/libindy/target/debug/build/openssl-sys-96156c4f067969eb/build-script-main` (exit code: 101)  --- stdout  cargo:rerun-if-env-changed=X86_64_APPLE_IOS_OPENSSL_LIB_DIR  cargo:rerun-if-env-changed=OPENSSL_LIB_DIR  cargo:rerun-if-env-changed=X86_64_APPLE_IOS_OPENSSL_INCLUDE_DIR  cargo:rerun-if-env-changed=OPENSSL_INCLUDE_DIR  cargo:rerun-if-env-changed=X86_64_APPLE_IOS_OPENSSL_DIR  cargo:rerun-if-env-changed=OPENSSL_DIR    --- stderr  thread 'main' panicked at 'OpenSSL library directory does not exist: /usr/local/Cellar/openssl/1.0.2l/lib', /Users/matt.raffel/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-sys-0.9.40/build/main.rs:60:9  note: Run with `RUST_BACKTRACE=1` for a backtrace.    warning: build failed, waiting for other jobs to finish...  error: build failed  Cargo exited unsuccessfully: exit code: 101{quote}    h2. when  OPENSSL_DIR=/usr/local/Cellar/openssl/1.0.2q    h2. Work around  copy /usr/local/Cellar/openssl/1.0.2q to /usr/local/Cellar/openssl/1.0.2l            ",Task,Medium,Complete,"2019-01-30 20:13:07","2019-01-30 20:13:07",2
"Hyperledger Indy SDK","Pack/unpack in iOS",,Sub-task,Medium,Complete,"2019-01-24 16:57:16","2019-01-24 16:57:16",1
"Hyperledger Indy SDK","Pack/unpack in NodeJS",,Sub-task,Medium,Complete,"2019-01-24 16:54:26","2019-01-24 16:54:26",1
"Hyperledger Indy SDK","Pack/unpack in Python",,Sub-task,Medium,Complete,"2019-01-24 16:54:10","2019-01-24 16:54:10",1
"Hyperledger Indy SDK","Pack/unpack in Java",,Sub-task,Medium,Complete,"2019-01-24 16:53:10","2019-01-24 16:53:10",1
"Hyperledger Indy SDK","Trustee can not touch verkey of the DID owner","Starting from Indy-node 1.6.746, Trustee can not touch verkey field of NYM txn if it's already set.    If a Trustee needs to change the role (demote/promote), he or she should send a txn with a role field only.    *Acceptance criteria*   * Make sure that nothing is broken in CLI   * Update all tests if necessary         Also please note, that error message will be fixed in the scope of INDY-1963",Task,Medium,Complete,"2019-01-22 07:17:43","2019-01-22 07:17:43",3
"Hyperledger Indy SDK","A2A: feature-discovery protocol","We need to support the Feature Discovery Protocol:    [https://github.com/hyperledger/aries-rfcs/tree/master/features/0031-discover-features]    *Acceptance Criteria*   * Provide feedback on the Aries RFC   * Implement the changes possible in the current code base.   * Pass the tests of the agent test suite. Contribute missing tests to the agent test suite.   * Provide feedback on the open questions that aren't resolved in the RFC PR.   * Raise relevant issues for further improvements.   * Contribute missing tests to the agent test suite.",Task,Medium,Complete,"2019-01-21 15:05:02","2019-01-21 15:05:02",5
"Hyperledger Indy SDK","A2A: support message threading","https://github.com/hyperledger/indy-hipe/tree/master/text/0027-message-id-and-threading    HIPE seems mature, but need to ensure it is compatible with VCX protocol.",Task,Medium,Complete,"2019-01-21 14:54:34","2019-01-21 14:54:34",5
"Hyperledger Indy SDK","Release Indy SDK 1.8.0","*Task Overview*   Perform all necessary tasks to have a release of LibIndy.    *Acceptance Criteria*   * Code is tested   * Release is tagged   * Release notes are drafted  * Issues in JIRA are assigned to the correct fix version   * Release notes are reviewed by Docs and Product Management   * A new release of Indy-Crypto is part of this release    *Notes*  * Evernym maintained ledger plugins may also need to be released.",Task,Medium,Complete,"2019-01-18 13:42:31","2019-01-18 13:42:31",8
"Hyperledger Indy SDK","CLI acceptance of Transaction Author Agreement","*Story*  As a developer on an Indy network, I want the CLI to show me the author agreement before submitting my transactions to the ledger so that I can proactively review and accept the terms.    *Acceptance Criteria*  * Before submitting a write to the public ledger, the CLI will display the current transaction agreement for that transaction type to the user.  * The user will be asked to agree before the write can be signed and submitted.  * The time and date when the user accepted is recorded as part of the transaction.  * The mechanism by which the user agreed is user configurable with a default mapping to Click Agreement.    *Notes*  * The acceptance mechanism might be an enum / id value instead of a string.  * It is the CLI user's responsibility to ensure that the indicated acceptance mechanism matches the string being used on the ledger that will receive the transaction.",Task,Medium,Complete,"2019-01-15 22:54:18","2019-01-15 22:54:18",3
"Hyperledger Indy SDK","Transaction Author Agreement API","*Story*  As a steward of an Indy network, I want transaction authors to agree that the information they submit to the ledger meets the requirements outlined by ledger governance for the current transaction to minimize the liability that stewards accept when storing the data on an immutable ledger.    *Acceptance Criteria*  * Before submitting a write to the public ledger, transaction authors must accept the author agreement.  * The author agreement is found on the destination ledger and is the most recent one for the current transaction type.  * A digital signature indicating the acceptance of the author agreement is included as part of the transaction signature.  * The transaction also records the time and date when the agreement was accepted.  * The transaction records an indication of how it was accepted pulled from a list of valid mechanisms that is stored on the ledger.  * API calls exist for pulling the list of valid mechanisms from the ledger.  * API calls exist for downstream applications to expose the agreement in an acceptable way to users receive their consent.  * An API call  exists for pulling the hash of the agreement so that downstream applications can detect when the agreement changes.",Task,Medium,Complete,"2019-01-15 22:45:00","2019-01-15 22:45:00",5
"Hyperledger Indy SDK","Error handling: Indy-Crypto must return message in addition to ErrorCode","We need to provide a way of getting error message and error stack in addition to ErrorCode.  I suggest implementing of the same approach as it is done for Libindy IS-511.    Steps:  1. Migrate to *failure* crate for better error handling.  2. Add indy_crypto_get_current_error(error_json_p) method that will return description and  bactrace for last error. ",Task,Medium,Complete,"2019-01-15 13:35:57","2019-01-15 13:35:57",3
"Hyperledger Indy SDK","A2A: change message structure in VCX and dummy-agent to new format","Add basic support of new A2A messages    https://github.com/hyperledger/indy-hipe/tree/master/text/0021-message-types  https://github.com/hyperledger/indy-hipe/tree/master/text/0022-cross-domain-messaging    https://github.com/hyperledger/indy-hipe/tree/master/text/0017-agent-message-structure    Goals  # Support field type according to [Message Types Hipe|https://github.com/hyperledger/indy-hipe/tree/master/text/0021-message-types]  # Eliminate bundles from the a2a message    POA  # Add `agency_protocol_version` field to VCX provisioning config with indicates a2a message format will be used.      * `1.0` means the current protocol      * `2.0` means new community protocol  # Save rest LibVCX API  functions without any changes.  # Update internal building and parsing of a2a messages based on `agency_protocol_version` field:      * `1.0` leave as is      * `2.0` use libindy pack/unpack functions  # Update `Dummy Agent` to support community protocol    Suggestions (next step):  Add flexible functions for preparation and sending generic a2a messages into Libindy API.",Task,Medium,Complete,"2019-01-15 13:12:51","2019-01-15 13:12:51",11
"Hyperledger Indy SDK","Review and merge pack/unpack for new A2A protocol",,Task,Medium,Complete,"2019-01-15 13:06:13","2019-01-15 13:06:13",5
"Hyperledger Indy SDK","Packages prevent installation of both indy-cli and libsovtoken","Apparently the currently deployed packages for indy-cli and libsovtoken have conflicting dependencies, as shown:    Here are the package versions at the head of the repo:  ",Task,Medium,Complete,"2019-01-11 19:20:17","2019-01-11 19:20:17",5
"Hyperledger Indy SDK","Investigate -> state unaffected in request_handlers","Need to investigate cause.      While writing unit test 'request_handler_process_reply_event_from_consensus_state_works_for_consensus_reached_with_mixed_msgs' (services/pool/request_handler.rs), we found that changing the f parameter to 0 from 1 had no change in outcome of the test.  This was unexpected.    See also:  request_handler_process_reply_event_from_consensus_state_works_for_consensus_reached_with_0_concensus.  This method should behave differently.  ",Task,Medium,Complete,"2019-01-10 18:43:39","2019-01-10 18:43:39",1
"Hyperledger Indy SDK","Support new predicates for anoncreds (GT, LE, LT) in libindy as new version of proof exchange","h1. Goal  Add support of new set of predicates and provide backward-compatibility. Initially IndyCrypto and IndySDK supported only GE (greater or equal) predicate type. The math allows to support others: GT, LE, LT.    h1. Affected components  https://github.com/hyperledger/indy-sdk  https://github.com/hyperledger/indy-crypto (now is being moved to https://github.com/hyperledger/ursa)   h1. Current state  IndyCrypto master has implementation of new predicates https://github.com/hyperledger/indy-crypto/pull/132    Unfortunately it’s contains breaking-change of data structures in API and this fact was not detected before merge to master. But this code isn’t released to RC / stable.    There is WIP PR for IndySDK https://github.com/hyperledger/indy-sdk/pull/1283 . For this PR the backward incompatibility has been detected and the PR is in hold now.  h2. Affected API (current breaking-change)  pub struct Proof {      proofs: Vec<SubProof>,      aggregated_proof: AggregatedProof,  }  pub struct SubProof {      primary_proof: PrimaryProof,      non_revoc_proof: Option<NonRevocProof>  }  pub struct PrimaryProof {      eq_proof: PrimaryEqualProof,      ge_proofs: Vec<PrimaryPredicateGEProof> now changed (backward incompatible) to      ne_proofs: Vec<PrimaryPredicateInequalityProof>  }    h1. Versioning approach  From long-term perspective it seems like there should be version starting from ProofRequest.  Proposed behavior:  Verifier specify version in proof request  If verifier would like to use new predicates, new version >0 (1 for the moment) must be specified   If verifier would like to be compatible with old version of software, the 0 version must be specified and new predicates must not be used  Proover’s LibIndy receive proof request, fetch version (no version == ver. 0) and use new builder’s method to pass this version to IndyCrypto (see next step)  If LibIndy detect unknown (newer) version - new error code (like unsupported proof exchange protocol version) should be returned.  IndyCrypto should provide the new method ProofRequestBuilder::set_version(int).  This call should be allowed only for fresh builder as first call after creation.  ProofRequestBuilder::add_predicate  should reject new predicates for 0 ver.  IndyCrypto must serialize:  0 version: ge_proofs   1+ versions: predicates_proofs  ProofBuilder should verify consistency of versions in sub-proofs and serialize aggregated version.  New IndyCrypto should be able to deserialize both version of serialized Proof.  Old IndyCrypto will be able to deserialize 0 version and return InvalidStructure error for new format due to field renaming.  h2. LibIndy API changes  struct Proof {      proof: IndyCrypto::Proof { …, ver: str, … },      requested_proof: RequestedProof, // mapping of math to proof request      identifiers: Vec<Identifier>, // metadata about cred_defs, schemas, revocation registries      ver: str  }    Struct ProofRequest in LibIndy already has field “version”.    h2. Indy Crypto API changes    IndyCrypto::Proof becomes an enum:    enum Proof {   ProofV0(ProofV0),   ProofV1(ProofV1)  }    ProofV0 is an old structure that were used before the introduction of new predicates and ProofV1 is a new one.  ","New Feature",Medium,Complete,"2019-01-09 11:28:07","2019-01-09 11:28:07",8
"Hyperledger Indy SDK","Need to make libvcx tests portable to native Windows environment","Currently libvcx tests use hard-coded unix/style paths for temporary files (e.g. [https://github.com/hyperledger/indy-sdk/blob/598bd15349f0dd110d75ddce355031c0454ec53c/vcx/libvcx/src/settings.rs#L325|https://github.com/hyperledger/indy-sdk/blob/598bd15349f0dd110d75ddce355031c0454ec53c/vcx/libvcx/src/settings.rs#L325,]). It breaks CI pipelines on native (no Cygwin) environment.",Task,High,Complete,"2018-12-28 08:58:30","2018-12-28 08:58:30",2
"Hyperledger Indy SDK","Create HIPE to document credential exchange message families","The Indy HIPE process resulted in community standards for communicating between agents. But there are no current standards for credential exchange.    *Acceptance Criteria*  * Create an Indy HIPE for the credential exchange process currently used by LibVCX in the SDK, taking into account the work in IS-1118 to align it with previously accepted HIPEs.  * Get feedback on the HIPE from Evernym architects who have previously worked on LibVCX (cc [~<USER>  * Present the HIPE in the Indy Maintainers call.  * Create issues for bringing LibVCX inline with any changes to the HIPE requested by the community before it is presented in the Indy Maintainers call.    Excluded:  * The HIPE does not have to be accepted to complete this issue.  * The work to make LibVCX comply with any changes requested during the HIPE acceptance process does not have to be done to complete this issue.",Task,Medium,Complete,"2018-12-21 19:06:36","2018-12-21 19:06:36",8
"Hyperledger Indy SDK","Test mode for write transactions",,Task,Medium,Complete,"2018-12-21 09:55:28","2018-12-21 09:55:28",3
"Hyperledger Indy SDK","Network Monitor role in IndySDK for NYM","Indy SDK should support new role for NYM transaction. More details in IndyNode ticket INDY-1916",Task,Medium,Complete,"2018-12-21 09:39:54","2018-12-21 09:39:54",2
"Hyperledger Indy SDK","Error handling: CLI should return error message and error stack from libindy","For the moment CLI return message based on error code only. As soon we get error messages from libindy we can provide additional error information that can be useful for stewards and Indy developers.    *Acceptance criteria*  1. CLI returns libindy main error description and error stack in addition to error code based message  2. Changes are backward compatible    *POA*    See IS-511","New Feature",Medium,Complete,"2018-12-20 13:16:45","2018-12-20 13:16:45",3
"Hyperledger Indy SDK","Error handling: VCX must return Message in addition to Error Code","For the moment it is possible to see developer readable error information only in logs that complicates development. We need the way to return this information and ideally full error stack to developers.    *Acceptance criteria*  1. VCX return main error description and error stack as part of IndyError exception  2. Changes are backward compatible    *POA*    See IS-511","New Feature",Medium,Complete,"2018-12-20 13:14:08","2018-12-20 13:14:08",5
"Hyperledger Indy SDK","Error handling: Libindy wrappers must return Message in addition to Error Code","For the moment it is possible to see developer readable error information only in logs that complicates development. We need the way to return this information and ideally full error stack to developers.    *Acceptance criteria*  1. Libindy wrappers return main error description and error stack as part of IndyError exception  2. Changes are backward compatible    *POA*    See IS-511","New Feature",Medium,Complete,"2018-12-20 13:10:32","2018-12-20 13:10:32",3
"Hyperledger Indy SDK","POA: DIDDoc support","*Acceptance Criteria*  * Review the HIPEs that document the new message formats.  * Review PRs for future HIPEs that we will need to support  * Review DIDDoc specification  * Align with Indy Node team  * Recommend architectural changes to the Indy SDK  * Create implementation issues for SDK",Task,Medium,"Code Review","2018-12-20 09:59:49","2018-12-20 09:59:49",8
"Hyperledger Indy SDK","Plan for migration to standard message formats","All components of the official Indy repositories should support the communication standards accepted as HIPEs.    **Acceptance Criteria**  * Review the HIPEs that document the new message formats.  * Review PRs for future HIPEs that we will need to support  * Review how these HIPEs are implemented in the indy-agent repository  * Recommend architectural changes to the Indy SDK  * Create issues to migrate the SDK from our current approach to a compatible one",Task,Medium,Complete,"2018-12-17 15:48:17","2018-12-17 15:48:17",8
"Hyperledger Indy SDK","Limit number of attributes in a schema definition","It will assist solution developers if Indy SDK validates transactions before sending them to the ledger.    *Acceptance Criteria*  * Implement a process for validating transactions.  * The SDK should limit the number of attributes at 125, and provide a clear error when that is exceeded  * Clearly document the limit",Task,Medium,Complete,"2018-12-17 15:23:37","2018-12-17 15:23:37",3
"Hyperledger Indy SDK","Create wallet wrapper functions","Create the following golang wallet wrapper functions   # CreateWallet   # OpenWallet   # CloseWallet   # DeleteWallet   # ExportWallet   # ImportWallet",Task,Medium,Complete,"2018-12-13 09:08:47","2018-12-13 09:08:47",5
"Hyperledger Indy SDK","Knowledge Transfer: EV 18.25 Stub",,Task,Medium,Complete,"2018-12-07 09:57:38","2018-12-07 09:57:38",5
"Hyperledger Indy SDK","ItemNotFound error is not very informative","I have repeatedly run into ItemNotFound errors when using indy-sdk. Most recently when accidently using a key which is not actually in the wallet.     ItemNotFound is not very informative and investigating such bugs always starts with figuring out what type of item is actually being looked up.    My proposal is to add the type in the WalletError::ItemNotFound and add it on by mapping the error in the WalletService.    Perhaps it's also useful in case of ItemAlreadyExists.    I'd be happy to implement and contribute this, but I would like some feedback on whether this would be useful, or if there are any aspects that I'm missing.    More possibly unclear errors:  - CommonInvalidStructure: https://chat.hyperledger.org/channel/indy-sdk?msg=xop9z2ryG6smoazqi",Task,Medium,Complete,"2018-12-06 12:37:51","2018-12-06 12:37:51",1
"Hyperledger Indy SDK","VCX logging API in mobile artifacts","The new logging API should be exposed in the AAR and cocoapod  so that it can easily be consumed in mobile applications.",Task,Medium,Complete,"2018-12-05 15:05:05","2018-12-05 15:05:05",5
"Hyperledger Indy SDK","Add dates to the release notes","The release notes for Indy SDK should mention the date of each release so that people have that information in the code repository and don't have to go back to JIRA or GitHub to find it.",Task,Medium,Complete,"2018-12-05 14:36:38","2018-12-05 14:36:38",1
"Hyperledger Indy SDK","VCX:  Credential Values format is outdated","Libvcx passes `credential_values` JSON to Libindy `issuer_create_credential` API function in outdated format:     https://github.com/hyperledger/indy-sdk/blob/master/vcx/libvcx/src/issuer_credential.rs#L183  It's just a luck that serde_json successfully deserialize them to the actual structure is used.    ",Task,Medium,Complete,"2018-12-04 14:16:12","2018-12-04 14:16:12",3
"Hyperledger Indy SDK","refactor authenticated encrypt/decrypt to service layer","Moving crypto functionality from command layer to crypto layer, so it can be used in pack and unpack functionality as well.",Task,Medium,Complete,"2018-11-24 14:07:09","2018-11-24 14:07:09",1
"Hyperledger Indy SDK","AMCL cross-platform (x32 and x64bit) serialization","As a result of investigation we found out that hex serialization and deserialization was working incorrect.    If we serialize some data on 64-bit platform and then try to deserialize and serialize it on 32-bit the source and the result won't be equal.  The reason is that we serializing not the byte-representation of big number primitives but inner representation of AMCL (which is platform dependent).  We made a decision to change the (de)serialization to byte-representation instead of inner representation.    What should be done:  1) Change the serialization (`from_hex` and `to_hex`) of BIG in AMCL  2) Fix tests in indy-crypto (update constants to fit into new format)  3) IndySDK tests should be updated if needed","New Feature",Medium,Complete,"2018-11-23 12:43:46","2018-11-23 12:43:46",5
"Hyperledger Indy SDK","Knowledge Transfer: EV 18.24 Stub",,Task,Medium,Complete,"2018-11-23 08:58:55","2018-11-23 08:58:55",5
"Hyperledger Indy SDK","Release Indy SDK 1.6.8",,Task,Medium,Complete,"2018-11-22 15:21:31","2018-11-22 15:21:31",3
"Hyperledger Indy SDK","Rust Wrapper: Use Rust wrapper in dummy agent","Dummy cloud agent now use it's own rust wrapper implementation.   I suggest:  Switch to Rust wrapper",Task,Medium,Complete,"2018-11-19 14:50:55","2018-11-19 14:50:55",2
"Hyperledger Indy SDK","Investigate the reason of slow proof generation VCX","Proof generation should take less than 2 seconds from the SDK.    Proof generation in applications built by the Evernym engineering team is taking much longer. We are seeing the problem in both Android and IOS environments using Evernym's Connect.Me.    We should test that the delays are not in the time necessary for the SDK to respond.    Acceptance Criteria  * Test proof generation in the following environment:  ** A proof with 10 attributes  ** Using 3 different credential definitions from 3 different trust anchors  ** In Android environment (using the Android Wrapper)  ** At the LibVCX layer  * Report the distribution of response times.    *Notes*  * We start with the Android layer because we have more reports of slowness from that layer. Investigating IOS would also be useful.  * If the problem is identified in IS-1066, then this issue can be closed unless the team thinks further investigation would be instructive.    Reference issues (internal to Evernym):  * CM-2070 - Connect.Me shouldn't be dependent on ledger connectivity for presenting proofs  * CM-2072 - Sending a proof should take less than 2 seconds",Task,Highest,Complete,"2018-11-19 13:46:10","2018-11-19 13:46:10",5
"Hyperledger Indy SDK","ObjC libindy wrapper binaries for 1.6.8 stable","This binaries are missed on repo.sovrin.org  Should be built from appropriate tag and published",Task,Medium,Complete,"2018-11-19 13:32:00","2018-11-19 13:32:00",1
"Hyperledger Indy SDK","Request reads from multiple nodes","*Story*  As a developer building an application using the Indy SDK, I want all read requests to go to multiple nodes so that I can complete my operations with the response from the fastest one.    *Acceptance Criteria*  * Read requests should query X nodes, and return the result from the one that first responds.  * The value for X should be configurable.  * The default of X should be 2.","New Feature",Medium,Complete,"2018-11-16 19:44:41","2018-11-16 19:44:41",2
"Hyperledger Indy SDK","Review: Revocation support in VCX PoA and PRs",,Task,Medium,Complete,"2018-11-14 13:41:13","2018-11-14 13:41:13",2
"Hyperledger Indy SDK","Standardize code format using Rustfmt","run the libindy codebase and rust code through Rustfmt crate to format the code in a standard way. This is similar to pep-8 in python.    [~<USER> [~<USER> [~<USER>    What are your thoughts on this? I think it would be an easy ticket for a new person to take on.",Task,Low,Complete,"2018-11-13 18:02:14","2018-11-13 18:02:14",1
"Hyperledger Indy SDK","Pack and Unpack Functionality","This aligns with HIPE #43 AMES.",Task,Medium,Complete,"2018-11-12 21:50:26","2018-11-12 21:50:26",13
"Hyperledger Indy SDK","[Rust Wrapper] Provide logging bridge to Rust logger facade","Provide init_logger(logger: &Logger) function that will initialize liibindy logger by passing all libindy logs to application logger implementation.",Task,Medium,Complete,"2018-11-12 14:33:39","2018-11-12 14:33:39",3
"Hyperledger Indy SDK","Clean up Vcx logs","We need to clean up Libvcx logging because `info` level is used almost everywhere.   We disabled logs for VCX in CI/CD pipelines because it takes too much disk space.",Task,Medium,Complete,"2018-11-12 10:54:59","2018-11-12 10:54:59",3
"Hyperledger Indy SDK","CI for integrated dummy agent and VCX",,Task,Medium,Complete,"2018-11-09 13:41:04","2018-11-09 13:41:04",2
"Hyperledger Indy SDK","Knowledge transfer stub",,Task,Medium,Complete,"2018-11-09 13:34:47","2018-11-09 13:34:47",5
"Hyperledger Indy SDK","3rd party open source manifest","*Acceptance criteria:*  A spreadsheet with all direct dependencies for the artifacts delivered in the Indy SDK, which contains the following information about each dependency:  * Name  * License  * Version  * Reason for usage    Destination spreadsheet:  https://drive.google.com/drive/folders/1crXe2FSzaojc_QWfsl0jYfYCliVly4jj",Task,Medium,Complete,"2018-11-09 13:14:40","2018-11-09 13:14:40",2
"Hyperledger Indy SDK","Community PR: NodeJS samples","Review NodeJS samples PR",Task,Medium,Complete,"2018-11-09 10:16:54","2018-11-09 10:16:54",1
"Hyperledger Indy SDK","Investigate LibIndy to identify reasons for slow proof generation","Proof generation should take less than 2 seconds from the SDK.    Proof generation in applications built by the Evernym engineering team is taking much longer. We are seeing the problem in both Android and IOS environments using Evernym's Connect.Me.    We should test that the delays are not in the time necessary for the SDK to respond.    *Acceptance Criteria*  Test proof generation in the following environment:  * A proof with 10 attributes  * Using 3 different credential definitions from 3 different trust anchors  * In Android environment (using the Android Wrapper)  * At the LibIndy layer  Report the distribution of response times.    *Notes*  * We start with the Android layer because we have more reports of slowness from that layer. Investigating IOS would also be useful.    Reference issues (internal to Evernym):  CM-2070 - Connect.Me shouldn't be dependent on ledger connectivity for presenting proofs  CM-2072 - Sending a proof should take less than 2 seconds",Task,Highest,Complete,"2018-11-09 09:17:51","2018-11-09 09:17:51",5
"Hyperledger Indy SDK","Community PR: Postgres storage - review HIPE and PRs","HIPE  https://github.com/hyperledger/indy-hipe/pull/49    Implementation  https://github.com/hyperledger/indy-sdk/pull/1175  https://github.com/hyperledger/indy-sdk/pull/1247  https://github.com/hyperledger/indy-sdk/pull/1273",Task,Medium,Complete,"2018-11-08 09:05:37","2018-11-08 09:05:37",3
"Hyperledger Indy SDK","[VCX] Provide Readme for VCX wrappers ","Readme of VCX wrappers is poor.  For example, `Install` section is absent. We need to provide basic information similar to libindy wrappers.","New Feature",Medium,Complete,"2018-11-07 09:54:47","2018-11-07 09:54:47",3
"Hyperledger Indy SDK","Implement standard test harness for plugged wallet storage","Implement a standard test suite for plugged storage to verify the plugged storage works, meets API standards and works within standard wallet scenarios.    One example is implemented in PR 1247 and described in [https://github.com/hyperledger/indy-hipe/pull/49] - this inserts a shim into existing unit tests so that tests written for the default storage can be leveraged against new storage plug-ins.  The advantages are that these test already exist, and new unit tests for the default storage can automatically be applied to storage plug-ins as well.    Another suggestion is:   # Wallet storage test harness should be dedicated native library with one method {{test_wallet_storage(storage_type, options)}}   # {{test_wallet_storage}} executes the short list of well documented test cases and generates report   # Wallet storage test links libindy, test harness lib and wallet storage in the way he needs. Calls {{init}} function of storage and {{test_wallet_storage}} after it.    ... however this suggestion implies new development required, and must then be maintained in parallel with any new development.    A third suggestion is to use the CLI - build test scripts that run against the CLI to create and open storage, create DID's, etc, and ensure that these scripts can function using the default storage or any plug-in storage.  However the functionality available through the CLI is limited (for example anoncreds functions are not available) so CLI functionality would have to be extended to ensure that a comprehensive test suite could be built.","New Feature",Medium,"To Develop","2018-10-28 20:32:42","2018-10-28 20:32:42",5
"Hyperledger Indy SDK","VCX: Dummy Cloud Agent integration with VCX","We need to integrate VCX with Dummy Cloud Agent and fix possible integration issues.    *Acceptance criteria*  * Provision scripts updated and work with Dummy Cloud Agent  * Integration tests work with Dummy Cloud Agent  * Available demo and samples work with Dummy Cloud Agent  * If possible try to get a demo with ConnectMe and Dummy Cloud Agent. Most probably it will be impossible as we don't support push notifications.","New Feature",Medium,Complete,"2018-10-16 15:38:55","2018-10-16 15:38:55",8
"Hyperledger Indy SDK","Rust Wrapper: create how-tos for rust-libindy-wrapper","See indy-sdk how-tos.  https://github.com/hyperledger/indy-sdk/tree/master/doc/how-tos    We should write how-tos for the rust wrapper as documentation to the community on how to use it.    h2. Status  *Completed*  # write-did-and-query-verkey  # rotate-key  # save-schema-and-cred-def    *In progress*  # issue-credential  # negotiate-proof  # proof-negotiation     *TO-DO*  # send-secure-msg  # use updated rust wrapper crate  # add default logger    _Note_:  Documentation (aka readme) are started but needs work.    _Also completed_:    # README.md for the other language how-tos needed updating:  corrected.  # Java samples had bugs or were wrong:  corrected.",Task,Medium,Complete,"2018-10-11 18:12:59","2018-10-11 18:12:59",5
"Hyperledger Indy SDK","CLI: did rotate-key command should support resume mode","did rotate-key is complex operation that includes multiple steps:    1. Creation of transition key  2. Posting transition key to ledger  3. Applying transition key to DID    If step 2 finishes with timeout we are in a vague state as txn can be ordered or rejected by pool and don't know should we apply step 3 or not. To solve this we recommends the following:    1. Interrupt command after step 2  2. Show to the user proposal to execute the same command with resume flag  3. If resume flag is set read transition key from the wallet  4. Send GET_NYM to the ledger. Check NYM verkey with transition key.  5. If keys are the same just apply new key to DID  6. If keys are different try to post NYM with new key to ledger and in case of success apply new key to DID    Note that keys can be different because of freshness, but it is acceptable as in this case transaction will be just rejected by ledger and user can retry once more.    *Acceptance criteria*  * indy_get_did_with_meta updated to allow access to transition verkey  * New resume flag added to did rotate-key command  * Tests written and passed    ","New Feature",Medium,Complete,"2018-10-11 12:46:45","2018-10-11 12:46:45",3
"Hyperledger Indy SDK","SDK support for Xcode 10","*Acceptance Criteria*  * Review the PR in IS-1096 and IS-1058  * Integrate the testing procedure into the official CI / CD    *Notes*  * If problems are found with the PR, push back to the submitter for the fix and remove from the sprint.","New Feature",Low,Complete,"2018-10-11 10:39:19","2018-10-11 10:39:19",3
"Hyperledger Indy SDK","Indy-crypto python wrapper should have fixed dependency to indy-crypto","Indy-crypto python wrapper should have fixed dependency to indy-crypto.",Task,Highest,Complete,"2018-10-10 09:31:46","2018-10-10 09:31:46",2
"Hyperledger Indy SDK","Community PR: Android build script fails when host system contains libzmq.a","There are two issues with android build script ({{android.build.sh}})   1) build fails when host system contains {{/lib/libzmq.a}} with clang message {{incompatible target}}:    {{That happens due to error in {{libindy/build.rs}}, which joins OPENSSL_DIR environment variable with absolute {{/lib}} path, resulting in {{/lib, instead of expected${OPENSSL_DIR}/lib}}}}    2) when no openssl, sodium, or zmq libs are downloaded (run without -d flag), default behavior is to check for arch specific libs in the current folder (like openssl_${ABSOLUTE_ARCH}) and use relative path, however later build fails to find these (I guess, due to run with another work dir).",Task,Medium,Complete,"2018-10-09 15:02:27","2018-10-09 15:02:27",1
"Hyperledger Indy SDK","Rust Wrapper: Use Rust wrapper in Indy CLI","Indy CLI and CLI tests now use it's own rust wrapper implementation. We need switch to common rust wrapper.",Task,Medium,Complete,"2018-10-08 16:40:01","2018-10-08 16:40:01",3
"Hyperledger Indy SDK","Rust Wrapper: Use Rust wrapper in libnullpay","Libnullpay and libnullpay tests now use it's own rust wrapper implementation. We need switch to common rust wrapper.",Task,Medium,Complete,"2018-10-08 16:38:15","2018-10-08 16:38:15",3
"Hyperledger Indy SDK","Rust Wrapper: Use Rust wrapper in libindy tests","Libindy tests now use it's own rust wrapper implementation. I suggest:    - Switch to Rust wrapper  - Use the same test procedure for libindy and for Rust wrapper  ",Task,Medium,Complete,"2018-10-08 13:53:06","2018-10-08 13:53:06",5
"Hyperledger Indy SDK","Rust Wrapper: Futures based interface","Rust wrapper now provides 3 interfaces:    - Sync (default)  - Sync + timeout  - FnMut based async    We need to replace them with one Future based interface to avoid moving of community developers in a wrong way.  ","New Feature",Medium,Complete,"2018-10-08 13:48:03","2018-10-08 13:48:03",8
"Hyperledger Indy SDK","Transfer Wallet tests from PR 924","PR 924 (https://github.com/hyperledger/indy-sdk/pull/924) contains several valuable unit tests related to Wallet Storage.  Because wallet code base in PR is significantly outdated, it takes some time to move tests on the new code base.",Task,Medium,Complete,"2018-10-08 08:54:13","2018-10-08 08:54:13",2
"Hyperledger Indy SDK","Community PR: fix store_tails_from_generator hash computation","[tails.rs|http://tails.rs/] has a sha256 hasher but finalize is never called and removing the hasher has no effect on `{{RUST_TEST_THREADS=1 cargo test lib}}`.     A hasher is created here:  [https://github.com/hyperledger/indy-sdk/blob/master/libindy/src/commands/anoncreds/tails.rs#L82]  and for this hasher finalize is never called.    The code calls service.finalize but that calls finalize of a different hasher.     This bug is not caught by any test.   ",Task,Medium,Complete,"2018-10-04 06:39:46","2018-10-04 06:39:46",1
"Hyperledger Indy SDK","Release Indy SDK 1.7.0","*Task Overview*   Perform all necessary tasks to have a release of LibIndy.    *Acceptance Criteria*   * Code is tested   * Release is tagged   * Release notes are drafted  * Issues in JIRA are assigned to the correct fix version   * Release notes are reviewed by Docs and Product Management   * A new release of Indy-Crypto is part of this release    *Notes*",Task,Medium,Complete,"2018-10-03 20:31:07","2018-10-03 20:31:07",13
"Hyperledger Indy SDK","Prepare the 1.6.7 release of IndySDK","*Task Overview*   Perform all necessary tasks to have a release of LibIndy.    This is a minimal release to deliver the fix for IS-1023, but may contain other low-risk changes that are already complete, ready for delivery, and easy to test.    Current list of included changes:  * https://github.com/hyperledger/indy-sdk/blob/8c36447e2165e6be4b6d20dbe9621ecf147e07b9/CHANGELOG.md  * The Rust Wrapper should be marked as experimental in the release notes.    *Acceptance Criteria*   * Code is tested  * Issues in JIRA are assigned to the correct fix version   * Release is tagged   * Release notes are drafted   * Release notes are reviewed by Docs and Product Management   * A new release of Indy-Crypto is part of this release    *Notes*",Task,Medium,Complete,"2018-10-03 20:29:29","2018-10-03 20:29:29",5
"Hyperledger Indy SDK","Indy CLI needs to support hexadecimal seeds","*Story*    As a trustee of an Indy network, I need to be able to use my hexadecimal seed created with the legacy python CLI on the new CLI to import my existing keys into a new wallet. My hexadecimal seed contains unprintable characters, and so cannot be represented as ASCII.    *Acceptance Criteria*   * Use the legacy CLI to create a seed containing non-printable characters encoded as 64 bytes of hexadecimal.   * The new CLI should accept the seed through the command line (not a configuration file)    *Notes*  * Why don't they just upgrade their wallet? Some trustees did not create a wallet. They created and stored their seed without creating a wallet. So they need to provide a seed to perform actions such as changing IP addresses or adding new trustees or stewards.","New Feature",Highest,Complete,"2018-10-03 20:24:02","2018-10-03 20:24:02",2
"Hyperledger Indy SDK","Reduce common build times","As we bring new artifacts into Indy SDK, the build times are increasing. We should limit the platforms we continously build to keep developer cycles productive.    *Acceptance Criteria*   * Create a plan for what platforms and tests can be removed from the regular builds.   * Determine a schedule for when all platforms and tests will be executed.   * Get approval from architects and QA.   * Implement the changes.",Task,Medium,Complete,"2018-10-02 20:06:26","2018-10-02 20:06:26",8
"Hyperledger Indy SDK","Community PR: Remove all third numbers from versions","I suggest to remove all z from version x.y.z in dependencies.  I think we can trust crate developers to not break the api contract when changing the version.    So e.g. `openssl = { version = =0.10.12, optional = true }` should be replaced by `openssl = { version = =0.10, optional = true }`      So we can benefit from bug fixes and other improvements.",Task,Medium,Complete,"2018-10-01 17:36:14","2018-10-01 17:36:14",1
"Hyperledger Indy SDK","Rust Wrapper: Implement CI/CD pipeline branches for libindy rust wrapper","*Acceptance criteria*  * wrapper tested  * artifacts automatically published to crates.io","New Feature",Medium,Complete,"2018-09-26 12:49:14","2018-09-26 12:49:14",5
"Hyperledger Indy SDK","Rust Wrapper: Review and merge libindy rust wrapper PR","*Acceptance criteria*  * PR reviewed   * PR merged  ","New Feature",Medium,Complete,"2018-09-26 12:47:21","2018-09-26 12:47:21",5
"Hyperledger Indy SDK","Assist EV QA","The Evernym Indy SDK team will be assisting other Evernym teams with QA tasks.    *Acceptance Criteria*  * Each engineer will spend one day running QA scripts provided by the Evernym QA team.  * Instructions on what to test, and how to report the results will be provided by [~<USER>.  * Part of the day should be spent doing structured QA, and part should be spent doing related exploratory testing.   * Also provide feedback on how to improve the testing instructions and activities.",Task,Medium,Complete,"2018-09-24 23:35:22","2018-09-24 23:35:22",0
"Hyperledger Indy SDK","VCX:  Dummy Cloud Agent Pairwise API","Implement Pairwise API for VCX Dummy Cloud Agent    *Acceptance criteria:*  * API implemented and tested  * API can be used with VCX  ","New Feature",Medium,Complete,"2018-09-24 14:45:41","2018-09-24 14:45:41",8
"Hyperledger Indy SDK","VCX:  Dummy Cloud Agent Configuration API","Implement Configuration API for VCX Dummy Cloud Agent    *Acceptance criteria:*  * API implemented and tested  * API can be used with VCX  ","New Feature",Medium,Complete,"2018-09-24 14:44:04","2018-09-24 14:44:04",5
"Hyperledger Indy SDK","VCX:  Dummy Cloud Agent Onboarding API","Implement Onboarding API for VCX Dummy Cloud Agent    *Acceptance criteria:*  * API implemented and tested  * API can be used with VCX  ","New Feature",Medium,Complete,"2018-09-24 14:41:34","2018-09-24 14:41:34",8
"Hyperledger Indy SDK","Community PR: Bumb sha2 and sha3 versions to 0.7","bumb sha2 and sha3 versions to 0.7    -digest = 0.6.2  +digest = 0.7  -generic-array = 0.8.3  +generic-array = 0.9  -sha2 = 0.6.0  -sha3 = 0.6.0  +sha2 = 0.7  +sha3 = 0.7     ",Task,Medium,Complete,"2018-09-23 20:08:07","2018-09-23 20:08:07",1
"Hyperledger Indy SDK","CLI: 'did rotate-key' CLI command should support fees","       did rotate-key should have optional parameters fees_inputs and fees_outputs.","New Feature",Highest,Complete,"2018-09-20 17:41:24","2018-09-20 17:41:24",3
"Hyperledger Indy SDK","CLI: CLI should allow to work with wallets created outside of CLI","Indy CLI allows to open and list only wallets created through CLI wallet create command, but it is impossible to access wallet created by 3d party application.     As there is no way to lookup external wallets with libindy we need to help CLI in wallets lookup. I suggest to introduce wallet attach/detach concept and corresponded CLI commands. User can call wallet attach and provide wallet configuration that CLI will store the same way as wallet configuration created with wallet create command.    *Acceptance criteria*  * wallet attach command implemented and tested  * wallet detach command implemented and tested  * CLI doc updated","New Feature",Medium,Complete,"2018-09-19 15:09:48","2018-09-19 15:09:48",3
"Hyperledger Indy SDK","Improve macOS Documentation","Improves instructions on how to install indy-sdk, run tests, run Docker, and complete the getting started guide in Python on macOS.",Task,Medium,Complete,"2018-09-18 18:34:53","2018-09-18 18:34:53",1
"Hyperledger Indy SDK","Community PR: Implemented missing (TODO) code:","* prover_get_entities_from_ledger: Added code to create revocation states* verifier_get_entities_from_ledger: Added code to get revocation definitions and revocation registriesSigned-off-by: <USER><<EMAIL>>",Task,Medium,Complete,"2018-09-18 18:34:52","2018-09-18 18:34:52",1
"Hyperledger Indy SDK","Community PR: Ledger check json","Review and merge PR: https://github.com/hyperledger/indy-sdk/pull/1121",Task,Medium,Complete,"2018-09-18 18:34:46","2018-09-18 18:34:46",1
"Hyperledger Indy SDK","Community PR: validate_did is static","Signed-off-by: <USER><<EMAIL>>By turning validate_did into a static method the crypto_services variable is not needed any more and are deleted by this PR where possible.",Task,Medium,Complete,"2018-09-18 18:34:46","2018-09-18 18:34:46",1
"Hyperledger Indy SDK","Community PR: move Endpoint to API because type safety","Signed-off-by: <USER><<EMAIL>>- enhance type safety- easier to read api for api usersIn the future add endpoint validity checks to Endpoint::new so the code fails early if an invalide endpoint is passed into the Indy api",Task,Medium,Complete,"2018-09-18 18:34:46","2018-09-18 18:34:46",1
"Hyperledger Indy SDK","Community PR: VCX support protocol version config","LibVCX can work with protocol-version 2 but the agency that an agent connects to connects to the Sovrin test network which is currently protocol version 1.In order to connect to the STN with VCX then the protocol version needs to be 1, at the moment it is  hardcoded to 2.",Task,Medium,Complete,"2018-09-18 18:34:44","2018-09-18 18:34:44",2
"Hyperledger Indy SDK","bump rust openssl version to 0.10.x","Currently rust openssl is fixed to version 0.9.24 but the latest version is 0.10.11https://github.com/AxelNennker/indy-sdk/blob/master/libindy/Cargo.toml#L57Also consider using feature vendored at least for cross-compilation.Current openssl version 1.1.1 which has improvements to make compiling for Android simpler and rust openssl uses openssl version 1.1.1.https://github.com/openssl/openssl/blob/master/NOTES.ANDROIDSo bumping rust openssl probably helps compiling for Android.",Task,Medium,Complete,"2018-09-18 18:34:44","2018-09-18 18:34:44",1
"Hyperledger Indy SDK","Freshness: IndySDK should be able to filter outdated ledger responses","libindy should provide a way for application to require some freshness for particular read request to ledger.    If the required freshness is specified by application, libindy should filter out any outdated responses.    If outdated response is confirmed by strong consensus dedicated error should be returned to application.","New Feature",Medium,Complete,"2018-09-14 14:43:02","2018-09-14 14:43:02",8
"Hyperledger Indy SDK","Freshness: IndySDK should provide helpers to fetch freshness and timestamp information from ledger responses and transactions","Responses from Indy Node can contains timestamp of state and/or transaction time in different places.    Some parser is required to provide this information by deterministic API.     *Acceptance criteria*  * New API call indy_get_reponse_metadata created  * It returns seqNo, txn ordering time (if available), the latest txn ordering time from Merkle Proof, the latest txn seqnNo from Merkle Proof (if available)  * API tested and propagated to tier1 wrappers","New Feature",Medium,Complete,"2018-09-14 14:42:06","2018-09-14 14:42:06",5
"Hyperledger Indy SDK","VCX: Provide Java (slf4j) logger bridging","VCX java wrapper should automatically pipe vcx and libindy logs to slf4j .","New Feature",Medium,Complete,"2018-09-14 11:49:26","2018-09-14 11:49:26",2
"Hyperledger Indy SDK","VCX: Provide python logger bridging","VCX python wrapper should automatically pipe vcx and libindy logs to python logger.","New Feature",Medium,Complete,"2018-09-14 11:49:06","2018-09-14 11:49:06",2
"Hyperledger Indy SDK","VCX: Provide logging API similar to libindy and bridge to libindy logging facade","*Description*    Libindy should provide logger_set call similar to libindy. On initialization vcx should pipe vcx and libindy logs to provided handlers.","New Feature",Medium,Complete,"2018-09-14 11:48:43","2018-09-14 11:48:43",5
"Hyperledger Indy SDK","VCX: Support of credentials revocation","*Description*    VCX should support credentials revocation workflow.","New Feature",Medium,Complete,"2018-09-14 11:46:28","2018-09-14 11:46:28",8
"Hyperledger Indy SDK","VCX: Review VCX error codes","*Description*    During review we found error code that doesn't describe error cause. Like CreateError. I suggest to spend some time to review error codes.",Task,Medium,Complete,"2018-09-14 11:44:16","2018-09-14 11:44:16",3
"Hyperledger Indy SDK","VCX: Allow to work with wallet storage plugins",,Task,Medium,Complete,"2018-09-14 11:43:08","2018-09-14 11:43:08",3
"Hyperledger Indy SDK","VCX: Plan for better integration tests coverage","*Story*  As a developer using released artifacts of LibVCX, I want confidence that the released VCX artifacts work appropriately on all the platforms that are supported so that I can use them with confidence.    *Acceptance Criteria*  * Analyze existing integration test coverage across all supported platforms: Rust, Enterprise Java, Node, IOS, and Android.  * Determine what additional test coverage is needed.  * Review the plan with an architect.  * Create the necessary tickets.",Task,Medium,Complete,"2018-09-14 11:42:28","2018-09-14 11:42:28",3
"Hyperledger Indy SDK","CI/CD: Provide LibVCX NodeJS wrapper CI/CD pipeline branches","*Description*  LibVCX  NodeJS Wrapper builds should occur and be tested as part of the Indy SDK delivery pipeline.    *Acceptance Criteria*  * Tests executed  * Artifacts published to Sovrin maven repo","New Feature",Medium,Complete,"2018-09-14 11:22:32","2018-09-14 11:22:32",3
"Hyperledger Indy SDK","CI/CD: Provide LibVCX ObjC (iOS) wrapper CI/CD pipeline branches","*Description*  LibVCX  ObjC (iOS) Wrapper builds should occur and be tested as part of the Indy SDK delivery pipeline.    *Acceptance Criteria*  * Tests executed  * Artifacts published to Sovrin maven repo","New Feature",Medium,Complete,"2018-09-14 11:20:03","2018-09-14 11:20:03",5
"Hyperledger Indy SDK","CI/CD: Provide LibVCX Java wrapper CI/CD pipeline branches","*Description*  LibVCX  Java Wrapper builds should occur and be tested as part of the Indy SDK delivery pipeline.    *Acceptance Criteria*  * Tests executed  * Artifacts published to Sovrin maven repo","New Feature",Medium,Complete,"2018-09-14 09:02:28","2018-09-14 09:02:28",3
"Hyperledger Indy SDK","CI/CD: Provide LibVCX Python wrapper CI/CD pipeline branches","*Description*  LibVCX  Python Wrapper builds should occur and be tested as part of the Indy SDK delivery pipeline.    *Acceptance Criteria*  * Tests executed  * Artifacts published to pypi","New Feature",Medium,Complete,"2018-09-14 09:01:59","2018-09-14 09:01:59",3
"Hyperledger Indy SDK","VCX: VCX should have Windows build","VCX can’t be compiled for windows now. There is no documentation,  LINK : fatal error LNK1189: library limit of 65535 objects exceeded bug and no linking config in build.rs    *Solution*  * Research workaround for  LINK : fatal error LNK1189: library limit of 65535 objects exceeded bug  * Fix build.rs  * Provide documentation  ","New Feature",Medium,Complete,"2018-09-12 13:28:39","2018-09-12 13:28:39",3
"Hyperledger Indy SDK","VCX: Provide Getting Started Tutorial for libvcx","There is no publicly available documentation that will allow application developers to understand vcx and value that this library provides. I initially tried to understand it by just reading code and docs, but it was slow without understanding of the whole workflow.    *Acceptance Criteria*    * Getting Started Tutorial is provided  * It covers the main workflow details  * It is based on Fiber-Alice sample from IS-923","New Feature",Medium,Complete,"2018-09-12 12:55:50","2018-09-12 12:55:50",8
"Hyperledger Indy SDK","VCX: Avoid VCX compile time linking with payments plugins","Vcx now performs compile time linking with libindy payment plugin. It supports sovtoken and nullpay as compilation options. We can’t use sovtoken in community repo and libnullpay is only for testing. As result community vcx is useless from payments point of view. We need allow developers to use different payment plugins without touching of vcx source code and build configuration.    *Solution*    * Payment plugin linking and initialization should be responsibility of application  * As payment logic is hidden inside of vcx workflow we can allow configuration of what plugin should be used by providing additional option in vcx_init()  * For the future consider to make payment making and verification functionality as a dedicated step in API  ","New Feature",Medium,Complete,"2018-09-12 12:51:27","2018-09-12 12:51:27",5
"Hyperledger Indy SDK","VCX: Dummy Cloud Agent Boilerplate","As vcx is only part of agents system to play any example it requires access to some Cloud Agent. The only available is Evernym proprietary agency that can’t be used by community.    We can implement simple (Dummy) Cloud Agent and put it into indy-sdk repo near vcx.    The scope of this ticket is about implementation of development infrastructure for this agent.     *Acceptance criteria:*  * Build works  * Tests run with one command  * Full-stack Boilerplate is implemented  * Can be easily launched as part of Indy SDK CI/CD pipelines   ","New Feature",Medium,Complete,"2018-09-11 13:18:10","2018-09-11 13:18:10",8
"Hyperledger Indy SDK","Support new protocol version. Mediator changes","For implementing https://jira.hyperledger.org/browse/INDY-1563, indy-node need sdk to support new protocol version.    First, we need to define how urgent this task is.    As a result of POA, we suggesting such a changes:   * add new field submitter to common request structure, which will stand for DID of an identity who actually send txn to ledger    * add new field processor specifically for CRED_DEF txn, which will stand for DID of an identity who can send REVOC_REG_DEF    * make an interface for user so that he able to make scenarios, described in INDY-1563   * optionally formatting request that it could contain 2nd or 3th protocol version","New Feature",Highest,Complete,"2018-09-10 13:44:30","2018-09-10 13:44:30",8
"Hyperledger Indy SDK","Release: Release Indy SDK 1.6.6",,Task,Medium,Complete,"2018-09-10 09:49:11","2018-09-10 09:49:11",3
"Hyperledger Indy SDK","Release: Release Indy SDK 1.6.5",,Task,Medium,Complete,"2018-09-10 09:48:32","2018-09-10 09:48:32",3
"Hyperledger Indy SDK","Android builds should statically link libc","Concerns raised by Android developers regarding rustflags for all architectures for libc.    Proposed solution in this pull request:  https://github.com/hyperledger/indy-sdk/pull/1123    We need to evaluate the solution and address it correctly.",Task,High,Complete,"2018-09-06 14:19:44","2018-09-06 14:19:44",2
"Hyperledger Indy SDK","VCX: Provide VCX end-2-end sample","We need to create end-2-end sample or test that will explain VCX usage basics and use cases that VCX covered. I suggest the following:    - Use the same Acme/Fiber scenario that we use for libindy  - Adopt this scenario to VCX  - Implement this scenario as a code sample with good comments  - Put it to indy-sdk repo (check with the team for a good folder)    Acceptance criteria:    - Sample is created inside of indy-sdk repo  - There is a reference from README.md to this sample  - There is documentation on how to run this sample","New Feature",Medium,Complete,"2018-09-03 11:17:57","2018-09-03 11:17:57",8
"Hyperledger Indy SDK","VCX: Review VCX codebase and VCX integration plan","To be efficient on libvcx integration we need better understanding of vcx on SDK core team side. I suggest the following:    - Organize knowledge transfer if possible. May be Doug can provide this.  - Review existing code, build infrastructure and available documentation review.  - Identify API groups and covered use cases  - Identify proprietary dependencies  - Identify intersections with libindy  - Identify any problems  - Update vcx integration plan  - Share knowledge inside of SDK team    Acceptance criteria:    - SDK core team should get better understanding of vcx and covered use cases  - We need to have plan of VCX integration as set of well defined tickets in JIRA  - We need to have rough estimation of each steps in this plan",Task,Medium,Complete,"2018-09-03 11:09:12","2018-09-03 11:09:12",8
"Hyperledger Indy SDK","VCX: libvcx should use Indy Cloud Agent","*Description*  LibVCX in the Indy SDK should use the Indy Cloud Agent instead of the dummy Rust agent.",Task,Medium,Complete,"2018-09-02 07:38:27","2018-09-02 07:38:27",8
"Hyperledger Indy SDK","Release: Prepare the 1.6.4 release of IndySDK","Task Overview  Perform all necessary tasks in order to release LibIndy 1.6.4    Release scope:  * ARMv7 build fixes  * Workaround for Android file copy permission error  * Minor bugfixes    Acceptance Criteria    * Code is tested  * Release is tagged  * Release notes are drafted  * Release notes are reviewed by Docs and Product Management",Task,Medium,Complete,"2018-08-30 11:22:15","2018-08-30 11:22:15",3
"Hyperledger Indy SDK","UX: Early static validation","For the current moment libindy performs validation of structured params inside of command loop and it sometimes hard for developers to find the cause as requires complex logs analysis. In my vision we can call STATIC-only validation in API layer, but this validation must be defined in domain layer.    I suggest the following:    * We can can define trait Validatable with one method validate() -> Result<(), Error> in utils/validation  * For each domain struct that requires static validation we can implement this trait  * We can define additional macro check_usefull_valid_json! that will also call validate method on domain struct    One addition that i suggest is to return position error instead of CommonInvalidStructure here, but we need consensus here as it is breaking change, but the change is minor and affect only incorrectly written apps that can provide invalid structured jsons.","New Feature",Medium,Complete,"2018-08-27 14:49:27","2018-08-27 14:49:27",3
"Hyperledger Indy SDK","Performance: Reduce unnesessary memory copy during params deserialization","Libindy now performs unnecessary memory copy during de-serialization of params:    - It converts null terminated string pointer into String (1 copy)  - It sends string into working thread (2 copy)  - It de-serializes String into struct (3 copy)      We can avoid one copy with the following:    1. Consume null terminated string as reference (CStr)  2. De-serialize referenced string into Struct on API layer  3. Send struct into working thread    The approach is partially implemented in https://github.com/hyperledger/indy-sdk/pull/1079, expect point 1",Task,Medium,Complete,"2018-08-27 10:03:02","2018-08-27 10:03:02",2
"Hyperledger Indy SDK","Release: Prepare the 1.6.3 release of IndySDK","Task Overview  Perform all necessary tasks in order to release LibIndy 1.6    Release scope:  * New indy_generate_wallet_key API and support of raw keys for wallet create/open/export that solves performance problems of agency (IS-897)  * Fix of IS-872 bug (incorrect set_did_metadata call behavior)  * Fix android build settings that should fix crashes on some platforms    Acceptance Criteria    * Code is tested  * Release is tagged  * Release notes are drafted  * Release notes are reviewed by Docs and Product Management",Task,Medium,Complete,"2018-08-27 09:49:56","2018-08-27 09:49:56",5
"Hyperledger Indy SDK","Update build infrastructure docker images to use Ubuntu 18.04","Docker images used for continuous integration / continuous delivery (CI / CD) needs to be created for Ubuntu 18.04.    *Notes*  * The current images for Ubuntu 16.04 are a guide for how to proceed.  * We can either create new images or update the Ubuntu 16.04 images.    *TODO*  * We need to ensure sufficient hardware is available to support the additional platform. This will need to be provided by Hyperledger, the Sovrin Foundation, or Evernym.",Task,Medium,Complete,"2018-08-22 13:19:00","2018-08-22 13:19:00",5
"Hyperledger Indy SDK","Indy SDK support for Ubuntu 18.04","*Acceptance Criteria*  * All components of Indy SDK should support Ubuntu 18.04.  * Support for Ubuntu 16.04 needs to continue (hardware updates end in October 2019 and security ends June 2021)",Task,Medium,Complete,"2018-08-22 13:15:58","2018-08-22 13:15:58",3
"Hyperledger Indy SDK","Performance: Implement concurrency improvements Step 1","Implement concurrency improvements Step 1 described in corresponded HIPE: [https://github.com/hyperledger/indy-hipe/tree/master/text/0012-concurrency-improvement]     * Implement usage of thread pool for the most expensive crypto.   * Make size of this pool configurable    The main idea here is provide very small libindy refactoring. Make thread pool for long crypto operations and refactor corresponded commands to be STMs similar to ledger_send command. As result long blocking command will be executed on this thread pool and normal commands can be executed in parallel.    Acceptance criteria:    * Proposed solution implemented in libindy with TDD approach  * Automated test procedure provided  * Changes documented  * Migration guide updated  * Release notes updated","New Feature",Medium,Complete,"2018-08-20 09:28:38","2018-08-20 09:28:38",8
"Hyperledger Indy SDK","Performance: Implement concurrency improvements Step 2","Implement concurrency improvements Step 2 described in corresponded HIPE: [https://github.com/hyperledger/indy-hipe/tree/master/text/0012-concurrency-improvement]      * Add configurable dedicated thread pool for inexpensive crypto  * Add configurable dedicated thread pool for expensive crypto  * Add dedicated thread for default wallet storage (we don't need pool as sqlite serializes queries)  * Async interface for pluggable storage (as result threading will be responsibility of storage implementation)  * All commands will be split to parts and each part will be executed on corresponded thread pool. As results there will be no command executor thread locking. As each thread pool will allow configuration application can create good threads configuration for maximum throughput and concurrency.    As managing of each command as STM will cause significant amount of boilerplate we can consider switching to more modern async-io approach (Futures, Promises, Async/Await). For example all, internal interfaces can return tokio.rs Future created with single-shot tokio channel message from thread pool. CommandExecutor will be tokio stream that handles composed Futures.    Acceptance criteria:    * Proposed solution implemented in libindy with TDD approach  * Automated test procedure provided  * Changes documented  * Migration guide updated  * Release notes updated","New Feature",Medium,"To Develop","2018-08-20 09:28:02","2018-08-20 09:28:02",8
"Hyperledger Indy SDK","Wallet API: Move key derivation functionality to dedicated API endpoint","For the current moment wallet create/open/delete/export/import functions consume passphrase and perform key derivation with aragon2i/aragon2m.    Depending on hardware aragon2 can require significant time for key derivation and significantly reduce performance of mobile and especially enterprise agents.    Key derivation isn't needed if key (or passphrase for now) is stored in secure enclave that is a common case for mobile and especially enterprise agents.    I suggest the following:    1. Move key derivation to the dedicated endpoint: indy_derive_wallet_key(config) -> key   2. config will allow to choice between different derivation methods (random/aragon2i/aragon2m)   3. Force create/open/delete/export/import functions to consume raw key instead of passphrase  4. Indy CLI should provide an option to choice key derriviation method (raw, argon2i, argon2m)     Acceptance criteria:   - Changes implemented in libindy and python/java/iOS/nodejs wrappers   - Documentation updated   - Migration guide updated   - Test procedure updated     ","New Feature",Medium,Complete,"2018-08-16 16:40:19","2018-08-16 16:40:19",5
"Hyperledger Indy SDK","Logging: Indy Crypto python wrapper should integrate indy crypto logger with python logging facade","Indy Crypto Python wrapper should register python logger with Indy Crypto logging API to pipe logs from Indy Crypto into python logging facade.  In this case Indy Crypto logging will look for application as logging from regular python library and logging configuration will be significantly simplified.    Acceptance criteria:   - Integration is implemented   - Documentation is provided   - Migration guide is updated   - Manual testing is performed   - Dependent teams (Indy Node) are notified about expected changes","New Feature",Medium,Complete,"2018-08-16 12:27:38","2018-08-16 12:27:38",3
"Hyperledger Indy SDK","Logging: Indy Crypto should provide API for logger configuration that can be integrated with application logging approach.","For the current moment Indy Crypto is linked with simple logger that outputs logs to stdout/stderr, but best practice for libraries is to use logger that will be provided by application to re-use application logging facilities.    We suggest the following:   -  Indy Crypto should provide set_logger call that will allow application to register logging callbacks   - or development purposes Indy Crypto should also provide set_default_logger call that will allow to register simple logger bundled with Indy Crypto. We can keep the same logger behavior as we have for now. I only suggest to disable logging by default.   - Also we need to make Rust interface logging compatible with libindy. For now they are use different log crate version.    Acceptance criteria:   - Follow design in IS-2   - API is implemented with TDD aprroach   - Good integration tests coverage is provided   - Documentation is provided   - Dependent teams (Indy Node) are notified about expected changes","New Feature",Medium,Complete,"2018-08-16 12:27:06","2018-08-16 12:27:06",3
"Hyperledger Indy SDK","Logging: Better logging for Indy CLI","Current Indy CLI logging have the following problems:   - It allows put logs to stdout/stderr only, but QA much more wants logging to file   - It use it's own logger without piping logs from libindy. It just looks as the same logger because logs are written in the same format to stdout/stderr    We need the following:   - Indy CLI should use libindy logging API to pipe logs from libindy into logger configured by Indy CLI   - Indy CLI should use more flexible logger (log4rs?) that will allow writing logs to rotated file and to stdout/stderr   - Indy CLI should provide the way to change logger configuration        Acceptance criteria:   - Integration is implemented in TDD approach   - Documentation is provided   - Manual testing is performed   - Dependent teams (Indy Node, QA, Customer) are notified about expected changes","New Feature",Medium,Complete,"2018-08-16 12:15:54","2018-08-16 12:15:54",3
"Hyperledger Indy SDK","Logging: Libnullpay should reuse logger from libindy","Libnullpay now uses own instance of env_logger to write logs. Libindy plugins should re-use logger from libindy. Libnullpay can get the logger by calling indy_get_logger API.        Acceptance criteria:   - Integration is implemented in TDD approach   - Documentation is provided   - Manual testing is performed   - Dependent teams (Sovtoken, Storage) are notified about expected changes     ","New Feature",Medium,Complete,"2018-08-16 12:11:57","2018-08-16 12:11:57",3
"Hyperledger Indy SDK","Logging: Libindy java wrapper should integrate libindy logger with slf4j logging facade","Libindy Java wrapper should register slf4j logger with libindy logging API to pipe logs from libindy into slf4j logging facade.  In this case libindy logging will look for application as logging from regular java library and logging configuration will be significantly simplified.    Acceptance criteria:   - Integration is implemented   - Documentation is provided   - Migration guide is updated   - Manual testing is performed   - Dependent teams (Rajesh) are notified about expected changes","New Feature",Medium,Complete,"2018-08-16 11:41:52","2018-08-16 11:41:52",3
"Hyperledger Indy SDK","Logging: Libindy python wrapper should integrate libindy logger with python logging facade","Libindy Python wrapper should register python logger with libindy logging API to pipe logs from libindy into python logging facade.  In this case libindy logging will look for application as logging from regular python library and logging configuration will be significantly simplified.    Acceptance criteria:   - Integration is implemented   - Documentation is provided   - Migration guide is updated   - Manual testing is performed   - Dependent teams (Indy Node) are notified about expected changes","New Feature",Medium,Complete,"2018-08-16 11:41:13","2018-08-16 11:41:13",3
"Hyperledger Indy SDK","Payment API: Better support of currency units (denominations)","h3. Description    Assumptions:   * amounts (such as tokens) may have multiple units (denominations)   * indy-sdk is payment agnostic so it doesn't understand how amounts can be converted between units    Payment Plugins will provide methods for use by UI to distinguish between whole and fractional tokens.    h3. Acceptance Criteria   # get_amount_for_display & get_amount_for_display correctly calls payment plugin handlers   # registration methods for payment handlers provided (how needs to be communicated to libsovtoken team)   # libnullpay implements get_amount_for_display & get_amount_for_display     # unit tests   # integration    _Corresponding work in libsovtoken_: [TOK-365|https://evernym.atlassian.net/browse/TOK-365] [TOK-366|https://evernym.atlassian.net/browse/TOK-366]    _Reference_: [POA|https://docs.google.com/document/d/1XE39fKefG-MROcACPIxwToWkldllVo6hkUiYokkZJB8/edit]","New Feature",Medium,"To Develop","2018-08-14 15:52:05","2018-08-14 15:52:05",8
"Hyperledger Indy SDK","Design for freshness in communication with IndyNode","Problem:   Indy Nodes can reply with outdated information for consequence read request after write (if this write affects on read result).    Scenario:   - client send write request to all nodes   - client collect f+1 consensus for successful write   - client send read request and collect f+1 outdated response from other nodes   - libindy pass outdated response to application    Possible solutions:   1) libindy can try to guarantee increasing sequence of timestamp in node responses    Acceptance criteria:    - Design is done, documented and approved  - Implementation tickets created","New Feature",Medium,Complete,"2018-08-14 13:07:28","2018-08-14 13:07:28",5
"Hyperledger Indy SDK","Wallet API. Support simplified pwhash key derivation algorithm","Updated wallet credentials to support additional parameter `simplified_security`.  Using of this param allows choosing less secured but faster crypto algorithm for master key derivation. (interactive mode instead of moderate)  That allows speed up wallet operations.",Task,Medium,Complete,"2018-08-09 16:01:40","2018-08-09 16:01:40",3
"Hyperledger Indy SDK","Release: Prepare the 1.7 release of IndySDK","Task Overview  Perform all necessary tasks in order to release LibIndy 1.6    Acceptance Criteria    * Code is tested  * Release is tagged  * Release notes are drafted  * Release notes are reviewed by Docs and Product Management  * A new release of Indy-Crypto is part of this release  Notes",Task,Medium,Complete,"2018-08-08 11:17:55","2018-08-08 11:17:55",8
"Hyperledger Indy SDK","Default Wallet may be slow on mobile device due to filesystem syncs","The sqlite3 is used for default wallet implementation and libindy use default connection settings for journal and other filesystem staff. Non-default options should be considered and probably chosen for default wallet.",Task,High,Complete,"2018-08-08 09:44:49","2018-08-08 09:44:49",3
"Hyperledger Indy SDK","CI/CD: Provide LibVCX iOS CI/CD pipeline branches","*Description*  LibVCX builds and tests for iOS should occur and be tested as part of the Indy SDK CI/CD pipelines.    *Acceptance Criteria*  * Tests executed in CI and CD steps  * Artifacts as tar.gz archive published to repo.sovrin.org","New Feature",Medium,Complete,"2018-08-07 15:19:34","2018-08-07 15:19:34",5
"Hyperledger Indy SDK","CI/CD: Provide LibVCX Android CI/CD pipeline branches","*Description*  LibVCX builds and tests for Android should occur and be tested as part of the Indy SDK CI/CD pipelines.    *Acceptance Criteria*  * Tests executed in CI and CD steps  * Artifacts as tar.gz archive published to repo.sovrin.org  * Complete a build of Evernym's Connect.Me with the new artifacts.    *Notes*  * Evernym's official builds will continue to come off of their own build pipeline, but we want to ensure that the Hyperledger pipeline benefits from the Evernym approach.","New Feature",Medium,Complete,"2018-08-07 15:19:17","2018-08-07 15:19:17",8
"Hyperledger Indy SDK","CI/CD: Provide LibVCX Windows CI/CD pipeline branches","*Description*  LibVCX builds and tests for Windows should occur and be tested as part of the Indy SDK CI/CD pipelines.    *Acceptance Criteria*  * Tests executed in CI and CD steps  * Artifacts as zip archive published to repo.sovrin.org","New Feature",Medium,Complete,"2018-08-07 15:11:03","2018-08-07 15:11:03",3
"Hyperledger Indy SDK","VCX: Migrate Jira issues to Indy","*Story*   As a developer using indy-sdk, I need to be able to track the history of libvcx including before it was contributed to Hyperledger by Evernym so that I understand how decisions were made and what additional work is needed.    *Acceptance Criteria*   Migrate from the internal Evernym EN project to the Hyperledger JIRA Indy SDK project the following types of issues:   * Open issues   * Key historical issues containing important information project architecture.   * Key historical issues containing reasons why actions were not taken.    *Notes*  * We can apply a ToIndy label to issues that we identify for migration, and then bulk export them as a CSV.   * We are concerned about exporting the entire project without reviewing each issue and history for public consumption.   * We are concerned about the difficulty of moving issues between Jira instances with different configurations.   * Issues that have a specific label can be bulk exported from Jira as a CSV and imported into a different instance. See:   [https://confluence.atlassian.com/adminjiracloud/importing-data-from-csv-776636762.html]   * Many of the issues are low value to migrate due to minimal information being included.",Task,Medium,Complete,"2018-08-06 15:26:39","2018-08-06 15:26:39",2
"Hyperledger Indy SDK","Move libvcx code into Hyperledger indy-sdk repo","As part of delivery to comunity, we need to deliver the claims exchange code to the Hyperledger Project.    *Acceptance Criteria*  * Move code and history from the development Git repository to a the Hyperledger repository.  * The development repositories are:  ** sdk  *** Moved to hyperledger/indy-sdk/vcx  * The Indy SDK contribution guide should be updated to also include guidelines for community development of  LibVCX.  * VCX documentation should be moved into Hyperledger/indy-sdk/doc    Excluded:   * This ticket just involves moving the code, it does not include setting up CI/CD pipelines.    Notes:   * This guide for merging repositories might help:   [https://stackoverflow.com/questions/1425892/how-do-you-merge-two-git-repositories]    TODO:   * <USER>should review and approve this issue before work is started.   * We need to get access rights from Hyperledger.",Task,Medium,Complete,"2018-08-06 13:48:59","2018-08-06 13:48:59",8
"Hyperledger Indy SDK","Implement pool refresh command in CLI",,Task,Medium,Complete,"2018-08-06 09:25:53","2018-08-06 09:25:53",2
"Hyperledger Indy SDK","Research how pool ledger size affect performance","1. Write 10.000 pool transactions  2. Run load testing with setup that similar for load with known metrics",Task,Medium,Complete,"2018-08-03 13:12:57","2018-08-03 13:12:57",2
"Hyperledger Indy SDK","Timeout errors infinitely appear in rust logs if indy-cli was not connected to the pool during extended timeout","Steps to Reproduce:  1. Set up the pool.  2. Start the traffic_shaping.sh on all the nodes.  3. Open indy-cli with RUST_LOG=indy=trace.  4. Connect to the pool with small timeouts.  => indy-cli can't connect during timeout.    Actual Results:  Following messages infinitely appear in rust logs:    It's impossible to exit the cli normal way, ctrl+c results hanging of indy-cli. Only kill the process works.    Expected Results:  Timeout error should appear only once.    Additional Information:  The same case works without any problems without logging.",Task,Medium,Complete,"2018-08-03 09:35:33","2018-08-03 09:35:33",2
"Hyperledger Indy SDK","Allow ledger queries without an active DID","*Story*    As a developer working with an Indy Network,  I should not be required to specify a DID in order to submit a GET transaction to the ledger. The additional stop increases developer frustration with using the network.         *Acceptance Criteria*   * The SDK should always set a fake DID as the identifier   ** This fake identifier should be easily identifiable as fake, such as all zeros   * A ticket should be raised in the Indy Node project for the ledger to not require a DID for GET transactions.","New Feature",Medium,Complete,"2018-08-02 17:22:13","2018-08-02 17:22:13",3
"Hyperledger Indy SDK","anoncreds prover_{search,fetch}_credentials_for_proof_req ignores restrictions in proof-req","I have three cred defs:  * fav-num v1.0: `WgWxqztrNooG92RXvxSTWv:3:CL:178:0` (on schema with attributes 'ident', 'num')  * ident v1.0: `WgWxqztrNooG92RXvxSTWv:3:CL:179:0` (on schema with attributes 'ident', 'regEpoch')  * fav-char v1.0: `WgWxqztrNooG92RXvxSTWv:3:CL:180:0` (on schema with attributes 'ident', 'char').    The wallet has 24 creds on each with ident=0..23, and, for the fav-num creds,  * ident 0..3 have num=0  * ident 4..23 have num > 0.    I build a proof request using only the fav-num cred def; it looks like this:        I search the wallet with the above proof-req and extra WQL dict:        After getting the search handle, I tracked what I got back from each call to `anoncreds.prover_fetch_credentials_for_proof_req()` per item referent and got:        The proof request clearly identifies the cred-def restriction on each item referent, but the search ignores it in the WQL fetch iteration that the item referent identifies. As I see it, no way should this search have found credentials on the fav-char or ident cred-defs.    For the moment, specifying the restrictions explicitly in the WQL suffices as a workaround.",Task,Low,Complete,"2018-08-02 17:07:47","2018-08-02 17:07:47",2
"Hyperledger Indy SDK","Load test hangs if there is not enough nodes to connect the pool","Steps to Reproduce:   1. Setup the pool of 7 nodes.   2. Stop 5 nodes.   3. Try to connect to the pool using load test.    Actual Results:   Load script hangs.    Expected Results:   Load script should get error and exit.    Logs:  ",Task,High,Complete,"2018-08-02 11:48:48","2018-08-02 11:48:48",2
"Hyperledger Indy SDK","As a Trustee running POOL_UPGRADE txn, I need to specify top-level package to be upgraded","Support an optional parameter in POOL_UPGRADE txn to specify the package to be upgraded.","New Feature",High,Complete,"2018-08-02 09:36:11","2018-08-02 09:36:11",2
"Hyperledger Indy SDK","create tag for revocation registry on anoncreds.prover_store_credential()","I am working with the new anoncreds.prover_store_credential() implementation with its tag creation on storage. I was wondering if it might be possible in future to include a rev_reg_id tag (value None if not present) too?    It would be convenient to be able to search credentials by revocation registry.",Task,Low,Complete,"2018-08-01 14:06:41","2018-08-01 14:06:41",2
"Hyperledger Indy SDK","CI/CD: Provide LibVCX Ubuntu 16.4 CI/CD pipeline branches","*Description*  LibVCX Ubuntu 16.4 tests and builds should be part of Indy SDK CI/CD pipeline.    *Acceptance Criteria*  * Indy SDK CI/CD pipelines execute tests for libvcx  * Indy SDK CD pipline produces libvcx debs for Ubuntu 16.4 and debs have correct dependencies  * Debs automatically published to Sovrin debian repo    *Notes*  * The Evernym internal Jenkins configuration can be used as a basis for this work.  * We need to minimize dependency on a specific Linux version, as we will soon have to support Ubuntu 18.04 and Red Hat Linux.","New Feature",Medium,Complete,"2018-07-30 22:21:54","2018-07-30 22:21:54",8
"Hyperledger Indy SDK","Dockerized LibVCX build environment","*Story*  As a developer building solutions on an Indy network, I want to be able to easily consume LibVCX in my development environment in advance of a LibVCX build pipeline being created.    *Acceptance Criteria*  * A contained environment exists where libVCX can be reproducibly built.    *Notes*  * BC.gov would prefer a dockerized environment published to Docker Hub.  * This is intended to be an interim deliverable. If a full CI / CD pipline can be quickly provided, that would be preferable to delivering this story.  * We should verify whether the current Evernym build Docker is appropriate for use by the Hyperledger community.","New Feature",Medium,Complete,"2018-07-30 22:19:04","2018-07-30 22:19:04",8
"Hyperledger Indy SDK","VCX: Publish existing libvcx documentation","Evernym has internal documentation for libvcx API available here:  http://doc.corp.evernym.com/     We need to make this documentation available to the Indy community.    *Acceptance Criteria*  * Documentation exists for the current libvcx API alongside other Indy documentation  * The documentation is available in a text-based format (preferably MarkDown) consumable with other Indy documentation    Not included:  * This task is for existing Evernym documentation. Documentation improvements will be tracked as separate issues.",Task,Medium,Complete,"2018-07-30 22:08:48","2018-07-30 22:08:48",2
"Hyperledger Indy SDK","Integrate BLS PoP with Indy-Node",,Task,Medium,Complete,"2018-07-30 10:40:42","2018-07-30 10:40:42",2
"Hyperledger Indy SDK","get-validator-info timeout","Indy CLI provides a way to get validator info using `ledger get-validator-info`. The output is a mix of text and JSON output. The following change is recommended to provide a more programatic use of the output:    An optional parameter to override the default timeout ([about 100 seconds|https://jira.hyperledger.org/browse/IS-588?focusedCommentId=47083&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-47083]) when a node does not respond with validator info. As would be the case when a node is offline, unreachable, etc.    `ledger get-validator-info node-response-timeout=10` would yield a response excluding validator-info from nodes that do not respond within 10 seconds.","New Feature",Medium,Complete,"2018-07-27 13:51:47","2018-07-27 13:51:47",3
"Hyperledger Indy SDK","get-validator-info for a single node or list of nodes (not all nodes)","Indy CLI provides a way to get validator info using `ledger get-validator-info`. The output is a mix of text and JSON output. The following three changes are recommended to provide a more programatic use of the output:    2. An optional parameter to retrieve a single node or a list of node validator info.    `ledger get-validator-info Node2` would yield a singleton result.        Note that the node name/alias is not a key in the dict. Just Node2's validator info is returned. The assumption here is that the caller is explicitly asking for just Node2's validator info in the result.    `ledger get-validator-info Node2 Node8` would yield:      ","New Feature",Medium,Complete,"2018-07-27 13:51:29","2018-07-27 13:51:29",5
"Hyperledger Indy SDK","indy-cli must operate with pool config","Pool config is helpful tool to reproduce complex bugs. So we need to have way to use pool config when we use CLI",Task,Medium,Complete,"2018-07-27 13:29:02","2018-07-27 13:29:02",2
"Hyperledger Indy SDK","Libindy should check restrictions on requested predicates during validation of proof","Restrictions set on requested_predicates during proof validation have no effect. I have tested the following restrictions, and neither worked:   * issuer_did   * cred_def_id    *Tested with the python 3.6 wrapper*    Based on [this comment in the source code|https://github.com/hyperledger/indy-sdk/blob/2123d8634692edea58f5cf589609762bea18db64/libindy/src/api/anoncreds.rs#L1118], restrictions on predicates should work.    Example proof request:    Despite there being no issuer with a did of a, the prover will use an attribute that has been signed by another DID to fulfill the predicate. The verifier accepts this proof even though it shouldn't.    _I've attached a sample Python3.6 file that runs through an example of restrictions failing. Assuming you have the python wrapper installed, you should be able to just run it by typing python3.6 <filename.py>_","New Feature",High,Complete,"2018-07-26 21:00:03","2018-07-26 21:00:03",8
"Hyperledger Indy SDK","Android CD should reuse binaries from test step in publish step",,"New Feature",High,Complete,"2018-07-26 09:55:15","2018-07-26 09:55:15",2
"Hyperledger Indy SDK","CLI should only keep keys hidden in interactive mode","Currently when opening the wallet there is an option wallet open <wallet name> key=<my key> which remains in the cli history log until closed. This option should be removed to prevent shoulder surfing attacks.    The wallet open <wallet name> key command prevents shoulder surfing attacks and should be the only option.    Additionally, when calling wallet open <wallet name> key and then the key is entered incorrectly, the incorrect key is echoed back to the user. This should be replaced with a more generic message which doesn't echo back the previously key that was entered incorrectly.    We should also make sure this pattern isn't being used in other parts of the CLI.","New Feature",Medium,Complete,"2018-07-26 00:09:20","2018-07-26 00:09:20",3
"Hyperledger Indy SDK","Add support for Android armv7 and x86_64","Support for armv7 and x86_64 architecure.",Task,Medium,Complete,"2018-07-24 11:40:08","2018-07-24 11:40:08",8
"Hyperledger Indy SDK","CI/CD: Fix failing unit tests on Android Emulator and use it in Android CI","As of now, the unit tests are failing on the emulator/device. The code needed to push the tests on the emulator and execute them is present. But this is disabled in the CI pipeline, due to the failure of tests.",Task,Medium,Complete,"2018-07-24 11:30:54","2018-07-24 11:30:54",8
"Hyperledger Indy SDK","Pool API: Pool should support more flexible timeouts","During pool load testing with new sdk we found that a lot of catch-up requests were failed with timeout. We need more flexible configuration of timeouts with dedicated values for:    * ledger status  * acks  * read requests  * write requests    Also we need to determine good default values for these timeouts that will good feed low and high load use cases well.","New Feature",Highest,Complete,"2018-07-23 13:33:07","2018-07-23 13:33:07",3
"Hyperledger Indy SDK","Explore load test behavior in case of read requests and lots of connections","When the load test runs on 10 machines with 450 clients, part of clients fails with timeout errors during connection the clients. libindy=1.5.0~626, indy-node=1.5.515  Need to understand why we fails with timeout.",Task,High,Complete,"2018-07-20 14:27:34","2018-07-20 14:27:34",3
"Hyperledger Indy SDK","Long API calls should support progress reporting","We have some API calls that can be executed significant time. For example:   * Wallet export/import   * RevReg generation    We need have ability to get progress for these calls. I suggest the following:   * Keep C API as is without additional cbs or params   * Add indy_get_progress(cmd_handle) endpoint   * For each wrapper analyze ability of progress reporting without API changes(extension of Future or Promise can be returned). If it is impossible for some wrappers than we can add similar ext method for each important endpoint that exposes cmd_handle.","New Feature",Medium,"To Develop","2018-07-18 16:30:47","2018-07-18 16:30:47",8
"Hyperledger Indy SDK","Long API calls should support cancellation","We have some API calls that can be executed significant time. For example:   * Wallet export/import   * RevReg generation    We need have ability to cancel these calls. I suggest the following:   * Keep C API as is without additional cbs or params   * Add indy_cancel(cmd_handle) endpoint   * For each wrapper analyze ability of cancellation through asyncio API (Future.cancel()). If it is impossible for some wrappers than we can add similar ext method for each important endpoint that exposes cmd_handle.","New Feature",Medium,"To Develop","2018-07-18 16:03:52","2018-07-18 16:03:52",8
"Hyperledger Indy SDK","Payment API: API should be more generic","Current Payment API in libindy forces UTXO based payments approach and it is hard to use with non-UTXO based payments. We need to make the API more generalized to support non-UTXO based crypto payments and traditional payments like VISA.         The following changes are suggested:   - Instead of TXO/UTXO abstraction used as payment inputs use Source abstraction.     - Instead of TXO/UTXO abstraction used as payment outputs use Receipt abstraction.     - Rename get_utxo endpoint to get_sources endpoint     - Add build_verify_payment_req(receipt) and parse_verify_payment_resp(resp) endpoints     - Add OperationNotSupported error code as some operations like minting can't be supported by new payment methods","New Feature",Medium,Complete,"2018-07-16 12:53:47","2018-07-16 12:53:47",5
"Hyperledger Indy SDK","Performance Tests for Wallet Default Storage","*Task Overview*   At this moment there are no performance tests for the Default Storage of the Indy SDK Wallet. Without these tests it will be hard to monitor if there are performance regressions with new code changes/re-factors.    Output of this ticket should be a Performance Test Harness that tests the performance of the Wallet Default Storage.    *Acceptance Criteria*   * Performance test harness created     * Reports on performance generated and published     ",Task,Medium,Complete,"2018-07-13 00:53:26","2018-07-13 00:53:26",8
"Hyperledger Indy SDK","indy-crypto python wrapper debian package should depend on specific version of libindy-crypto","As of now debian package for python wrapper of indy-crypto is built without explicitly specified version of [libinfy-crypto|https://github.com/hyperledger/indy-crypto/blob/640186b3f3b60ca3565bef1251a77233db208bfd/wrappers/python/ci/python-wrapper-deb-build-and-upload.sh#L33]. It might lead to run-time issues in future.","New Feature",Medium,"To Develop","2018-07-12 11:58:57","2018-07-12 11:58:57",3
"Hyperledger Indy SDK","DID API: Allow to use multiple key pairs with one DID","[from Daniel] On a recent agent call, it became clear that we need to try hard to dramatically speed up our ability to support the semantics of multiple keys for a single DID (one being a cloud key, one being the key of the agency's message routing inbox, and one or more being edge keys). This is a precursor to full microledger support with AuthZ policies, where each DID has different keys (some edge, maybe one a cloud). If we don't figure out a way to do a super simple form of this soon (e.g., in indy-sdk 1.6), we may experience a very painful divergence as existing A2A explorations force a different DID for each agent due to the restriction that each DID can only have one keypair at a time.    [from Slava] Libindy already provides call *indy_create_key* that allows creation of key/pairs. Important point that keys now don't have a name and identified by verkey.    All crypto functions are completely keys based and don't know anything about DID. Roughly libindy mostly allow to solve the problem already.    The only problem is mapping between DID and set of key. For the main key libindy stores the mapping in wallet and allow to get DID key by calling *key_for_did* endpoint and we need similar behavior for secondary keys. Right now application can store this mapping in DID metadata with *indy_set_did_metadata*, but i more like more standard approach for this and suggest to add new endpoints:   - *indy_asso**c**iate_key*(did, keyname, verkey)   - *indy_get_**associated**_key*(did, keyname) -> key   - *indy_get_**associated**_keys*(did) -> keys    *indy_get_**associated**_key_* _and  *indy_get*_*associated**_keys* can look for association stored in the wallet and if not found lookup ledger with GET_ATTRIB transaction that is similar on what ** *indy_key_for_d**id* endpoint is doing.    To standardize the way how keys are stored on the ledger we can add corresponded transaction builders and parsers:   - *indy_build_associated_keys_request*(did, keys)   - *indy_build_get_associated_keys_request*(did) -> req   - *indy_parse_get_associated_keys_request*(req) -> keys    format of keys param can be the same as *indy_get_associated_keys* returns.","New Feature",Medium,"To Develop","2018-07-10 14:26:35","2018-07-10 14:26:35",8
"Hyperledger Indy SDK","Pool API: Ability to list pool ledger configurations","As a developer I want to be able to check if a pool ledger configuration exists so that I do not have to do error based logic.    An example of the new API function name could be indy_list_pool_ledger_config, which would return a list of pool ledger configurations","New Feature",High,Complete,"2018-07-06 19:08:46","2018-07-06 19:08:46",1
"Hyperledger Indy SDK","Android: Merge Android CD PR","We need review and merge Android CD PR.    Acceptance criteria    - Code reviewed to satisfy indy-sdk architecture, code style and quality standards  - Build process tested  - Documentation validated  - Produced artifacts validated  - PR merged    ","New Feature",Medium,Complete,"2018-07-06 08:09:50","2018-07-06 08:09:50",3
"Hyperledger Indy SDK","Wallet API: Review error handling for plugable storage","From Rajesh:    ```  Hey guys, any idea when can I get WalletStorageException: Storage error occurred during wallet operation type of error. I am getting it during storeTheirDid operation, but it is not failing always, just in one condition. I am not able to find out more detail about that error. Wondering if any of you have any idea already?  ```    Just looked to PluggedStorage code. Seems it doesn't provide correct errors handling for all cases. For example,     add always return PluggedStorageError instead of analyzing results. Also WalletStorageError seems redundantly as it always converts to WalletError.    We need to fix this behavior as errors required recovery from application aren't propagated.",Task,Medium,Complete,"2018-07-05 13:52:07","2018-07-05 13:52:07",3
"Hyperledger Indy SDK","Make a plan for merging libvcx into Indy SDK","As part of the efforts to open source libvcx and for libvcx API to become the default interface for most developers interacting with Indy, we want to migrate libvcx into Indy SDK repo.     This ticket is for creating a plan to migrate libvcx to Indy SDK repo     *Acceptance criteria*   - Understand hipe process: [https://github.com/hyperledger/indy-hipe]   - Understand libvcx source code: [https://github.com/evernym/sdk]   - Identify which community meetings/groups to engage   - Meet with Slava and Doug and *agree on design* and the next steps",Task,Medium,Complete,"2018-07-05 13:09:11","2018-07-05 13:09:11",8
"Hyperledger Indy SDK","Produce pure JSON output from `ledger get-validator-info`","Indy CLI provides a way to get validator info using `ledger get-validator-info`. The output is a mix of text and JSON output. The following three changes are recommended to provide a more programatic use of the output:    1. Produce pure JSON output in the form:      ","New Feature",Medium,Complete,"2018-06-29 16:59:39","2018-06-29 16:59:39",3
"Hyperledger Indy SDK","Stop using indy_crypto JSONENCODABLE","indy_crypto::JsonEncodable is used in many places in libindy.    e.g.: [https://github.com/hyperledger/indy-sdk/blob/master/libindy/src/commands/did.rs#L28]         I suggest stop doing that. Why?:   # indy-crypto is for crypto and it is not indy-utils. Why is JSONENCODABLE there anyway?   # Any extern crate use in libindy is a liability. Libindy is depending on that crate (obviously)   # Errors raised by these methods are IndyCryptoErrors which libindy then has to map to its own errors.   # serde_json provides everything libindy needs.   # serde_json is kind of part of rust, so support for serde_json is high. If serde_json advances then libindy might directly profit from that.   # libindy code is easier to read because many developers know serde_json anyway and so developers do not have to look at indy-crypto whether there are subtle differences.         This PR [https://github.com/hyperledger/indy-sdk/pull/886] mostly gets rid of map_err but also it shows that serde_json is all that libindy needs.    [https://github.com/hyperledger/indy-crypto/blob/master/libindy-crypto/src/utils/json.rs] provides two methods that can easily be replaced by serde_json methods. Also it provides two types JsonEncodable and JsonDecodable which can be replaced by serde_json types as well.         For reason 1. I would deprecate indy-crypto/utils/json.rs    [~<USER>     ",Task,Medium,Complete,"2018-06-27 09:57:04","2018-06-27 09:57:04",3
"Hyperledger Indy SDK","Release: Prepare the 1.6 release of IndySDK","*Task Overview*   Perform all necessary tasks in order to release LibIndy 1.6    *Acceptance Criteria*   * Code is tested   * Release is tagged   * Release notes are drafted   * Release notes are reviewed by Docs and Product Management   * A new release of Indy-Crypto is part of this release    *Notes*",Task,Medium,Complete,"2018-06-25 15:57:49","2018-06-25 15:57:49",8
"Hyperledger Indy SDK","Payments API should not be experimental","*Acceptance Criteria*   * Evaluate what additional changes are needed to have confidence in the Payments API   * Remove any comment that mentions it being experimental   * Remove any mention of it being experimental from the release notes",Task,Medium,Complete,"2018-06-25 15:49:53","2018-06-25 15:49:53",3
"Hyperledger Indy SDK","Standardize the wallet export serialization format","The experimental wallet export format currently uses a non-standard serialization process. It should be changed to use the same message pack as the rest of LibIndy.         *Work Involved*   * Create and review Plan of Attack   * Implement and test the changes   * Initiate standardization process (separate ticket)",Task,Medium,Complete,"2018-06-25 15:45:55","2018-06-25 15:45:55",8
"Hyperledger Indy SDK","Wallet Import / Export should not be experimental","*Acceptance Criteria*  * Evaluate what additional changes are needed to have confidence in the Wallet Import / Export -- specifically with the file format  * Remove any comment that mentions it being experimental  * Remove any mention of it being experimental from the release notes",Task,Medium,Complete,"2018-06-22 15:09:19","2018-06-22 15:09:19",3
"Hyperledger Indy SDK","Wallet Enchancement: Integrate tags-based search to Anoncreds workflow","Wallet support efficient search based on tags, but credentials filtering code doesn't benefit from it and uses old inefficient approach. We need to integrate tags based search to Anoncreds workflow.    PoA:   - store_credential call should also create tags for credential object:   - schema_id (encrypted)   - schema_issuer_did (encrypted)   - schema_name (encrypted)   - schema_version (encrypted)   - issuer_did (encrypted)   - cred_def_id (encrypted)   - raw attribute (encrypted) - *discuss with Daniel and others*   - user defined tags - *discuss with Daniel and others*   - get_credentials should support wql in filter parameter   - get_credentials_for_proof_req should support additional filter parameter with optional custom wql for each attribute in proof request - discuss with Daniel and others   - Also we need to update get_credentials and indy_prover_create_proof to return iterator instead of the whole list of values. Iterator for indy_prover_create_proof will be a bit complex as we need dedicated iteration over each attribute in proof request.   - Logic of credential search should create the most selective wql query based on stored tags and apply additional filter if needed during lazy iteration",Task,Medium,Complete,"2018-06-22 10:52:22","2018-06-22 10:52:22",8
"Hyperledger Indy SDK","Security: Avoid secrets tracing","Today we found multiple cases when libindy prints secrets if trace log level is enabled. I suggest the following:    - Review the code and find all places  - Introduce secret_debug! macro that will allow debug printing of secrets in test builds only. Log all secrets only with this macro if needed  - ASAP wrap secrets to structs with modified Debug trait implemented similar to !secret_debug macro. It will allow safe logging of these structs.     This behavior should be implemented in both libindy and indy-crypto (consider to split it into 2 tasks)",Task,Medium,Complete,"2018-06-20 11:41:52","2018-06-20 11:41:52",3
"Hyperledger Indy SDK","Add encode/decode functions to Indy-SDK for credential attributes","In the current implementation of Indy-SDK, a credential to be created is passed to the Indy-SDK from a caller as a list of attributes with a raw and encoded value, something like this:         {{ attrs: \{ }}    {{    attr1 : }}{{\{raw: value1, encoded: value1_as_int },}}    {{    attr2 : \{raw: value2, encoded: value2_as_int }}}    }    There are two challenges with this:   # The encoding/decoding methods are left to the caller to define and use.  For example, the BC Gov VON-Agent implementation uses [this code to encode/decode|[https://von-agent.readthedocs.io/en/latest/_modules/von_agent/codec.html?highlight=codec]] the attributes.  This will cause interoperability problems between systems if different agent implementations use different encoding/decoding methods.   # The raw value can be unrelated to the encoded value and is never checked by the Indy-SDK model against the encoded value. This makes it possible to put in one value in the raw version, have the user see that and thinks that is what is being conveyed, but the encoded version could be different.    At minimum, we'd like to see the encode/decode routines be within the Indy-SDK, so that it's not left to the callers to do potentially incompatible encodings.     Ideally, the caller would only send in the raw value and Indy-SDK would do the encoding of the raw values as part of the Credential Creation process.          ","New Feature",Medium,"To Develop","2018-06-18 22:48:01","2018-06-18 22:48:01",8
"Hyperledger Indy SDK","Security: Zeroing Memory for private keys","We should double check that libindy does indeed erase memory when disposing of private keys. It looks like it assumes that Rust zeros RAM when dropping variables. If you move around a value it will only get dropped in the last spot it ended up and the rest keep copies until they're overwritten by other data. The way to work around this usually is to box the data, as moving around a pointer won't leak the actual data, and Drop can clear that only copy (assuming nobody else accessed it improperly and caused copies on their own). If you move a value, it gets copied to another location in memory and the old value is never dropped. Tons of things move in Rust, and auditing for it is likely to be fairly involved. At least this is what I have observed with Rust.",Task,Medium,Complete,"2018-06-18 20:17:12","2018-06-18 20:17:12",0
"Hyperledger Indy SDK","Security: Wrap all secrets to structs with automatic zeroing on Drop","Secrets in memory should be wiped as soon as possible.    It is much better for all return values in this [module|https://github.com/hyperledger/indy-sdk/tree/master/libindy/src/utils/crypto] to add wrapper types like it has been done in this [PR|https://github.com/hyperledger/indy-sdk/pull/833].    It allows clean memory the proper way.    It required changes in both indy-crypto and indy-sdk    Major note from [~<USER> IS-785  {quote} We should double check that libindy does indeed erase memory when disposing of private keys. It looks like it assumes that Rust zeros RAM when dropping variables. If you move around a value it will only get dropped in the last spot it ended up and the rest keep copies until they're overwritten by other data. The way to work around this usually is to box the data, as moving around a pointer won't leak the actual data, and Drop can clear that only copy (assuming nobody else accessed it improperly and caused copies on their own). If you move a value, it gets copied to another location in memory and the old value is never dropped. Tons of things move in Rust, and auditing for it is likely to be fairly involved. At least this is what I have observed with Rust. {quote}",Task,Medium,"In Progress","2018-06-17 12:26:09","2018-06-17 12:26:09",8
"Hyperledger Indy SDK","Wallet API: Wallet should be accessible in a cluster","Current Wallet API design doesn't satisfy enterprise use case when application is distributed between nodes in cluster:    {quote}Say, I have two node clusters: node1 and node2    Now say, someone hit an agent api, which went to ‘node1’, and it created a wallet w1 (wallet content storage is off course mysql which is shared between ‘node1’ and ‘node2’). What happens is that on whichever node, first time wallet gets created, it creates related config files on local file storage system as well. For example, in this example scenario, since wallet was created on ‘node1’, here are files which I see on ‘node1’:        ~/.indy_client/wallet/w1          -rw-r--r--  1 ashokwaghmare  staff   205B Jun 12 16:32 config.json  -rw-r--r--  1 ashokwaghmare  staff   118B Jun 12 16:32 wallet.json    Here are contents of those files  cat config.json  {db_name:wallet,port:3306,read_host:127.0.0.1,salt:[40,173,109,87,96,106,221,67,3,77,160,231,140,53,229,119,111,156,62,144,53,211,215,186,39,15,34,213,146,219,157,251],write_host:127.0.0.1}%      ➜  817733b2a75bffe66d4825330651b7ab4c3a2bd796b9b5aed98382dc74d8c00a    cat wallet.json  {pool_name:default_pool,type:aurora,name:817733b2a75bffe66d4825330651b7ab4c3a2bd796b9b5aed98382dc74d8c00a}%    ➜  817733b2a75bffe66d4825330651b7ab4c3a2bd796b9b5aed98382dc74d8c00a    So, ‘node1’, knows where is the wallet w1 (from config.json file).    But, when next request goes to ‘node2’, and if same wallet w1 is needed, it doesn’t have those two config files (although a blank directory with wallet-name w1 does exists), and it doesn’t find wallet there.{quote}    We discussed different options and current vision is the following:    - libindy shouldn't have any persistent state related to wallet configuration  - wallet_create function should stop creating of wallet.json/config.json files  - wallet_open function should accept wallet configuration as a single json. This json should provide all information about wallet configuration, wallet storage configuration and placement inside of storage.   - libindy should stop be responsible for discovering of existing wallets. Corresponded endpoints should be deprecated.   - Indy CLI should manage the list of wallets on an application level","New Feature",Medium,Complete,"2018-06-15 13:35:38","2018-06-15 13:35:38",8
"Hyperledger Indy SDK","Add `tag` to cred_def_id","We should add `tag` parameter to cred_def_id since it is supported on the indy-node side.",Task,Medium,Complete,"2018-06-15 11:44:36","2018-06-15 11:44:36",3
"Hyperledger Indy SDK","Wallet - Export/Import functionality in wrappers","*Story*    As a developer building applications that are using wallet, I need to have functionality for export and import contents of the wallet so I can build backup/restore feature in my applications.    This functionality will allow application users to backup and move their wallet data to different agency or device.    *Acceptance criteria*  - Functionality based on the IS-777 ticket is available on wrappers","New Feature",Medium,Complete,"2018-06-14 10:16:53","2018-06-14 10:16:53",3
"Hyperledger Indy SDK","Wallet - Export/Import functionality in Indy CLI","*Story*    As Indy CLI user, I need to have the option of exporting contents my wallet to encrypted file and creating and importing wallet from exported file.    *Acceptance criteria*  - User is able to call export functionality in CLI and give passphrase for deriving encryption key and path as parameters    - User is able to call import functionality in CLI and give passphrase for deriving decryption key and path as parameters      *Notes*  This functionality needs to be built based on https://jira.hyperledger.org/browse/IS-777","New Feature",Medium,Complete,"2018-06-14 10:07:16","2018-06-14 10:07:16",3
"Hyperledger Indy SDK","Wallet - Export/Import functionality","*Story*    As a developer building applications that are using wallet, I need to have functionality for export and import contents of the wallet so I can build backup/restore feature in my applications.     This functionality will allow application users to backup and move their wallet data to different agency or device.    *Acceptance criteria*   * public API functions for export exist   ** result of the export API functionality is encrypted file   ** file is encrypted with encryption key   ** exported file contains all wallet data   ** export API function supports taking path and passphrase for deriving encryption key     * public API function for import exist   ** import API function supports taking path to the file for import and passphrase for deriving decryption key   ** import API function will throw an error if tried on a non-empty wallet   ** import API function supports taking new master key for importing to a new wallet     * Export/import API functionality works on all storage implementations (default, plugged)    *Notes*    Design document: https://github.com/<USER>indy-sdk/blob/1f7b0bddb5ac2958bff46847faa6946702f0cdfc/doc/design/009-wallet-export-import/README.md     ","New Feature",Medium,Complete,"2018-06-14 09:03:36","2018-06-14 09:03:36",0
"Hyperledger Indy SDK","Make indy_crypto_auth_decrypt clear on application layers verification requirements","     indy_crypto_auth_decrypt and its associated function indy_crypto_auth_crypt provide two important data protection:   * Confidentiality - using a shared key (diffie hellman key exchange), only two parties can read the plain text   * Integrity - These functions can verify that the message was not tampered with.    *But* these two functions do not enforce *source authentication.* In particular, indy_crypto_auth_decrypt does not check the sender's verkey is a trusted verkey. That task is left to the application layer (by design).         This creates two issues:   # the function name indy_crypto_auth_decrypt implies (to me) that authentication verified and enforced (with that function name, I would expect it to fail if the message was not from the expected source). Of course, the function don't have enough information to enforce this. And I'm not suggesting it should. The issue is on the implied functionality. Additionally, the function documentation could be more clear about its limitations.   # Code reuse. Since all applications of libindy will have the need to do this verification ( I don't think there is a common use-case for not checking), this functionality will have to be continually rewritten. This code will be fairly high stakes.     Solution Ideas:   # Introduce a higher level API that includes verification. Provide expected verkey or eventually, a micro-ledger to check against.   # Improve documentation for indy_crypto_auth_decrypt and indy_crypto_auth_crypt to re-enforce the contract with the application layer.   # Consider changing the API name to something that doesn't imply features it doesn't have. I don't have a better name and of course, this would require deprecating the old and all that mess. ","New Feature",Medium,"To Develop","2018-06-13 21:22:22","2018-06-13 21:22:22",5
"Hyperledger Indy SDK","remove association between wallet and pool","Today, our wallet interface assumes that each wallet will be associated with exactly one pool. I think this is unnecessarily rigid. I want the same wallet to be able to store DIDs, keys, and other day from more than one pool. This will allow us to use our wallet to interoperate with other ledger types besides Indy, and will allow someone to conduct test transactions and real transactions without changing wallets. It is related to the backlog item (please confirm we have such an item in our backlog) to support fully qualified DIDs.    The association between a wallet and a pool should be implicit; we should store DID values fully qualified, and the prefixes on the DID value should tell us which pool the DID is associated with.    This change will also help us when we implement microledgers (which may have an association with a pool that is non-obvious).",Task,Medium,Complete,"2018-06-13 16:54:21","2018-06-13 16:54:21",5
"Hyperledger Indy SDK","automate validity checking of how-to sample code","Do this ticket after IS-770.    Hook up the test written in IS-770 such that it will be run automatically and regularly. The simplest way to do this would be to hook it to continuous integration–but that may be impractical if the test requires compilers that are not present on some dev machines. Possibly we could make the IS-770 test exercise whatever compilers are present, but not fail on ones that are missing? Or possibly we could make the IS-770 test run automatically but not with every checkin, on a specialized machine?",Task,Medium,"To Develop","2018-06-13 16:39:43","2018-06-13 16:39:43",8
"Hyperledger Indy SDK","need to prove correctness of how-to code with each checkin","Today, the content under  [doc/how-tos|https://github.com/hyperledger/indy-sdk/tree/master/doc/how-tos] is stale and inaccurate. We can fix it once, but it will always be in danger of growing stale without us noticing, unless we force it to be updated regularly.    I suggest that we write a test that runs as part of the build, that works like this:   # Each how-to folder should follow a convention for how its sample code is named. I suggest that the convention be: have a file named template.<py|java|js|cs|etc> that has comments like //code for step 1 goes here; also have files named step1.<ext>, step2.<ext>, and so forth. You can see something that roughly matches this convention in https://github.com/hyperledger/indy-sdk/tree/master/doc/how-tos/issue-credential/java   # Have the test find each folder like this, and build a composite file by opening the template file and adding in the snippets from each step. Call the new file combined.<ext> and save it somewhere.   # Compare combined.<ext> with the other file in this folder, which is the hand-combined version of the sample code (in [https://github.com/hyperledger/indy-sdk/tree/master/doc/how-tos/issue-credential/java,] this would be the file named IssueCredential.java). These two files should be identical except for whitespace. If they are not, the test should fail with a message saying that the hand-written file is not the same as the algorithmically built combined.<ext>.   # Assuming we pass step 3, if the folder of code is for a compiled language, check to see if combined.<ext> compiles. If yes, consider the how-to code valid.   # For interpreted languages like python, check to see if combined.<ext> runs in a limited way. (Since some of these scripts would require a full pool to be running when the code executes, it's not clear to me whether we can afford to run the script to completion. I think the minimum goal would be to prove the same things that a compiled language would tell us–that all the methods exist and that we have the correct number of parameters to each. Possibly we could do this by simply finding method names and making sure they exist in the .py file we imported, or by doing a help() call on each method name to see if we're calling it correctly.) If combined.<ext> seems reasonable, consider the how-to code valid.   # The test should pass if it encounters no cases where the how-to sample code is considered invalid.",Task,Medium,"To Develop","2018-06-13 16:36:35","2018-06-13 16:36:35",8
"Hyperledger Indy SDK","Improve Rotate-key how-to in Python","Improve readme, add common errors, improve extra example of rotate_key (which is now in the old folder)         PR: https://github.com/hyperledger/indy-sdk/pull/871",Task,Medium,Complete,"2018-06-13 06:01:31","2018-06-13 06:01:31",2
"Hyperledger Indy SDK","Improve Write a DID and Query Its Verkey how-to in Python","To make existing how-to version work and provide common errors guide for newcomers.    PR: https://github.com/hyperledger/indy-sdk/pull/864",Task,Medium,Complete,"2018-06-11 07:21:53","2018-06-11 07:21:53",2
"Hyperledger Indy SDK","Documentation for Windows NodeJS wrapper","* Installatoin guide is not adapted for Windows terminal (file changes are required)  * 3-rd party software configuration is not described (missing npm packages, Visual Studio)",Task,Medium,"To Develop","2018-06-09 10:20:55","2018-06-09 10:20:55",3
"Hyperledger Indy SDK","Concern with BLS signature implementation","Details are contained here:    https://docs.google.com/document/d/14wcYSn9XXX6-0M5le1icT6N-funiB7K9cActzYfILto/edit",Task,High,Complete,"2018-06-08 13:45:46","2018-06-08 13:45:46",8
"Hyperledger Indy SDK","Wallet Enhancements: Merge Import/Export PRs","We need review and merge Wallet Import/Export PRs.    *Acceptance criteria*    - Code reviewed to satisfy indy-sdk architecture, code style and quality standards  - Documentation validated  - PR merged",Task,Medium,Complete,"2018-06-08 13:05:53","2018-06-08 13:05:53",3
"Hyperledger Indy SDK","As an app using LibIndy, I need to be able to work with both IndyNode 1.3 and IndyNode 1.4","As Indy Node 1.4 release contains breaking changes, it can work with the new clients supporting this changes only.    So, all requests from libindy to the pool need to be sent with a new protocolVersion.    *Acceptance criteria:*   * there is a global property PROTOCOL_VERSION in libindy which is used in every request to the pool (Request and LedgerStatus messages)   * by default PROTOCOL_VERSION=1 (for IndyNode 1.3, old one), so that by default LibIndy 1.5 will work with IndyNode 1.3, but not with IndyNode 1.4.   * add a method `indy_set_protocol_version()` (should be called during initialization of the app) which will set global PROTOCOL_VERSION which is passed to all requests   * add a check to `indy_open_pool`:   ** if PROTOCOL_VERSION=1, and the passed genesis txn file is in a new (1.4) format - raise an Error which will say to the user to call `indy_set_protocol_version(2)`   ** if PROTOCOL_VERSION=2, and the passed genesis txn file is in old (1.3) format - raise an Error which will say to the user to call `indy_set_protocol_version(1)`   * use PROTOCOL_VERSION=2 and the latest master in all integration tests",Task,High,Complete,"2018-06-07 08:29:40","2018-06-07 08:29:40",3
"Hyperledger Indy SDK","indy_build_get_txn_request should support ledger_id","SDK API call to build transaction read request *indy_build_get_txn_request* does not support to specify ledger_id as an argument.    It defaults to always read transactions from domain ledger.    We should be able to specify which ledger we want to read transactions from.    GET_TXN command on indy-node supports specifying ledger_id (Pool=0; Domain=1; Config=2)    Use case:  We want to write a script which would traverse through the pool ledger and retrieve some information about active/deleted validators (similar to what get_validator_info is doing, but with different output format)",Task,Medium,Complete,"2018-06-05 22:06:50","2018-06-05 22:06:50",3
"Hyperledger Indy SDK","Support new format of replies on write transactions","Build Info:  indy-node 1.3.440 master  indy-cli 1.4.0~551 master    Steps to Reproduce:  1. Install 1.3.440 pool.  2. Send any of writing txn (NYM, ATTRIB, SCHEMA, CRED_DEF) via ~551 indy-cli.  3. Check indy-cli data/metadata output.    Actual Results:  There are empty data/metadata fields in indy-cli (but all this fields are present in pool responce json and can be got by any of GET txns, see screenshots).    Expected Results:  Data/metadata fields should be filled according to pool responce info.",Task,Medium,Complete,"2018-06-05 15:50:03","2018-06-05 15:50:03",3
"Hyperledger Indy SDK","Support Indy-Node 1.3.440","Indy-Node 1.3.440 has pool_genesis_transactions file in the different format.   It is required to update genesis transactions in Libindy/wrappers/samples",Task,Medium,Complete,"2018-06-05 14:33:47","2018-06-05 14:33:47",2
"Hyperledger Indy SDK","Android: Review and merge Android Build PR","We need review and merge Android Build PR.    *Acceptance criteria*    - Code reviewed to satisfy indy-sdk architecture, code style and quality standards  - Build process tested  - Documentation validated  - Produced artifacts validated  - PR merged",Task,Medium,Complete,"2018-06-05 08:42:00","2018-06-05 08:42:00",5
"Hyperledger Indy SDK","Wallet Enhancement: Support new libsodium on Ubuntu","Libsoium 1.0.14 is needed for crypto_pwhash (and xchacha), but only old version is available in Ubuntu 10.04 (our main linux platform for the moment). I suggest the following:    - Add optional sodium_static feature to libindy build. Modify build.rs to try link statically if sodium_static is enabled  - sodium_static can be disabled by default  - Update CI/CD pipelines to install Libsoium 1.0.14 from sources inside of Docker  - Update CI/CD pipelines to build libindy with sodium_static=true  - Modify libindy debian package by removing libsodium dependency (or make it optional)  - Update build instruction for Ubuntu",Task,Medium,Complete,"2018-05-29 08:53:54","2018-05-29 08:53:54",3
"Hyperledger Indy SDK","Seeds must be used during payment address generation","*Steps to reproduce:*  payment-address create payment_method=null seed=123456789a123456789b  *Actual results:*  each execution generate new random address  *Expected results:*  Each execution generate the same payment address (also with handling  when they are generated for the same wallet)","New Feature",Medium,"To Develop","2018-05-28 07:50:12","2018-05-28 07:50:12",3
"Hyperledger Indy SDK","parse_responce_with_fees must be called after add_request_fees",,Task,Medium,Complete,"2018-05-25 16:45:35","2018-05-25 16:45:35",3
"Hyperledger Indy SDK","libnullpay must check relation between input UTXO and current wallet","Acceptance criteria:  * Added checking that each UTXO belongs to one of the payment address in current wallet.  * Transaction mustn't been sent to ledger if the condition is violated   * Added corresponding error handler (unknown UTXO)",Task,Medium,Complete,"2018-05-25 16:36:16","2018-05-25 16:36:16",2
"Hyperledger Indy SDK","Separate NACK/REJECT responses handling","Now libindy put together NACK and REJECT responses. It may results in problem, when some nodes responded with NACK, other part with REJECT. The f+1 (summary) response will be returned as total result, but consensus may not be reached neither on NACK or REJECT",Task,Medium,Complete,"2018-05-25 09:22:10","2018-05-25 09:22:10",3
"Hyperledger Indy SDK","Wallet Enhancement: Plugged storage tests","We need to provide integration/system tests for plugged storage.     *Acceptance criteria:*  - Coverage should be the same or better than DefaultWallet tests earlier  - Tests should be integration based on libindy API interface  ",Task,Medium,Complete,"2018-05-24 15:32:48","2018-05-24 15:32:48",5
"Hyperledger Indy SDK","Documentation: Provide getting started guide about payments","As Indy CLI User i need all-in-one document about payments (how to set fees, emit tokens, use payment addresses and make payments during work with ledger)    *Acceptance Criteria*  * document about main principles is exists and has links from main documentation  * document about setup and using fees and payments is exists and has links from main documentation. It can be modification of current GSG or separate document. All commands from _001-cli_ and _007-cli-payments_ must be mentioned  * relevant modification of existed GSG Jupiter book or creation of additional book","New Feature",Medium,Complete,"2018-05-24 14:39:15","2018-05-24 14:39:15",8
"Hyperledger Indy SDK","Wallet Enhancement: Master key generation","Wallet key for now can't be generated on application side and we need some way to achieve this. I see the following options:    1. indy_create_wallet() instead of consuming key can consume optional seed and return the key  2. We can add dedicated call indy_create_wallet_key()  3. We can generate the key based on pass phrase    Note that only passphrase support will allow to avoid breaking changes    *Acceptance Criteria*  * Design is done (exact behavior is defined)  * Corresponded code is written  * Integration tests are written and passed  * Code is merged and master build with the changes is issued  * iOS, Java, Python wrappers updated  * Community is requested to update NodeJS and .Net wrappers   * Documentation is updated",Task,Medium,Complete,"2018-05-24 12:59:58","2018-05-24 12:59:58",5
"Hyperledger Indy SDK","Wallet Enhancement: Hardening","**Acceptance criteria**    - WalletStorage/WalletService/DefaultStorage/PluggableStorage code is carefully reviewed  - Code quality is corresponds to our standards  - Tests coverage is corresponds to our standards",Task,Medium,Complete,"2018-05-24 12:46:49","2018-05-24 12:46:49",5
"Hyperledger Indy SDK","Performance: Support of short State Proofs",,Task,Medium,"To Develop","2018-05-24 12:45:34","2018-05-24 12:45:34",8
"Hyperledger Indy SDK","DKMS: Merge multiple Link Secrets PRs",,"New Feature",Medium,Complete,"2018-05-24 12:43:58","2018-05-24 12:43:58",3
"Hyperledger Indy SDK","NodeJS Wrapper: Merge NodeJS wrapper GSG PR",,"New Feature",Medium,Complete,"2018-05-24 12:43:27","2018-05-24 12:43:27",2
"Hyperledger Indy SDK","NodeJS Wrapper: Merge NodeJS wrapper CD PR","Publish artifacts for LibIndy and LibVCX.","New Feature",Medium,Complete,"2018-05-24 12:42:55","2018-05-24 12:42:55",5
"Hyperledger Indy SDK","NodeJS Wrapper: Merge NodeJS wrapper CI PR",,"New Feature",Medium,Complete,"2018-05-24 12:42:29","2018-05-24 12:42:29",3
"Hyperledger Indy SDK","Payments API: Support of StateProofs for custom transactions","*Task Overview*  Libindy requires custom code to handle StateProofs for each Node request.    Payments transactions will require StateProofs, but will be unknown for libindy. So we need to be able to plug code that handles StateProofs to libindy.    Exact behavior must be defined as design part of this task.    *Acceptance Criteria*  * Design is done (exact behavior is defined)  * Corresponded code is written  * Integration tests are written and passed  * Code is merged and master build with the changes is issued","New Feature",Medium,Complete,"2018-05-21 15:21:30","2018-05-21 15:21:30",8
"Hyperledger Indy SDK","Performance: libindy should close pool sockets if connection is unused","*Task Overview*  For the moment after calling indy_pool_open libindy keeps all Nodes sockets open until calling indy_pool_close. The most of existing apps keep pool opened, but send transactions very rarely.     It will cause keeping unnecessary connections on Indy Pool side. We need to close sockets if there are no requests to the pool. Also it can be good to don't perform to the whole pool is request allows getting StateProof.    Exact behavior must be defined as design part of this task.    *Acceptance Criteria*  * Design is done (exact behavior is defined)  * Corresponded code is written  * Integration tests are written and passed  * Code is merged and master build with the changes is issued",Task,Medium,Complete,"2018-05-21 15:04:02","2018-05-21 15:04:02",8
"Hyperledger Indy SDK","Performance: libindy should re-request only missed catch-up chunks","*Task Overview*  For the moment if there is no answer to some catch-up requests libindy just blacklists corresponded nodes and starts catch-up form scratch, but with reduced amount of nodes (request bigger chunks). It is obviously can cause multiple requests to all nodes during catch-up.     It will be much more efficient to re-request only missed catch-up chunks.    *Acceptance Criteria*  * Corresponded code is written  * Integration tests are written and passed  * Code is merged and master build with the changes is issued      Note:  It can be efficient to implement together with IS-570",Task,Medium,Complete,"2018-05-21 14:56:01","2018-05-21 14:56:01",5
"Hyperledger Indy SDK","Filesystem paths need to be configurable","h2. Problem statement    Currently the paths where configurations and wallets are searched for and saved to are hard-coded in {{EnvironmentUtils::indy_home_path}} and similar functions.  h2. Possible use cases   # Some of my wallets need to reside outside my user folder, for the following possible reasons:   ## I need to keep them in an external storage medium (e.g. USB key) for security and/or portability   ## I need to share them with other users (so put them in a folder shared with other users)   # My filesystem does not have that hard-coded path (e.g. Android)    Currently for use case 1 I need to mount the external/shared directory into the user home folder, while for use case 2 I need to clone the repo, change the hardcoded paths and recompile everything.  h2. Proposed solution 1    It would be better to have the following system to set the indy home path:   # An API (e.g. {{indy_set_home_path(const char*)}}); if this API has not been called yet when the path is needed, then   # An environment variable (e.g. {{INDY_HOME_PATH}}); if this variable is not set then   # A default system-specific path (as implemented now).    It would be even better to have the above system available at finer granularity, so that {{EnvironmentUtils::<whatever>_home_path}} (where {{<whatever>}} is currently either wallet or pool) can be controlled in the following ways:   # An API (e.g. {{indy_set_<whatever>_path(const char*)}}); if this API has not been called yet when the path is needed, then   # An environment variable (e.g. {{INDY_<WHATEVER>_PATH}}); if this variable is not set then   # The current default {{<EnvironmentUtils::indy_home_path>/<whatever>}}, where {{EnvironmentUtils::indy_home_path}} can be controlled as explained above.    If this is to be implemented, the ability to set the temporary directory in the same way as explained above for the home directory would make the feature more complete, but is arguably less useful in practical scenarios.  h2. Proposed solution 2 (just a sketch, based on the wallet storage proposal)    Filesystem management should not be done by {{libindy}}. Based on the single responsibility principle, this is outside its scope. The storage layer (which is controlled by the application) should take care of this. Thus, when creating a wallet, {{libindy}} should just ask the storage layer to create a wallet, and not store anything by itself. When listing wallets, {{libindy}} should ask all registered storage handlers to list the wallets they manage, and not look anything up by itself. And so on. In this way, storage layers would be responsible for all filesystem accesses, abstracting the filesystem away from libindy.","New Feature",Medium,Complete,"2018-05-15 10:49:57","2018-05-15 10:49:57",2
"Hyperledger Indy SDK","Payment Interface: Payment tests should be based on mocks instead of libnullpay","Currently we mix 2 concepts in libnullpay:    1. Behavior that emulates real payment system  2. Mocks    This solutions causes some technical and dev-UX problems:    - Mixing multiple conceptions  - Non-obvious for developers  - Cyclic dependencies  - Over-complicated builds    We discussed the following solution:    1. Remove mocks functionality from libnullpay  2. Make libnullpay dedicated top level artifact  3. Move mocks to libindy tests  4. Adopt tests to use mocks",Task,Medium,Complete,"2018-05-11 10:50:43","2018-05-11 10:50:43",3
"Hyperledger Indy SDK","Payment Interface: Ubuntu packages for libnullpay","As Indy Developer i need libnullpay to be available as a Ubuntu package.    *Acceptance Criteria*  * Package build script is written  * Package build script is integrated to CI  * Package can be successfully installed  ","New Feature",Medium,Complete,"2018-05-10 15:30:56","2018-05-10 15:30:56",3
"Hyperledger Indy SDK","Payment Interface: Windows packages for libnullpay","As Indy Developer i need libnullpay to be available as a Windows package.    *Acceptance Criteria*  * Package build script is written  * Package build script is integrated to CI  * Package can be successfully installed","New Feature",Medium,Complete,"2018-05-10 15:30:43","2018-05-10 15:30:43",3
"Hyperledger Indy SDK","Libnullpay: libnulpay should provide experience similar to real payments system","Currently libnullpay","New Feature",Medium,Complete,"2018-05-10 13:18:21","2018-05-10 13:18:21",8
"Hyperledger Indy SDK","Payments CLI: Better error handling in CLI payments commands","CLI should differentiate all payments related errors. See IS-694 results to get errors list","New Feature",Medium,Complete,"2018-05-10 12:59:28","2018-05-10 12:59:28",3
"Hyperledger Indy SDK","Payments API: Better error handling in Payments API","We discussed that some error cases must be checked on libindy level (not on pluggin level):    - Payment method consistency  - Inputs and outputs aren't empty  - Inputs and outputs are unique  - Outputs amount is less than inputs amount    We also need define error codes for:    - No PA key in the wallet  - Insufficient funds for fees","New Feature",Medium,Complete,"2018-05-10 12:48:58","2018-05-10 12:48:58",3
"Hyperledger Indy SDK","Resolve Fedora 28 build issues","Primarily issues related to libsodium >= 1.0.16, which seems to have removed crypto methods that are used in libindy.",Sub-task,Medium,Complete,"2018-05-07 21:48:59","2018-05-07 21:48:59",4
"Hyperledger Indy SDK","Add structure to the 'Save Schema and Credential Definition' how-to in Python","Java version is available here: [https://github.com/hyperledger/indy-sdk/tree/master/doc/how-tos/save-schema-and-cred-def/java]    Python version is here: [https://github.com/hyperledger/indy-sdk/tree/master/doc/how-tos/save-schema-and-cred-def/python]    However, the Python version does not have a structure as the first how-to: [https://github.com/hyperledger/indy-sdk/blob/master/doc/how-tos/write-did-and-query-verkey/README.md|https://github.com/hyperledger/indy-sdk/blob/master/doc/how-tos/write-did-and-query-verkey/python/README.md]    In particular, it does not have README, template and steps files.",Task,Medium,Complete,"2018-05-07 19:31:07","2018-05-07 19:31:07",2
"Hyperledger Indy SDK","Payments CLI: CLI tests for payment address managing commands",,"New Feature",Medium,Complete,"2018-05-07 15:10:07","2018-05-07 15:10:07",2
"Hyperledger Indy SDK","Payments CLI: CLI tests for payments-related transactions","We need to provide integration tests for CLI payments-related transactions commands","New Feature",Medium,Complete,"2018-05-07 14:04:37","2018-05-07 14:04:37",2
"Hyperledger Indy SDK","Payments CLI: CLI tests for transactions fees functionality","We need to provide integration tests for CLI transactions fees functionality.","New Feature",Medium,Complete,"2018-05-07 14:01:14","2018-05-07 14:01:14",2
"Hyperledger Indy SDK","Payments CLI: CLI tests for pluggins support","We need to provide integration tests for CLI plugging loading functionality.","New Feature",Medium,Complete,"2018-05-07 13:59:25","2018-05-07 13:59:25",2
"Hyperledger Indy SDK","Payments API: Transactions multi-signatures support","Payments-related transactions for minting or setting of txns fees can require multi-signature. Indy Node supports multi-signatures and we need to provide this functionality in SDK:    * I expect that there will be dedicated API endpoint called indy_multi_sign_request  * High and medium tests coverage will be provided","New Feature",Medium,Complete,"2018-05-07 13:46:29","2018-05-07 13:46:29",3
"Hyperledger Indy SDK","Re-struct rotate key how-to in Python","Java version is available here: [https://github.com/hyperledger/indy-sdk/blob/master/doc/how-tos/rotate-key/java/README.md]    Python version is here: [https://github.com/hyperledger/indy-sdk/tree/master/doc/how-tos/rotate-key/python]    However, the Python version does not have structure as the first how-to: [https://github.com/hyperledger/indy-sdk/blob/master/doc/how-tos/write-did-and-query-verkey/README.md|https://github.com/hyperledger/indy-sdk/blob/master/doc/how-tos/write-did-and-query-verkey/python/README.md]    In particular, it does not have: README, template and steps files.",Task,Medium,Complete,"2018-05-06 14:47:19","2018-05-06 14:47:19",2
"Hyperledger Indy SDK","Performance: Understand why tails generation seems too slow","We got the following feedback from community:    Generating tails files takes a *LOOOONG* time. I average about 0.25 sec per maximum credential limit (for issue on demand -- by default is slower) on an Ubuntu 16 VM with 4GB RAM. For example, suppose a medium-sized province may need up to 4 million drivers licences. That's eleven days of compute time, however we want to split it up (more, smaller tails files mean shorter, more frequent delays in credential generation). A developer innocently using the default value of 100000 can effectively hang his box for 7 hours. Surely that can't be the design intent, but I don't see what else I should have done.    Is it expected that indy-sdk will only run on big iron? I don't know what we've specified on the server side for production, but this single operation is MANY ORDERS of magnitude more expensive than anything else in the toolkit, so supporting revocation might bring the house down, yet this is definitely a feature we need.    Does it work appreciably faster for anyone out there, and if so what parameters work well for you? Or else, what is a good tactic to pre-compute tails files before an existing revocation registry is full? Again I come back to needing a way to query how many credentials are issued against an existing revocation registry _(although that might degrade non-correlation? My grasp of the information theory here is sketchy)","New Feature",Medium,Complete,"2018-05-03 13:48:45","2018-05-03 13:48:45",3
"Hyperledger Indy SDK","Review Anoncreds JSONs format for correctness data representation","In both SDK and Crypto  JSON is used represent Anoncreds data. There are some places where we use JSON object, but data (values of fields) should be ordered.    In scope of this ticket our approach should be reviewed. Possible problems and scope of refactoring should be determined. If applicable, low-level tests should be added to illustrate error scenario.",Task,Medium,Complete,"2018-05-03 11:04:26","2018-05-03 11:04:26",5
"Hyperledger Indy SDK","Support new transaction format","In the scope of INDY-1123, we've been changing the format of transactions:  see https://github.com/hyperledger/indy-node/blob/master/docs/transactions-new.md#common-structure    We need to support it in SDK in a way that both old and new formats are supported.  This is needed to be able to use SDK in tests on Node.    Please note that format of Requests is not changed.",Task,Medium,Complete,"2018-05-03 09:23:05","2018-05-03 09:23:05",3
"Hyperledger Indy SDK","Java wrapper:Support non-secrets API",,"New Feature",Medium,Complete,"2018-04-26 16:39:03","2018-04-26 16:39:03",3
"Hyperledger Indy SDK","Enterprise Libindy: Implement load test that simulates agency load","Add load test into libindy for one of agency scenario:  * multiply agents use their own wallets  * encrypt (decrypt) fixed size data in parallel    Test should measure average delay for SDK API call","New Feature",Medium,Complete,"2018-04-26 16:30:37","2018-04-26 16:30:37",3
"Hyperledger Indy SDK","Add missing licenses","These binary artifacts do not contain a license. We should add one:    Deb's (via apt show):  * libindy  * libindy-crypto    PyPi (search by indy keyword and maintainer):  * indynotifieremail    iOS pods:  * libindy-objc.zip and  * libindy.tar.gz doesn't contain any mention of license    Note:  There are also some Sovrin artifacts that do not have license files in the binary distribution:  * sovringui  * sovrin_installer  * sovrinnotifieremail",Task,Medium,Complete,"2018-04-26 15:11:22","2018-04-26 15:11:22",5
"Hyperledger Indy SDK","Tokens Interface: CLI user should be able to send payment-related transactions","As Indy Developer i need to be able to send payment related transactions.    *Acceptance Criteria*  * CLI provides commands for sending get_utxo, mint, xfer, fees, set_fees transactions  * It works with libnullpay  * It works on Windows and Ubuntu","New Feature",Medium,Complete,"2018-04-25 16:34:20","2018-04-25 16:34:20",3
"Hyperledger Indy SDK","Tokens Interface: CLI user should be able to assign fees to Ledger transactions","As Indy CLI User i need to be able to assign fees to domain transactions.    *Acceptance Criteria*  * CLI provides the way to assign fees to domain transactions  * It works with libnullpay  * It works on Windows and Ubuntu","New Feature",Medium,Complete,"2018-04-25 16:29:10","2018-04-25 16:29:10",3
"Hyperledger Indy SDK","Tokens Interface: CLI user should be able to register custom payments and wallets pluggins","As Indy CLI User i need to be able to register custom pluggins.    *Acceptance Criteria*  * CLI provides the way to register custom pluggins  * It works with libnullpay  * It works on Windows and Ubuntu","New Feature",Medium,Complete,"2018-04-25 16:26:20","2018-04-25 16:26:20",3
"Hyperledger Indy SDK","Tokens Interface: CLI user should be able to manage payment addresses in CLI","As Indy Developer i need to be able to manage payment addresses through CLI.    *Acceptance Criteria*  * CLI provides commands for PA creation and listing  * It works with libnullpay  * It works on Windows and Ubuntu","New Feature",Medium,Complete,"2018-04-25 16:25:42","2018-04-25 16:25:42",3
"Hyperledger Indy SDK","Payments Interface: iOS wrapper",,"New Feature",Medium,Complete,"2018-04-25 15:00:10","2018-04-25 15:00:10",3
"Hyperledger Indy SDK","Payment Interface: Python wrapper",,"New Feature",Medium,Complete,"2018-04-25 14:59:48","2018-04-25 14:59:48",3
"Hyperledger Indy SDK","Payments Interface: Java wrapper",,"New Feature",Medium,Complete,"2018-04-25 14:59:26","2018-04-25 14:59:26",3
"Hyperledger Indy SDK","Performance: Design multi-threaded LibIndy","*Story*  As a developer building an Enterprise Agent, I want LibIndy to manage agent communication in separate threads so that it can handle concurrent communication in an efficient manner.    This story is about design how-to achieve this goal.    *Acceptance Criteria*  * Design is created and approved  * Implementation scope is defined  * Corresponded user stories created  * Design should allow libIndy simultaneously communicate with 10s of other agents without a reduction in performance.","New Feature",High,Complete,"2018-04-25 14:50:54","2018-04-25 14:50:54",8
"Hyperledger Indy SDK","PoolLedger: Design StateProof logic for new use cases","This ticket is aggregation of new use cases near state proofs, which wasn't be considered in initial approach.   # Multiply StateProofs in single response   # Plugged StateProof checking (parsing?)   # Predefined (on Request) path in Trie",Task,Medium,"To Develop","2018-04-25 11:12:28","2018-04-25 11:12:28",5
"Hyperledger Indy SDK","Release: Prepare the 1.5 release of IndySDK","*Task Overview*  Perform all necessary tasks in order to release LibIndy 1.5    *Acceptance Criteria*  * Code is tested  * Release is tagged  * Release notes are drafted  * Release notes are reviewed by Docs and Product Management    *Notes*  * Release notes need to highlight the wallet format changes (see IS-654)",Task,Medium,Complete,"2018-04-24 14:38:21","2018-04-24 14:38:21",8
"Hyperledger Indy SDK","iOS wrapper: Tests refactoring","We need to refactor iOS wrapper integration tests    Motivation: iOS wrapper integration tests are bad quality.   We spend much more time to add/change tests here than for Python/Java.","New Feature",Medium,Complete,"2018-04-24 09:30:10","2018-04-24 09:30:10",3
"Hyperledger Indy SDK","Release: Release Indy SDK 1.4 with revocation support","We need to release new Libindy with:  * Revocation  * CLI  * New crypto API  * A lot of bugfixes    What we need for release:  * Decide what version we need to release with Nathan: will be LibIndy 1.4  * Merge current opened PRs for documentation  * Switch to Stable Node version  * Update release notes  ** This release is not recommended for use in production. We do not yet have a migration process between versions and we know wallet format changes are coming.  ** Release notes need to clarify that anoncred format changed, and anoncreds have to be reissued.  ** Release notes need to clarify that there will be format changes in LibIndy 1.5: plugable storage and new encryption format  * Acceptance testing    Note:  * Official publication of the release will wait until we have approval from Nathan.",Task,Medium,Complete,"2018-04-20 15:39:22","2018-04-20 15:39:22",5
"Hyperledger Indy SDK","Tokens Interface: Design CLI payments support","CLI must be the tool that allows to produce the most of payment operations. We need to define:    - The list of payment related commands  - Design how to load payment plugins","New Feature",Medium,Complete,"2018-04-19 14:47:52","2018-04-19 14:47:52",5
"Hyperledger Indy SDK","DOC: Request for release notes on Indy-SDK 1.4.0","This ticket should contain link to Libindy migration Guide as soon as this guide will be in master (now it is available in https://github.com/<USER>indy-sdk/blob/7b79324e49ce75fa95db9c51f644f32bb12803bc/doc/migration-guide.md).    UPD: Migration Guide has been merged to master. Link: https://github.com/hyperledger/indy-sdk/blob/master/doc/migration-guide.md",Task,Medium,Complete,"2018-04-18 15:13:16","2018-04-18 15:13:16",1
"Hyperledger Indy SDK","[Release] Indy SDK release notes and migration guide",,Task,Medium,Complete,"2018-04-16 13:35:38","2018-04-16 13:35:38",3
"Hyperledger Indy SDK","Logging: By default, no logs should be written to stdout","Currently log messages from the libindy library are written to stdout by default.  This can be modified by setting environment variables, but this should not be the default. If logging is not otherwise configured in an application that uses libindy, it should be sent to a default file or it should be silent.    Proper configuration of logging should be documented.","New Feature",Medium,Complete,"2018-04-12 17:04:29","2018-04-12 17:04:29",2
"Hyperledger Indy SDK","Revocation: handle State Proofs for Revocation transactions","There are new transaction types for Revocation and state proof logic in SDK should be updated to handle its.  For special case with multiply stateproof in one response please see dedicated ticket.",Task,Medium,Complete,"2018-04-12 14:31:41","2018-04-12 14:31:41",3
"Hyperledger Indy SDK","Add contributor onboarding steps for those who want to contribute from the community","I've recently onboarded myself onto the hyperledger indy-sdk, and I've documented all the challenging steps (setting up gpg commits, building libindy, pointing people to the right getting-started guide). I'll submit a readme document for contributors to be onboarded without as much headache.","New Feature",Medium,Complete,"2018-04-11 18:15:22","2018-04-11 18:15:22",1
"Hyperledger Indy SDK","Token Interface: Tokens-related transactions builders integration tests",,"New Feature",Medium,Complete,"2018-04-06 13:48:40","2018-04-06 13:48:40",3
"Hyperledger Indy SDK","Tokens Interface: Add request fees call integration tests",,"New Feature",Medium,Complete,"2018-04-06 13:46:00","2018-04-06 13:46:00",3
"Hyperledger Indy SDK","Tokens Interface: Register tokens handler call integration tests",,"New Feature",Medium,Complete,"2018-04-06 13:27:32","2018-04-06 13:27:32",3
"Hyperledger Indy SDK","Tokens Interface: Payment address calls integration tests",,"New Feature",Medium,Complete,"2018-04-06 13:26:41","2018-04-06 13:26:41",3
"Hyperledger Indy SDK","Tokens Interface: 3d party non-secrets wallet interface integration tests",,"New Feature",Medium,Complete,"2018-04-06 13:25:21","2018-04-06 13:25:21",5
"Hyperledger Indy SDK","Tokens Interface: Null payment handler for tests",,"New Feature",Medium,Complete,"2018-04-06 13:22:03","2018-04-06 13:22:03",5
"Hyperledger Indy SDK","Tokens Interface: Register tokens handler call",,"New Feature",Medium,Complete,"2018-04-06 13:20:26","2018-04-06 13:20:26",5
"Hyperledger Indy SDK","Token Interface: Tokens-related transactions builders","Implement calls:  * build_payment_txn  * build_fees_txn  * build_get_fees_txn  * build_get_utxo_txn  * build_mint_txn","New Feature",Medium,Complete,"2018-04-06 13:18:53","2018-04-06 13:18:53",5
"Hyperledger Indy SDK","Tokens Interface: Add request fees call","Implement methods:    * add_request_fees  * parse_response_with_fees","New Feature",Medium,Complete,"2018-04-06 13:14:18","2018-04-06 13:14:18",3
"Hyperledger Indy SDK","Tokens Interface: Payment address calls","Implement calls:  * create_payment_address  * list_payment_addresses","New Feature",Medium,Complete,"2018-04-06 13:12:54","2018-04-06 13:12:54",3
"Hyperledger Indy SDK","Tokens Interface: 3d party non-secrets wallet interface",,"New Feature",Medium,Complete,"2018-04-06 13:11:14","2018-04-06 13:11:14",5
"Hyperledger Indy SDK","Tokens Interface: Handlers infrastructure",,"New Feature",Medium,Complete,"2018-04-06 13:10:06","2018-04-06 13:10:06",5
"Hyperledger Indy SDK","Tokens Interface: Design Tokens Interface","Design Tokens Interface:    * Payment API  * Payment Handler API finalization  * Handlers Infrastructure design","New Feature",Medium,Complete,"2018-04-06 13:08:32","2018-04-06 13:08:32",8
"Hyperledger Indy SDK","Wallet Enhancements: Review test procedure after integration",,"New Feature",Medium,Complete,"2018-04-04 10:54:33","2018-04-04 10:54:33",3
"Hyperledger Indy SDK","Wallet Enhancements: Integration tests for new Wallet API",,"New Feature",Medium,Complete,"2018-04-04 10:54:06","2018-04-04 10:54:06",0
"Hyperledger Indy SDK","Wallet Enhancements: Fix regressions in integration tests",,"New Feature",Medium,Complete,"2018-04-04 10:51:02","2018-04-04 10:51:02",0
"Hyperledger Indy SDK","Wallet Enhancements: Integration of WalletService changes to Anoncreds commands",,"New Feature",Medium,Complete,"2018-04-04 10:45:31","2018-04-04 10:45:31",0
"Hyperledger Indy SDK","Wallet Enhancements: Integration of WalletService changes to Wallet commands",,"New Feature",Medium,Complete,"2018-04-04 10:44:14","2018-04-04 10:44:14",3
"Hyperledger Indy SDK","Wallet Enhancements: Integration of WalletService changes to Pool commands",,"New Feature",Medium,Complete,"2018-04-04 10:43:45","2018-04-04 10:43:45",3
"Hyperledger Indy SDK","Wallet Enhancements: Integration of WalletService changes to Pairwise commands",,"New Feature",Medium,Complete,"2018-04-04 10:43:31","2018-04-04 10:43:31",3
"Hyperledger Indy SDK","Wallet Enhancements: Integration of WalletService changes to Ledger commands",,"New Feature",Medium,Complete,"2018-04-04 10:43:13","2018-04-04 10:43:13",3
"Hyperledger Indy SDK","Wallet Enhancements: Integration of WalletService changes to Crypto commands",,"New Feature",Medium,Complete,"2018-04-04 10:42:22","2018-04-04 10:42:22",3
"Hyperledger Indy SDK","Wallet Enhancements: Integration of WalletService changes to DID commands",,"New Feature",Medium,Complete,"2018-04-04 10:42:03","2018-04-04 10:42:03",3
"Hyperledger Indy SDK","Wallet Enhancements: Wallet API refactoring","Wallet API requires to be adopted to new wallet concept:  * create_wallet/open_wallet will get updated params  * register_wallet_type will be replaced with register_storage_type call","New Feature",Medium,Complete,"2018-04-04 10:38:18","2018-04-04 10:38:18",5
"Hyperledger Indy SDK","Wallet Enhancements: Integration of wallet encryption code  to libindy codebase",,"New Feature",Medium,Complete,"2018-04-04 10:15:14","2018-04-04 10:15:14",0
"Hyperledger Indy SDK","Wallet Enhancements: Integration of Darko's team changes",,"New Feature",Medium,Complete,"2018-04-04 10:12:17","2018-04-04 10:12:17",3
"Hyperledger Indy SDK","Wallet Enhancements: Integration of WalletService to libindy codebase","We have WalletService and WalletStorage interfaces in private codenase and need to integrate it to libindy development process.     For the beginning to long-living feature branch.    It can require some refactoring and fixes to WalletService/WalletStorage interfaces","New Feature",Medium,Complete,"2018-04-04 10:09:35","2018-04-04 10:09:35",3
"Hyperledger Indy SDK","Wallet Enhancements: Design","We need to finalize design for our Wallet Enhancement plans:  * Better encryption on libindy level  * Replacing of plugged wallet concept with plugged storage concept  * Efficient and flexible search with tags  * Ability to store 3d-party non-secrets in the wallet    We already have some design vision, but still need:    * Design wallet barrier, how to split secrets and 3d-party non-secrets  * Finalize storage interface  * Finalize internal wallet service interface  * Updates to existing Wallet endpoints  * register_wallet_storage endpoint","New Feature",Medium,Complete,"2018-04-04 09:39:47","2018-04-04 09:39:47",5
"Hyperledger Indy SDK","Add a description at the top of the indy-sdk repository on github","There is no description for the indy-sdk repository at the top of the page. Perhaps just repeating the first line of the readme would be useful for people who have just landed on the page. Something like This is the official SDK for [Hyperledger Indy|https://www.hyperledger.org/projects], which provides a distributed-ledger-based foundation for [self-sovereign identity|https://sovrin.org/]. ","New Feature",Medium,Complete,"2018-03-27 15:02:40","2018-03-27 15:02:40",1
"Hyperledger Indy SDK","Investigate DID Design for SDK","The SDK needs to support the standard for DID Doc.    *Acceptance Criteria*  * Investigate the DID Doc standard.  * Create a Plan of Attack (POA) for bringing our implementation inline with the standard.  * Create the relevant issues.",Task,Medium,Complete,"2018-03-27 14:35:05","2018-03-27 14:35:05",8
"Hyperledger Indy SDK","Anoncreds API: Support versioning of Anoncreds entities/transactions","We need to support Anoncreds transactions and protocol entities versioning for smooth integration with Indy Node without breaking changes:    - Node supports old versions of SCHEMA and CRED_DEF transactions only and we don't plan to perform breaking changes for few month  - But new Anoncreds API uses new versions of SCHEMA and CRED_DEF transactions    We suggest the following:    - all anoncreds calls should support old and new version of Anoncreds transactions. There will be internal calls \{entity}_to_sdk_version() that will be used to update version of Anoncreds entity to the current sdk version.  - Transaction builders should also accept any version of anoncreds entity and convert it to version supported by ledger by calling \{entity}_to_ledger_version()","New Feature",Medium,Complete,"2018-03-27 13:36:51","2018-03-27 13:36:51",5
"Hyperledger Indy SDK","Pool API: Ability to choose which node to sent request to in case of BLS enabled","It should be possible to choose which node to use during submit req via api","New Feature",Medium,Complete,"2018-03-27 13:29:28","2018-03-27 13:29:28",3
"Hyperledger Indy SDK","Pool API: Ability to control pool response timeout and number of attempts to resend request in case of fails","It would be helpful to control (read and write) timeout value for pool response and number of attempts to resend request in case of fail.  ","New Feature",High,Complete,"2018-03-27 09:47:52","2018-03-27 09:47:52",3
"Hyperledger Indy SDK","Need to remove TGB role from libindy and indy-cli","We are still able to add TGB role via indy-cli (master) and libindy (master) still supports it so we need to remove this role from everywhere.",Task,Low,Complete,"2018-03-19 12:24:13","2018-03-19 12:24:13",3
"Hyperledger Indy SDK","Revocation: Indy Node integration","I am expecting here:   - Demo test for libindy and each wrapper that covers complete Anoncreds workflow with Node transactions",Task,Medium,Complete,"2018-03-14 19:03:50","2018-03-14 19:03:50",3
"Hyperledger Indy SDK","Revocation: Medium cases integration tests","We need to implement medium cases integration tests for Revocation functionality. Note that we need medium cases for libindy only. Wrappers should provide high-cases only.",Task,Medium,Complete,"2018-03-14 18:13:11","2018-03-14 18:13:11",8
"Hyperledger Indy SDK","Anoncreds API: Docs , GSG and samples update","We need to update according to our latest changes:   - Getting Started Guide update   - All anoncreds related docs and diagrams   - Java and Python revocation samples",Task,Medium,Complete,"2018-03-14 18:11:13","2018-03-14 18:11:13",5
"Hyperledger Indy SDK","Anoncreds API: API simplification and entities renaming","Latest Anoncreds design proposal suggests some API simplification and entities renaming. Main reasons are:    1. Better understanding by developers  2. Avoid forcing CL-specific API",Task,Medium,Complete,"2018-03-14 17:41:21","2018-03-14 17:41:21",3
"Hyperledger Indy SDK","Anoncreds API: Avoid persisting of CredOffer and CredRequest","After discussion with Deniel we decided to don't persist intermediate steps entities. They can be persisted on application level if needed and naturally maped to each other by Topic-ID of agents communication protocol.    API must be as state less as possible, except secrets and credentials.",Task,Medium,Complete,"2018-03-14 17:37:58","2018-03-14 17:37:58",3
"Hyperledger Indy SDK","Revocation: Change abstraction for tails acсess","We need to perform some refactoring of Anoncreds API to correspond the latest design:   - tails_reader abstraction should be replaced with blob_storage_reader abstraction    The main purpose is doesn't force one revocation workflow, but be able to implement new approaches without breaking API changes.",Task,Medium,Complete,"2018-03-14 16:24:29","2018-03-14 16:24:29",3
"Hyperledger Indy SDK","A Steward needs to be able to get validator-info from all nodes","We need to support GET_VALIDATOR_INFO request in libindy and CLI","New Feature",Medium,Complete,"2018-03-14 14:11:49","2018-03-14 14:11:49",3
"Hyperledger Indy SDK","A Trustee needs to be able to restart the pool in critical situations","We need to support RESTART_POOL request in libindy and CLI","New Feature",Medium,Complete,"2018-03-14 14:07:51","2018-03-14 14:07:51",3
"Hyperledger Indy SDK","Update Jenkins file for windows to use new deps folder","When the windows dependencies will be moved to a new folder structure as a part of IS-584, existing Jenkins build pipeline for windows target will fail.  Update the Jenkins file according to the new folder structure.",Task,Medium,Complete,"2018-03-13 06:08:19","2018-03-13 06:08:19",2
"Hyperledger Indy SDK","Upload prebuilt dependency binaries for Android","These prebuilt dependencies are required to build Android binary of libindy.    With this, I also propose to use a new folder structure to better organise the prebuilt dependencies. This structure was finalised when [~<USER> and I was discussing build mechanism and I think [~<USER> also agrees with this.    The new folder structure is as follows     indy-sdk-prebuilt-deps  ├── master  │   ├── android  │   │   ├── aarm64  │   │   ├── armv7  │   │   └── x86  │   ├── ios  │   ├── linux  │   ├── osx  │   └── windows  ├── rc  └── stable    The existing prebuilt deps for windows should be moved in this folder.    Link for zipped folder with android deps. It does not have the windows deps.  Link: https://drive.google.com/file/d/1kpmiE64atfoNPpokHJ0IVYt2PhIXKnKr/view?usp=sharing    Link: [How to build dependencies for Android ARMv7|https://docs.google.com/document/d/1HhVc0uwUR_aY9Y_kZD6o-XeZeLTXXlW5jJ0bqVxI_PI/edit#heading=h.9x7ip1seclab]  ",Task,Medium,Complete,"2018-03-13 06:02:37","2018-03-13 06:02:37",2
"Hyperledger Indy SDK","Add Android build to Libindy CI pipeline",,Task,Medium,Complete,"2018-03-06 09:05:32","2018-03-06 09:05:32",0
"Hyperledger Indy SDK","Docs: Need better documentation on how to start application development with Libindy","We are miss clear instruction on how to start development with libindy on different platforms and programming languages.    I suggest to add section to documentation that will describe:    1. How to install libindy on all supported platforms  2. How to install wrapper for all programming languages  3. How to start local Indy Pool in docker on all supported platforms","New Feature",High,Complete,"2018-03-02 21:44:32","2018-03-02 21:44:32",5
"Hyperledger Indy SDK","Performance: libindy shoud persist pool leger state for faster catch-up","*Task Overview*  For current moment libindy always starts catchup from scratch. The process can be significantly optimized by storing of actual pool ledger at the end of catch-up process and starting from this point on the next time.    *Acceptance Criteria*  * Corresponded code is written  * Manual testing for a complex scenario with a large pool  * Integration tests for simple scenarios are written and passed (complex scenarios are covered in a separate story)  * Code is merged and master build with the changes is issued    Note:  * It can be efficient to implement together with IS-655  * Complex integration tests are covered in a separate story",Task,Medium,Complete,"2018-02-16 11:36:33","2018-02-16 11:36:33",5
"Hyperledger Indy SDK","Crypto: Release the library with updated Revocation support",,Task,Medium,Complete,"2018-02-12 09:48:48","2018-02-12 09:48:48",2
"Hyperledger Indy SDK","Indy SDK should depends on stable IndyCrypto",,Task,Medium,Complete,"2018-02-12 09:48:13","2018-02-12 09:48:13",1
"Hyperledger Indy SDK","Revocation: Indy Crypto FFI API changes","Indy Crypto should not operate whole object with all Tails. Right now it's RevocationRegistryPublic::tails.  Instead of it, Crypto can consume callback to retrieve one tail by index when needed.  Also Issuer::new_revocation_registry API will be affected. It may return public part of the registry without tails and also one more method for generating part of the tails is needed.","New Feature",Medium,Complete,"2018-02-09 11:56:36","2018-02-09 11:56:36",5
"Hyperledger Indy SDK","Support the latest pool","Need to update Libindy tests to work with Indy-Node 1.2.297 version",Task,Medium,Complete,"2018-02-07 11:55:34","2018-02-07 11:55:34",2
"Hyperledger Indy SDK","Need a 32-bit build of libindy which has overflow check disabled","The issue is captured in the conversation below:    khagesh [2:32 PM]  @vyacheslav.<USER>@sminaev We are facing issue with iphone 5 ios 10.3.1 that we are not able to establish connection with pool. This is the error that we get  ``` Pool create callback is triggered.   INFO|indy::commands                |                src/commands/mod.rs:107 | PoolCommand command received   INFO|pool_command_executor         |               src/commands/pool.rs:62  | Open command received  thread '<unnamed>' panicked at 'attempt to multiply with overflow', /Users/DSR/.cargo/registry/src/github.com-1ecc6299db9ec823/amcl-0.1.2/src/big.rs:974:42  note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.  stack backtrace:     0: std::sys::imp::backtrace::tracing::imp::unwind_backtrace     1: std::panicking::default_hook::{{closure}}     2: std::panicking::default_hook     3: std::panicking::rust_panic_with_hook     4: std::panicking::begin_panic     5: std::panicking::begin_panic_fmt     6: rust_begin_unwind     7: core::panicking::panic_fmt     8: core::panicking::panic     9: amcl::big::BIG::monty    10: amcl::big::BIG::modulo    11: amcl::fp::FP::mul    12: amcl::fp2::FP2::sqr    13: amcl::ecp2::ECP2::rhs    14: amcl::ecp2::ECP2::new_fp2s    15: amcl::ecp2::ECP2::frombytes    16: indy_crypto::pair::PointG2::from_bytes    17: indy_crypto::bls::VerKey::from_bytes    18: indy::services::pool::<impl indy::services::pool::types::RemoteNode>::new    19: indy::services::pool::PoolWorker::connect_to_known_nodes    20: indy::services::pool::PoolWorker::init_catchup    21: indy::services::pool::PoolWorker::_run    22: indy::services::pool::PoolWorker::run    23: indy::services::pool::Pool::new::{{closure}}  DEBUG|zmq_pw                        |/Users/DSR/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-pw-0.9.8/src/lib.rs:367 | context dropped  DEBUG|zmq_pw                        |/Users/DSR/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-pw-0.9.8/src/lib.rs:460 | socket dropped   INFO|indy::commands                |                src/commands/mod.rs:115 | WalletCommand command received   INFO|wallet_command_executor       |             src/commands/wallet.rs:75  | Create command received  TRACE|indy::services::wallet::default|     src/services/wallet/default.rs:147 | DefaultWalletType.create >> connectMeWallet, with config None and credentials None  TRACE|indy::services::wallet::default|     src/services/wallet/default.rs:157 | DefaultWalletType.create <<  2018-01-31 14:29:15.341 ConnectMe-demo[24596:7921005] CMWalletObject::CreateAndOpen - Received create wallet callback with error: 0  ```  You can reproduce it by cloning master branch of `http://github.com/evernym/connect-me-indy-wrapper/` and running test `testWalletAndPool`. This works fine with iphone 5s and above but for iphone5 and iphone5c it breaks with above error    vyacheslav.<USER>[2:51 PM]  @khagesh Do you use debug build of libindy? As warkaround you can switch to release build.    sminaev [2:57 PM]  @khagesh I'm not familar with iOS devices, could you confirm please: iphone5 and 5c is 32bit and iphone 5s and later is 64 bit?    sminaev [2:59 PM]  the workaround mentoined above is possible, we can switch to  release build without arithmetic checks. But we should understand the reason of the problem to avoid possible issues. (edited)    vyacheslav.<USER>[3:00 PM]  iphone 5 is 32bit    khagesh [3:00 PM]  yes both iphone 5 and 5c are 32 bit    vyacheslav.<USER>[3:00 PM]  As result bignums use different math    We fixed amcl debug builds only for 64bit platforms    Do we really need to support iphone 5? It seams like a totally dead platform.      khagesh [3:03 PM]  @tyler :this: Libindy team needs to do some extra stuff to support iphone 5 & iphone 5c. Do we need it? @vyacheslav.<USER>how much effort do you think it will take to fix this bug.   vyacheslav.<USER>[3:07 PM]  In theory we support 32bit already, but you need to use release build without overflow checks included.    For debug builds support we will need spend few days as we need to release amcl, indy crypto and libindy    @sminaev do we have release build of libindy for iOS?    sminaev [3:13 PM]  right now libindy is built as debug and included to release iOS indy wrapper. As result with math containing arithmetic checks (edited)    vyacheslav.<USER>[3:13 PM]  May be just re-build it in release in the background?    sminaev [3:15 PM]  I'm not sure that current error is just unnecessary overflow check. It may be real problem in 32bit math    vyacheslav.<USER>[3:29 PM]  @sminaev I suggest to add task about 32bit platforms support. We can add it to our next sprint. If Tyler will decide that it isn't big problem for us we can postpone it.    sminaev [3:33 PM]  After brief review this particular error seems like unnecessary overflow check. So we can try to re-build release variant of the pod","New Feature",Medium,Complete,"2018-02-05 20:25:35","2018-02-05 20:25:35",3
"Hyperledger Indy SDK","Revocation: Indy SDK API design","We need to design new Indy SDK API that will solve revocation related problems we have now:    1. Compatibility with ledger entities structure   2. Ability to re-calculate witness data on cloud agent side   3. Ability to work with big tails (more than RAM size) through pluggable interface   4. Ability to support different tails distribution schemas through pluggable interface","New Feature",Medium,Complete,"2018-02-02 14:15:23","2018-02-02 14:15:23",5
"Hyperledger Indy SDK","Revocation: Tails reading and writing infrastructure",,"New Feature",Medium,Complete,"2018-02-02 12:35:37","2018-02-02 12:35:37",8
"Hyperledger Indy SDK","Revocation: Default implementation for Tails storage in Indy SDK","Indy SDK should provide Verifiable storage for operating with large amount of data like tails. Also default file-based implementation is needed.  This storage should support generic initialization and retrieving part of the data with proof. E.g. it may be Merkle Tree above raw binary data.","New Feature",Medium,Complete,"2018-02-02 10:37:30","2018-02-02 10:37:30",0
"Hyperledger Indy SDK","Revocation: Indy Crypto Rust API changes","Indy Crypto should not operate whole object with all Tails. Right now it's RevocationRegistryPublic::tails.  Instead of it, Crypto can consume callback to retrieve one tail by index when needed.  Also Issuer::new_revocation_registry API will be affected. It may return public part of the registry without tails and also one more method for generating part of the tails is needed.","New Feature",Medium,Complete,"2018-02-02 10:36:32","2018-02-02 10:36:32",5
"Hyperledger Indy SDK","CLI: Need to add comments to batch mode","Script for batch mode of indy-cli should contain only valid commands.   Need to add ability to have comments in the scripts (ignore lines starting with #) and, ideally, ignore empty lines.","New Feature",Medium,Complete,"2018-01-30 14:58:38","2018-01-30 14:58:38",2
"Hyperledger Indy SDK","indy-cli should depend on specific libindy version","As described in IS-534, it's possible to install incompatible versions of libindy and indy-cli.  Specific version of indy-cli should depend on specific version of libindy.","New Feature",Medium,Complete,"2018-01-29 15:27:20","2018-01-29 15:27:20",3
"Hyperledger Indy SDK","Libindy: Support the latest version of Anoncreds protocol","We need to support the latest Anoncreds paper from Dmitry Khovratovich.    It causes some important changes:   - Correctness proofs   - Materialized claim offer   - Math changes    We need also update wrappers and all tests.","New Feature",Medium,Complete,"2018-01-29 05:10:57","2018-01-29 05:10:57",8
"Hyperledger Indy SDK","CLI: MacOS build support","1. We should be able to build CLI on MacOS  2. We should have documentation for MacOS build  3. Please check that we have documentation for ubuntu and windows build too.","New Feature",Medium,Complete,"2018-01-23 07:19:18","2018-01-23 07:19:18",3
"Hyperledger Indy SDK","Indy Crypto: Review dependencies list"," Users notices that libindy-crypto has some missed dependencies as deb package.",Task,High,Complete,"2018-01-22 14:08:40","2018-01-22 14:08:40",2
"Hyperledger Indy SDK","Uncomment tests for Ledger ATTRIB transaction","Uncomment indy_attrib_requests_works_for_encrypted_value and indy_attrib_requests_works_for_hash_value tests.",Task,Medium,Complete,"2018-01-16 10:11:49","2018-01-16 10:11:49",1
"Hyperledger Indy SDK","Docker network used in Jenkinsfile's shouldn't use 10/8 network ranges","When we have Jenkins build a docker image and start a container in a docker network, there should be no need for it to be a bridged 10.0.0.0/8 network which would have over 16million addresses.          In these scenarios the bridged interface on the OS makes it so that nothing on the docker host can talk to any other external host in the 10/8 network.         The recommendation would be to use a network range like 172.18.0.0/24 etc.. instead.         References to files that need to be changed and tweaked:    [https://github.com/hyperledger/indy-sdk/blob/132375a8a779d0d998d923d4a177f97a1b7d32d8/Jenkinsfile.cd#L107]   [https://github.com/hyperledger/indy-sdk/blob/165a4d63239675771e528a011b75a7e26de0ff36/Jenkinsfile.ci#L283]",Task,Medium,"To Develop","2018-01-12 22:49:40","2018-01-12 22:49:40",3
"Hyperledger Indy SDK","Release indy-sdk with encrypted default wallet",,Task,Highest,Complete,"2018-01-12 15:07:35","2018-01-12 15:07:35",3
"Hyperledger Indy SDK","Revocation: Design Revocation Node API ","We need to review Revocation API in libindy. The problem i see is that it is impossible to create multiple revocation registries for one claim def.     We need to agree how to identiy revocation registry part, align this with Node team and implement this changes in API.","New Feature",Medium,Complete,"2018-01-10 14:50:02","2018-01-10 14:50:02",5
"Hyperledger Indy SDK","Revocation: Support unified approach to reference Revocation Register, ClaimDefs, Schemas, etc in Revocation API","As of now, we have a strange fix of using primary-key-tuples and seqNos.  *    SCHEMA and CLAIM_DEF are identified by primary-key-tuples  *    SCHEMA within CLAIM_DEF (`schemaRef` attribute in CLAIM_DEF) is identified by Schema's seqNo.  *    The same problem is for REVOC_REG (we need to reference CLAIM_DEF there; should we use primary-key-tuple?)    We should unify reference approach and also fix internal storage of revocation register:  indy_issuer_create_and_store_revoc_reg API call must create and store revocation registry using a unique referent and return this refer. Add refer as param to indy_issuer_create_claim and indy_issuer_revoke_claim function.     ",Task,Medium,Complete,"2018-01-10 14:22:48","2018-01-10 14:22:48",8
"Hyperledger Indy SDK","Indy Crypto: Support the latest version of Anoncreds protocol","We got the updated paper for CL Anoncreds protocol and need to support this version in libindy and indy-crypto.    Important thing is provide the link between Claim and ClaimRequest","New Feature",Medium,Complete,"2018-01-10 13:22:11","2018-01-10 13:22:11",3
"Hyperledger Indy SDK","Error handling: Libindy must return Message in addition to Error Code","For the moment it is possible to see developer readable error information only in logs that complicates development. We need the way to return this information and ideally full error stack to developers.    *Acceptance criteria*  1. Libindy allow to return main error description and error stack  2. For wrapper dedicated stories created  2. For vcx and wrappers dedicated stories created  3. For CLI integration dedicated stories created  4. Changes are backward compatible    *POA*    1. Migrate to *failure *crate for error handling to get full error chain  2. Add synchronous *indy_get_error(command_handle, error_json)* method that will return last error description and full error stack.   3. It will be allowed to call indy_get_error in the same thread in case of synchronous error or inside of callback in case of asynchronous error  4. Before synchronous return or callback calling store information about error in local thread storage  5. indy_get_error will read information from local thread storage. verify that it corresponds to command_handle and return to user.  6. Add error information to exception classes in all libindy wrappers, vcx and vcx wrappers (dedicated story)  7. Add printing new error information to CLI (dedicated story)","New Feature",Medium,Complete,"2018-01-09 12:34:49","2018-01-09 12:34:49",5
"Hyperledger Indy SDK","Release indy-sdk with ledgerless DID functionality","* new release preparation  * support ledgerless DID in iOS",Task,High,Complete,"2018-01-09 11:17:55","2018-01-09 11:17:55",3
"Hyperledger Indy SDK","TGB Role should be removed from the code. TGB is not a role.","See INDY-798.",Task,Medium,Complete,"2018-01-03 19:07:05","2018-01-03 19:07:05",2
"Hyperledger Indy SDK","CLI: Should display verkeys in abbreviated form if possible","          Need to add parameter to create did with abbreviated verkey.","New Feature",High,Complete,"2017-12-28 19:12:07","2017-12-28 19:12:07",2
"Hyperledger Indy SDK","CLI: keys for encrypted wallets should not be stored in history","Steps to Reproduce:  1. Create encrypted wallet.  2. Find this command in history.  => key value is shown.  3. Open encrypted wallet.  4. Find this command in history.  => key and rekey values are shown.    Actual Results:  Keys values are shown and stored in history.    Expected Results:  At least keys should not be stored in history. Ideally, keys should not be shown during typing command, like in ssh-keygen or something like this.","New Feature",High,Complete,"2017-12-28 19:08:46","2017-12-28 19:08:46",2
"Hyperledger Indy SDK","CI: INDY-SDK pipelines should clean their jenkins workspaces","Indy-sdk pipelines fail to cleanup workspace on Jenkins agents because produce root:root files and dirs inside it. The possible reason: root diles are created from within docker containers that are run as root (uid 0).    It leads to 100% disk usage in Jenkins agents and (I'm sure for about 90%) system not-responding state.    Dirs inside workspace directory with root as owner:   * Indy-SDK   ** ./cli/target   ** ./libindy/debs   ** ./libindy/sovrin-packaging/__pycache__   * Indy Crypto   ** ./libindy-crypto/debs",Task,Highest,Complete,"2017-12-26 17:06:11","2017-12-26 17:06:11",3
"Hyperledger Indy SDK","CLI: Need the way to provide genesis txn files of sovrin pools to indy cli","End users need in genesis file for connection to live pool. Need to create it during installation of indy-cli.","New Feature",High,"Code Review","2017-12-21 23:41:54","2017-12-21 23:41:54",5
"Hyperledger Indy SDK","CLI: Autocomplete improvements","Case 1:  Commands should not be completed if there is wrong word before command.  Steps to Reproduce:  1. Type any word differ from top level commands and from command group. G.g. `new`.  2. Type space and press Tab key.    Actual Results:  Autocomplete offers all top level commands and command groups. User may think that `new` is valid command because autocomplete worked for it.    Expected Results:  Autocomplete should not work if there is wrong word before command.    Case 2:  Autocomplete should work for correct commands without typing space after command.  Steps to Reproduce:  1. Type any valid command (e.g. `did`), do not autocomplete it during typing and do not type space after command.  2. Press Tab key.    Actual Results:  Nothing happened.    Expected Result:   Space should be added, second Tab press should offer command parameters.","New Feature",Low,Complete,"2017-12-21 18:38:54","2017-12-21 18:38:54",2
"Hyperledger Indy SDK","GSG: GSG adoption to new scenario and code snippets",,"New Feature",Medium,Complete,"2017-12-21 12:59:15","2017-12-21 12:59:15",5
"Hyperledger Indy SDK","GSG: Code snippets","We need to prepare Python code snippets for each GSG step.","New Feature",Medium,Complete,"2017-12-21 12:52:27","2017-12-21 12:52:27",5
"Hyperledger Indy SDK","GSG: Environment preparation","To execute GSG we need Jupyter Notebook enthronement and Indy Pool. We need to have infrastructure for simple Jupyter and Indy Pool deployment.     I see it as docker image that executes pool and Jupyter.","New Feature",Medium,Complete,"2017-12-21 12:49:24","2017-12-21 12:49:24",3
"Hyperledger Indy SDK","Revocation: Indy Crypto API design","We need to design new Indy Crypto API that will solve revocation related problems we have now:    1. Compatibility with ledger entities structure  2. Ability to re-calculate witness data on cloud agent side  3. Ability to work with big tails (more than RAM size) through pluggable access interface","New Feature",Medium,Complete,"2017-12-21 11:32:31","2017-12-21 11:32:31",5
"Hyperledger Indy SDK","CLI: Add Example section to indy-cli help","We need to add Example section (like in old CLI) to single command help to show working example of this command with actual parameters/quotes/brackets/etc usage because Usage and Parameters are sections are not enough to build valid command in some cases.","New Feature",Medium,Complete,"2017-12-21 09:20:28","2017-12-21 09:20:28",3
"Hyperledger Indy SDK","GSG: Design","We need to create PoA for Indy SDK based GSG. I expect the following:    * Common approach description  * Sequence diagram fro GSG scenario","New Feature",Medium,Complete,"2017-12-20 14:38:59","2017-12-20 14:38:59",5
"Hyperledger Indy SDK","Revocation: Revocation transactions support","Support new transaction for Revocation: CRED_DEF, REVOC_REG_DEF, REVOC_REG","New Feature",Medium,Complete,"2017-12-19 22:16:39","2017-12-19 22:16:39",3
"Hyperledger Indy SDK","CLI: Indy-SDK based CLI - pool config and pool upgrade transactions support","Implement Indy-SDK based CLI based on design provided on IS-380    This task scope:   - ledger \{poolUpgrade}   - ledger  \{poolConfig}","New Feature",Medium,Complete,"2017-12-18 12:29:24","2017-12-18 12:29:24",3
"Hyperledger Indy SDK","UX: Support Schema ID as triple (did, name, version)","As for now, schema is identified by schema_seq_no (or ref) fields in anoncreds workflow. It's better to use triple (did, name, version)",Task,Medium,Complete,"2017-12-14 10:22:16","2017-12-14 10:22:16",5
"Hyperledger Indy SDK","Ledger API: Support ENC and HASH values in ATTR txn","Indy SDK now supports only RAW attr in ATTRIB transaction. We need to add support of ENC and HASH attr values.",Task,Medium,Complete,"2017-12-13 10:49:53","2017-12-13 10:49:53",3
"Hyperledger Indy SDK","POA: Fully qualified DIDs support","*Story*   As a developer building on top of Indy, I need to be able to use fully qualified DIDs in my code so that I can work with peer DIDs or DIDs from other ledgers.    *Goal*   * Minimize changes required to Indy Node   * A configuration parameter exists for the fully qualified DID prefix that is not required when communicating with an Indy ledger.   * If DIDs returned from the ledger do not contain the DID prefix, it should be added when communicating with applications through the APIs   * The wallet stores fully qualified DIDs   * Legacy DIDs in the wallet are handled gracefully   ** Potential options   *** Convert legacy DIDs in the wallet to include the prefix   *** Detect DIDs that do not start did: and treat these as legacy DIDs that need the prefix   * Test scripts assume fully qualified DIDs    *Acceptance Criteria*   * An architecture proposal is prepared   * The architecture proposal includes a plan for managing DIDs from multiple ledgers in the wallet   * Issues exist for the remaining work    *Notes*   * At some point in the future, Aries wallets will contain DIDs from different ledgers. Our current work should move us toward that goal.   * Original request from Daniel:  {quote}To everybody who is working on functions that accept a DID, either in the ledger, the SDK, the agency, or elsewhere: I would like us to support fully qualified DIDs in the form `did:sov:<value>`, not just `<value>`. If we see just <value>, we can assume the prefix is did:sov: — and if we see a prefix that isn't did:sov:, we can potentially raise an error about an unsupported DID type. Note that some DID formats may make different assumptions than Sovrin does about the length of a DID, whether it is case-sensitive, etc. We need to get in the habit of thinking of DIDs as being fully qualified. Our sample files should show this. Our wallet APIs should handle it. Etc. This is the foundation for us being able to have a single wallet/agent/agency that supports DIDs from the production Sovrin ledger as well as a test network--and it is the foundation for eventual interop with other ledgers like Bitcoin and Ethereum.    *Requested action item for team leads*: please write tickets to capture work required to support fully qualified DIDs at the minimal level I've described above. Then put them in the backlog so we are at least tracking this effort.    *Requested action item for all devs*: Immediately, stop estimating or writing code that isn't compatible with this fully qualified form.    *Requested action item for QA*: start testing with fully qualified DIDs and log bugs as needed.  {quote}","New Feature",Medium,Complete,"2017-12-13 07:18:48","2017-12-13 07:18:48",5
"Hyperledger Indy SDK","CLI: Indy-SDK based CLI - autocompletion","The following autocompletion should be implemented in CLI:   # Command group name completion   # Command name completion   # Command param name completion   # Command param value completion:   # Wallet name   # Pool config name   # My DIDs   # Filesystem path","New Feature",Medium,Complete,"2017-12-06 12:44:56","2017-12-06 12:44:56",3
"Hyperledger Indy SDK","[anoncreds] Changes in Proof request format","We need to make a couple of changes in libindy's Proof Request JSON:  1) Rename UUIDs to 'referents'  2) Rename GE to something more human readable  3) Support multiple Issuer DIDs for each requested proof  4) Support multiple Schemas for each requested proof.    All these items will lead to changes in proof request JSON (items 1) and 2) are just some renaming; items 3) and 4) change the structure of the JSON).  We need to be careful to not break the API for someone who already uses it.",Task,Medium,Complete,"2017-11-30 16:22:35","2017-11-30 16:22:35",4
"Hyperledger Indy SDK","CI: Windows and MacOS builds should be reproducible against Rust compiler version",,Task,Medium,Complete,"2017-11-28 10:52:40","2017-11-28 10:52:40",2
"Hyperledger Indy SDK","CLI: Indy-SDK based CLI - Pool transactions","Implement Indy-SDK based CLI based on design provided on IS-380    This task scope:   - ledger \{nym}   - ledger \{getNym}   - ledger \{attrib}   - ledger \{getAttr}   - ledger \{node}   - ledger \{schema}   - ledger \{getSchema}   - ledger \{claimDef}   - ledger \{getClaimDef}   - ledger custom","New Feature",Medium,Complete,"2017-11-23 12:56:13","2017-11-23 12:56:13",5
"Hyperledger Indy SDK","CLI: Indy-SDK based CLI -  Batch Mode",,"New Feature",Medium,Complete,"2017-11-23 12:49:12","2017-11-23 12:49:12",2
"Hyperledger Indy SDK","CLI: Indy-SDK based CLI -  Force flag support",,"New Feature",Medium,Complete,"2017-11-23 12:48:52","2017-11-23 12:48:52",2
"Hyperledger Indy SDK","CLI: Indy-SDK based CLI - Identity management ","Implement Indy-SDK based CLI based on design provided on IS-380    This task scope:    - new DID  - list ids  - use DID  - change current key","New Feature",Medium,Complete,"2017-11-23 12:47:50","2017-11-23 12:47:50",2
"Hyperledger Indy SDK","CLI: Indy-SDK based CLI - Wallets management","Implement Indy-SDK based CLI based on design provided on IS-380    This task scope:    - new wallet  - use wallet  - list wallets","New Feature",Medium,Complete,"2017-11-23 12:47:08","2017-11-23 12:47:08",2
"Hyperledger Indy SDK","CLI: Indy-SDK based CLI - Common commands","Implement Indy-SDK based CLI based on design provided on IS-380.    This story scope:  - help  - license  - exit  - prompt  - show","New Feature",Medium,Complete,"2017-11-23 12:46:05","2017-11-23 12:46:05",2
"Hyperledger Indy SDK","CLI: Indy-SDK based CLI - Framework","Implement Indy-SDK based CLI based on design provided on IS-380.     This story scope:  - libindy synchronous wrapper   - Readline based framework with auto completion support","New Feature",Medium,Complete,"2017-11-23 12:45:22","2017-11-23 12:45:22",5
"Hyperledger Indy SDK","Documentation of Default Wallet","We need documentation on the default wallet usage and how to use credentials and rotate keys.","New Feature",Medium,Complete,"2017-11-16 18:11:17","2017-11-16 18:11:17",2
"Hyperledger Indy SDK","use re-built core pod for wrapper test",,Sub-task,Medium,Complete,"2017-11-15 13:43:52","2017-11-15 13:43:52",2
"Hyperledger Indy SDK","re-build core pod",,Sub-task,Medium,Complete,"2017-11-15 13:43:22","2017-11-15 13:43:22",1
"Hyperledger Indy SDK","Provide actual response from pool in case of Nack, Reject","At the moment only status code is returned for Nacked and Rejected responses without any clarification.    It would be good to have actual json response from pool with extended info",Task,Medium,Complete,"2017-11-15 13:06:16","2017-11-15 13:06:16",3
"Hyperledger Indy SDK","Testing on pre-built libindy",,Sub-task,Medium,Complete,"2017-11-15 11:27:30","2017-11-15 11:27:30",2
"Hyperledger Indy SDK","Test python and java wrappers",,Sub-task,Medium,Complete,"2017-11-15 11:23:05","2017-11-15 11:23:05",2
"Hyperledger Indy SDK","Test libindy",,Sub-task,Medium,Complete,"2017-11-15 11:22:36","2017-11-15 11:22:36",1
"Hyperledger Indy SDK","Minimal pipeline (just build)",,Sub-task,Medium,Complete,"2017-11-15 11:19:58","2017-11-15 11:19:58",3
"Hyperledger Indy SDK","Indy Crypto: changes for encryption in libindy","The request from Daniel:    daniel.hardman [10:47 AM]   Alex and Slava: i am feeling like we ought to harmonize the description of encryption mechanisms in https://github.com/evernym/protocol/blob/master/message-packaging.md#encrypted-messages with the functions in crypto.rs in the SDK. Part one of the need for sync is that the names of the functions crypto_box and crypto_box_seal are out of sync with the names “authcrypt” and “anoncrypt” (and “authdecrypt” / “anondecrypt”) in the protocol repo. I think “authcrypt” and “anoncrypt” are significantly better names; they do not make it clear that we’re using libsodium’s PKAE or sealed box mechanism, but they DO make it clear whether the encryption is authenticated or anonymous, which is more likely to help a programmer. So I vote to change the names of the functions in the sdk. If you have a strong argument the other way, please let me know. Otherwise, please make the change happen before MVP.    On the other hand, I believe the description of authcrypt in the protocol repo is slightly inaccurate. Could you raise PR that proposes an alternate paragraph to explain how it really works in the SDK?","New Feature",Medium,Complete,"2017-11-14 13:00:52","2017-11-14 13:00:52",3
"Hyperledger Indy SDK","Agent API: Add demo tests, update samples",,Task,Medium,Complete,"2017-11-10 08:32:41","2017-11-10 08:32:41",3
"Hyperledger Indy SDK","Technical debt: Remove zmq-pw dependency","With new Agent communication approach we don't need zmq-pw now and can use zmq.     This migration isn't trivial as we have some additional build related paraches in zmq-pw repo, but it would be nice to switch to mainstream version.","New Feature",Medium,Complete,"2017-11-09 11:58:11","2017-11-09 11:58:11",3
"Hyperledger Indy SDK","Signus: Support Ledgerless DIDs","Se discussed with Rajesh how to use libindy for DID-based encryption without involving pool to resolve DID keys. He is mostly interested in it for unit testing without the pool, but for me, it seems like valuable also from Ledgerless DIDs support perspective.     Existing indy_key_for_did call follow the idea that we resolve information about their DID from the ledger with cache in the local wallet. The indy_open_wallet call has freshness parameter that is used for checking the freshness of cached pool value. This behavior isn't completely compatible with Ledgerless DIDs as it forces pool connection and will fail after freshness time.     We need to create dedicated call indy_local_key_for_did that will look to local ledger only and skip freshness checking. It will allow using local wallet data without forcing pool connection and limitation to data freshness.","New Feature",Medium,Complete,"2017-11-09 11:24:00","2017-11-09 11:24:00",3
"Hyperledger Indy SDK","Anoncreds: Use Indy Crypto as Anoncreds backend","The basic idea here is that the crypto code belongs in Indy-crypto and not Indy-sdk; meaning, details of serialization and protocol belong in the sdk but anything that leverages pairings or encrypt/decrypt our signature checking should go into the lower level library.  This should allow the crypto to be audited and shared with other projects.    This task is about refactoring of Indy SDK to use new Anoncreds API in Indy Crypto as backend for Anoncreds API.","New Feature",Medium,Complete,"2017-11-08 11:17:19","2017-11-08 11:17:19",5
"Hyperledger Indy SDK","Indy Crypto: Anoncreds API Integration tests","The basic idea here is that the crypto code belongs in Indy-crypto and not Indy-sdk; meaning, details of serialization and protocol belong in the sdk but anything that leverages pairings or encrypt/decrypt our signature checking should go into the lower level library.  This should allow the crypto to be audited and shared with other projects.    This story is about implementation of integration tests for new Anoncreds API in Indy Crypto.","New Feature",Medium,Complete,"2017-11-08 10:14:16","2017-11-08 10:14:16",5
"Hyperledger Indy SDK","Indy Crypto: Anoncreds API Implementation","The basic idea here is that the crypto code belongs in Indy-crypto and not Indy-sdk; meaning, details of serialization and protocol belong in the sdk but anything that leverages pairings or encrypt/decrypt our signature checking should go into the lower level library.  This should allow the crypto to be audited and shared with other projects.    This story is about implementation of new Anoncreds API in Indy Crypto.","New Feature",Medium,Complete,"2017-11-08 10:12:00","2017-11-08 10:12:00",8
"Hyperledger Indy SDK","Indy Crypto: Anoncreds API Design ","The basic idea here is that the crypto code belongs in Indy-crypto and not Indy-sdk; meaning, details of serialization and protocol belong in the sdk but anything that leverages pairings or encrypt/decrypt our signature checking should go into the lower level library.  This should allow the crypto to be audited and shared with other projects.     This story is about design of this migration. We need to:    1. Define the new consistent API for indy crypto  2. Check do we need python wrapper for this API  3. Check  that there is no Sovrin only parts  4. Design integration approach with Indy SDK    I expect that PoA will be created as result of this ticket.","New Feature",Medium,Complete,"2017-11-08 10:00:42","2017-11-08 10:00:42",3
"Hyperledger Indy SDK","Release: prepare RC 1.1.0 with new Agent and Crypto API","* add workaround for master branch of indy-sdk against stable branch of indy-node  * update changelog/versions  * preform acceptance testing",Task,Medium,Complete,"2017-11-07 10:45:30","2017-11-07 10:45:30",4
"Hyperledger Indy SDK","iOS: Migrate new tests for Crypto API",,Task,Medium,Complete,"2017-11-07 10:41:20","2017-11-07 10:41:20",3
"Hyperledger Indy SDK","iOS: Migrate new tests for Agent API",,Task,Medium,Complete,"2017-11-07 10:41:08","2017-11-07 10:41:08",2
"Hyperledger Indy SDK","Fix docker file: do not install sovrin package",,Task,Medium,Complete,"2017-11-01 12:14:50","2017-11-01 12:14:50",1
"Hyperledger Indy SDK","Technical debt: Encapsulate persistence model and persistence layer","For the current moment wallet service only provides generic set/get methods and definition of entities types and entities persistence code is present in different code parts.    It makes hard to understand what entities we have and complicates persistence logic.    I suggest to move all entities definition to one package and move all persistence helpers to one package. It will provide the good vision of persistence model and simplify wallet versioning and migrations.","New Feature",Medium,"To Develop","2017-10-27 09:50:24","2017-10-27 09:50:24",3
"Hyperledger Indy SDK","Crypto: Integration tests for generic crypto methods","Imlement integration tests for generic crypto methods:    - indy_crypto_sign  - indy_crypto_verify  - indy_crypto_box  - indy_crypto_box_open  - indy_crypto_box_seal  - indy_crypto_box_seal_open","New Feature",Medium,Complete,"2017-10-27 09:47:56","2017-10-27 09:47:56",2
"Hyperledger Indy SDK","Crypto: .Net wrapper for generic crypto methods","Imlement .Net wrapper for generic crypto methods:   - indy_crypto_sign   - indy_crypto_verify   - indy_crypto_box   - indy_crypto_box_open   - indy_crypto_box_seal   - indy_crypto_box_seal_open    See PR [https://github.com/hyperledger/indy-sdk/pull/350] for Rust implementation.","New Feature",Medium,Complete,"2017-10-27 09:47:42","2017-10-27 09:47:42",2
"Hyperledger Indy SDK","Crypto: iOS wrapper for generic crypto methods","Imlement iOS wrapper for generic crypto methods:    - indy_crypto_sign  - indy_crypto_verify  - indy_crypto_box  - indy_crypto_box_open  - indy_crypto_box_seal  - indy_crypto_box_seal_open","New Feature",Medium,Complete,"2017-10-27 09:47:35","2017-10-27 09:47:35",2
"Hyperledger Indy SDK","Crypto: Java wrapper for generic crypto methods","Imlement java wrapper for generic crypto methods:    - indy_crypto_sign  - indy_crypto_verify  - indy_crypto_box  - indy_crypto_box_open  - indy_crypto_box_seal  - indy_crypto_box_seal_open","New Feature",Medium,Complete,"2017-10-27 09:47:28","2017-10-27 09:47:28",2
"Hyperledger Indy SDK","Crypto: Python wrapper for generic crypto methods","Imlement python wrapper for generic crypto methods:    - indy_crypto_sign  - indy_crypto_verify  - indy_crypto_box  - indy_crypto_box_open  - indy_crypto_box_seal  - indy_crypto_box_seal_open","New Feature",Medium,Complete,"2017-10-27 09:47:18","2017-10-27 09:47:18",2
"Hyperledger Indy SDK","Crypto: Implement crypto methods for keys-based cryptography","Recently we intorduced generic keys management functionality, but there are no crypto methods that will work with keys. Only DID-based crypto methods are present.    We need to implement crypto methods that will work with keys and deprecate DID based crypto methods as the same result can be achived by receiving of keys for some DID with indy_key_for_did call.    The list of methods to implement:    - indy_crypto_sign  - indy_crypto_verify  - indy_crypto_box  - indy_crypto_box_open  - indy_crypto_box_seal  - indy_crypto_box_seal_open","New Feature",Medium,Complete,"2017-10-27 09:46:18","2017-10-27 09:46:18",3
"Hyperledger Indy SDK","Agent API: Support new key management and agents communication approach in iOS wrapper","There are significant changes in our API:    1. The new libindy release will introduce generic keys management. Before it was possible to only use keys assigned to DIDs and crypto functions were only allowed to perform only DID-based encryption and signatures creation. Starting from next libindy release it will be possible to create, store and use keys detached from DIDs.   2. Verkey is used as an identifier of generic keys.   3. DID-based crypto becomes a subset of generic-keys based crypto. Creation of my did causes creation of generic-key in a compatible format. The key id can be resolved with the key_for_did method and used in any generic-keys based functions.   4. functions for DID-based crypto are still here but will be replaced in the future with generic-keys based crypto functions.   5. The approach of agents communication is completely changed. Instead of using proprietary secure transport layer protocol libindy will provide generic helpers to create authenticated and encrypted messages. This messages exchange doesn't require a complex handshake-based protocol. Messages can be sent through an insecure channel (http, unencrypted zmq).   6. libindy now provides the helper-methods to securely store any application-specific metadata with the key, did or pairwise.    See corresponded PR for details: [https://github.com/hyperledger/indy-sdk/pull/330]    We need to support this changes in iOS wrapper too.","New Feature",Medium,Complete,"2017-10-26 16:17:11","2017-10-26 16:17:11",3
"Hyperledger Indy SDK","Agent API: Support new key management and agents communicatiob approach in .Net wrapper","There are significant changes in our API:    1. The new libindy release will introduce generic keys management. Before it was possible to only use keys assigned to DIDs and crypto functions were only allowed to perform only DID-based encryption and signatures creation. Starting from next libindy release it will be possible to create, store and use keys detached from DIDs.  2. Verkey is used as an identifier of generic keys.  3. DID-based crypto becomes a subset of generic-keys based crypto. Creation of my did causes creation of generic-key in a compatible format. The key id can be resolved with the key_for_did method and used in any generic-keys based functions.  4. functions for DID-based crypto are still here but will be replaced in the future with generic-keys based crypto functions.  5. The approach of agents communication is completely changed. Instead of using proprietary secure transport layer protocol libindy will provide generic helpers to create authenticated and encrypted messages. This messages exchange doesn't require a complex handshake-based protocol. Messages can be sent through an insecure channel (http, unencrypted zmq).  6. libindy now provides the helper-methods to securely store any application-specific metadata with the key, did or pairwise.    See corresponded PR for details: [https://github.com/hyperledger/indy-sdk/pull/330]    We need to support this changes in .Net wrapper too.","New Feature",Medium,Complete,"2017-10-26 16:16:57","2017-10-26 16:16:57",3
"Hyperledger Indy SDK","Client needs to be able to send read requests to one Node only","With State proofs implemented, we can reduce load on live pool dramatically, since we can send read request to one Node only.  We need to make it possible for existing client/CLI.    Think about how to do it best. Possible options: send reqs to Nodes in round robin or randomly (if there is state proof returned).","New Feature",Medium,Complete,"2017-10-26 09:48:41","2017-10-26 09:48:41",4
"Hyperledger Indy SDK","Pool API: implement building pool state from pool transactions",,Task,Medium,Complete,"2017-10-23 13:17:53","2017-10-23 13:17:53",4
"Hyperledger Indy SDK","Agent API: Support new approach based on libsodium authenticated encryption in Java and Python","Implement support of new approach for Agent 2 Agent communication in libindy.     The corresponded design task is IS-356    https://docs.google.com/document/d/1r5lz4UkE77zW1ujWunJYq2s8E0ywMuO6blgVZKj3Zvo/","New Feature",Medium,Complete,"2017-10-19 10:59:53","2017-10-19 10:59:53",3
"Hyperledger Indy SDK","CLI: Indy-SDK based CLI - Support of old-CLI migration","Implement support of old-CLI wallets and settings migration  procedure for Indy-SDK based CLI based on design provided on IS-380","New Feature",Medium,Complete,"2017-10-13 08:51:44","2017-10-13 08:51:44",8
"Hyperledger Indy SDK","CLI: Indy-SDK based CLI - Windows Packages","Implemen windows packaging procedure for Indy-SDK based CLI based on design provided on IS-380","New Feature",Medium,Complete,"2017-10-13 08:29:52","2017-10-13 08:29:52",3
"Hyperledger Indy SDK","CLI: Indy-SDK based CLI - CI/CD Pipelines","Implemen CI/CD pipeline for Indy-SDK based CLI based on design provided on IS-380","New Feature",Medium,Complete,"2017-10-13 08:29:06","2017-10-13 08:29:06",3
"Hyperledger Indy SDK","CLI: Indy-SDK based CLI - Debian Packages","Implemen debiam packaging procedure for Indy-SDK based CLI based on design provided on IS-380","New Feature",Medium,Complete,"2017-10-13 08:28:26","2017-10-13 08:28:26",3
"Hyperledger Indy SDK","CLI: Indy-SDK based CLI - System Tests","Implemen system tests procedure for Indy-SDK based CLI based on design provided on IS-380","New Feature",Medium,Complete,"2017-10-13 08:28:09","2017-10-13 08:28:09",7
"Hyperledger Indy SDK","CLI: Indy-SDK based CLI - Design","As Indy SDK user I want to have node CLI as a part of Indy SDK.    This story is a about approach definition. I see 2 main options that we need to consider:    1. Implementation of CLI from scratch as native application. Advantages of this approach is simplified packaging on all platforms, less dependencies, simplified CI pipline and possibility to get good-looking code.    2. Re-use current python based CLI code base (may be with significant refactoring). This approach can be faster and re-use old interfaces, but but we will need more complex packaging and some fight with current CLI code (2 big flat python files in different repos). Also some ideas of SDK can't be mapped directly to current CLI interfaces.    Also important questions to solve on design phase is migration of wallets created by ol CLI and system testing approach.","New Feature",Medium,Complete,"2017-10-13 08:27:44","2017-10-13 08:27:44",3
"Hyperledger Indy SDK","Upgrade ciphers in SQLCipher","Change SQLCipher to use CHACHA20-POLY1305 and Argon2 instead of    AES-CBC with HMAC-SHA1 and PBKDF2.","New Feature",Medium,Complete,"2017-10-10 23:04:28","2017-10-10 23:04:28",3
"Hyperledger Indy SDK","Key Management of SQLCipher Wallet keys","Allow other key types and key rotation for Wallets","New Feature",Medium,Complete,"2017-10-10 23:02:10","2017-10-10 23:02:10",3
"Hyperledger Indy SDK","Support proof for non-existing value",,Task,Medium,Complete,"2017-10-10 09:32:40","2017-10-10 09:32:40",2
"Hyperledger Indy SDK","Update Default Wallets To Use SQLCipher","Replace SQLite with SQLCipher.    First pass will use password encrypted key","New Feature",Medium,Complete,"2017-10-09 18:51:47","2017-10-09 18:51:47",5
"Hyperledger Indy SDK","Signus API: Support of abbreviated key form in signus_store_their_did","signus_store_their_did requires now verkey in full form. It  complicates it usage when user gets verkey in abbreviated form from ledger.     I suggest the following:  * Allow to pass abbreviated verkey  * Convert it to full form  * Store full verkey in the wallet","New Feature",Medium,Complete,"2017-10-09 10:47:13","2017-10-09 10:47:13",3
"Hyperledger Indy SDK","Support protocolVersion for Requests to Node","There is a new optional field 'protocolNode' (starting from node 1.1.153).  - The minimal version for state proofs support is 1   - Each Request needs to send it if it wants to get state proofs (state proofs are not received otherwise).","New Feature",Medium,Complete,"2017-10-06 12:14:51","2017-10-06 12:14:51",3
"Hyperledger Indy SDK","State proofs: compatibility with nodes without state proofs should be updated","* check only data field in get transactions for consensus  * *remove returned errors from process reply method in pool/mod.rs* done in scope of IS-390",Task,Medium,Complete,"2017-10-02 14:29:35","2017-10-02 14:29:35",2
"Hyperledger Indy SDK","iOS Wrapper: Fix State Proof related regressions in iOS wrapper tests","The latest changes related to StateProofs most probably caused a regression in .Net wrapper tests. Genesis txns data must be changed and also some assumptions in tests are wrong now. We need to handle this. Corresponded fixes to java and python wrapper you can find here: [https://github.com/hyperledger/indy-sdk/pull/285]",Task,Medium,Complete,"2017-10-02 10:29:45","2017-10-02 10:29:45",2
"Hyperledger Indy SDK",".Net Wrapper: Fix State Proof support related regressions in tests","The latest changes related to StateProofs most probably caused a regression in .Net wrapper tests. Genesis txns data must be changed and also some assumptions in tests are wrong now. We need to handle this. Corresponded fixes to java and python wrapper you can find here: [https://github.com/hyperledger/indy-sdk/pull/285]",Task,Medium,Complete,"2017-10-02 10:27:05","2017-10-02 10:27:05",2
"Hyperledger Indy SDK","indy-crypto must be published to a separate deb repo","- As of now, indy-crypto is published to the same deb repo as indy-node  - Since we use a specific version of indy-crypto in indy-node, and apt can use the latest version only for dependencies, indy-node build will fail once a new indy-crypto is published    As a solution, we can use a separate repo for indy-crypto (both libindy-crypto and python3-indy-crypto).",Task,High,Complete,"2017-09-29 10:41:28","2017-09-29 10:41:28",2
"Hyperledger Indy SDK","Agent API: Implement new approach based on libsodium authenticated encryption","Implement support of new approach for Agent 2 Agent communication in libindy.     The corresponded design task is IS-356    https://docs.google.com/document/d/1r5lz4UkE77zW1ujWunJYq2s8E0ywMuO6blgVZKj3Zvo/","New Feature",Medium,Complete,"2017-09-27 11:35:31","2017-09-27 11:35:31",7
"Hyperledger Indy SDK","Agent API: Design new approach based on libsodium authenticated encryption","We need to design support of new approach for Agent 2 Agent communication in libindy. See the following documents:    > Note the section in this doc about communication:    https://docs.google.com/document/d/1wJgT89gGvLi62PDfIpk6CXs0SJcb5jnCrx1txJdffqI/edit    > This doc is mostly about message formats, but it does mention some conceptual stuff as well:    https://docs.google.com/document/d/1TOwSCR_nrdUampQjkG4Yxf2TU9JioCyjvoi5xVxwGdk/edit    > Here is an updated version of the sequence diagrams that I sent. This version has more formal notation in it, and has been reviewed more closely by Jason.    https://github.com/evernym/design/tree/master/CXS","New Feature",Medium,Complete,"2017-09-27 11:35:11","2017-09-27 11:35:11",5
"Hyperledger Indy SDK","Indy Crypto: Switch to BN254 Curve for BLS and Pairing",,Task,Medium,Complete,"2017-09-26 14:19:17","2017-09-26 14:19:17",2
"Hyperledger Indy SDK","Changing a nym's role to the empty role does not work in libindy python wrapper","When trying to change the role of a nym to the empty role by sending a request constructed using build_nym_request call from libindy python wrapper, the role of the nym remains unchanged.",Task,Medium,Complete,"2017-09-13 18:58:50","2017-09-13 18:58:50",2
"Hyperledger Indy SDK","Incubation: Split indy-crypto CD pipeline to CI and CD parts","Current CD pipeline is complex and contains closed parts:  - SovrinHelpers library that is setup as jar on Jenkins  - Secrets: Keys and accounts    Community suggests the following:  - Split CD pipeline to CI and CD parts  - CI part must be as simple as possible. Ideally, doesn't require specific Jenkins setup to be executed  - CD part can keep all current CD logic and secrets.","New Feature",High,Complete,"2017-09-12 15:44:40","2017-09-12 15:44:40",3
"Hyperledger Indy SDK","Incubation: Move CI part of pipelines to Hyperledger infrastructure","CI parts of all pipelines must be moved to Hyperledger infrastructure.    *PoA*:   # discuss with Hyperledger how to deal with   ## windows testing   ### need rust/cargo installed   ### need docker client installed   ### need to be able to manage pool on docker linux containers, options   **** dedicated linux host server with docker daemon configured to accept remote connections by tcp socket   **** agent with windows version that supports linux docker containers  ## discuss macos testing   # prepare JJB conf files and test them on our server   # test pipelines on Hypereldger jenkins sandbox   # push a change for review into Hyperledger Gerrit, pass necessary verification and make it be merged","New Feature",Low,Complete,"2017-09-12 15:44:09","2017-09-12 15:44:09",5
"Hyperledger Indy SDK","Incubation: Split indy-sdk CD pipeline to CI and CD parts","Current CD pipeline is complex and contains closed parts:  - SovrinHelpers library that is setup as jar on Jenkins  - Secrets: Keys and accounts    Community suggests the following:  - Split CD pipeline to CI and CD parts  - CI part must be as simple as possible. Ideally, doesn't require specific Jenkins setup to be executed  - CD part can keep all current CD logic and secrets.","New Feature",High,Complete,"2017-09-12 15:25:56","2017-09-12 15:25:56",3
"Hyperledger Indy SDK","Incubation: Check indy-sdk repo for any non-Indy branding","We need to remove all non-Indy branding and names from indy-sdk repo:    * Package names  * Code primitive names  * Paths  * Documentation    Ideally, if full-text search for Sovrin and Evernym will return nothing.  ","New Feature",High,Complete,"2017-09-12 14:20:59","2017-09-12 14:20:59",3
"Hyperledger Indy SDK","CI: Clean-up python3.6 dependency",,Task,Medium,Complete,"2017-09-07 15:33:55","2017-09-07 15:33:55",1
"Hyperledger Indy SDK","Python Wrapper: Remove Python 3.6 dependency from CI","Now Python Wrapper can work with Python 3.5 and we can simplify CI scripts.","New Feature",Medium,Complete,"2017-09-07 11:13:54","2017-09-07 11:13:54",1
"Hyperledger Indy SDK","Python Wrapper: Python 3.5 compatibility","Now python wrapper supports python 3.6 only. We need to support python 3.5 also.","New Feature",Medium,Complete,"2017-09-07 10:05:30","2017-09-07 10:05:30",3
"Hyperledger Indy SDK",".NET wrapper missing revocation tests","No tests exist in the .NET wrapper that exercise indy_issuer_create_and_store_revoc_reg or indy_issuer_revoke_claim. ",Task,Medium,Complete,"2017-09-02 18:58:01","2017-09-02 18:58:01",2
"Hyperledger Indy SDK","Java wrapper missing revocation tests","No tests exist in the Java wrapper that exercise indy_issuer_create_and_store_revoc_reg or indy_issuer_revoke_claim. ",Task,Medium,Complete,"2017-09-02 18:57:40","2017-09-02 18:57:40",2
"Hyperledger Indy SDK","Indy Crypto: Publishing and CI pipeline","We need CI pipeline for Indy Crypt that produces the following artifacts:    - Cargo crate  - Ubuntu debs  - Windows binaries  - PiPy packages","New Feature",Medium,Complete,"2017-08-29 13:33:48","2017-08-29 13:33:48",7
"Hyperledger Indy SDK","Indy Crypto: Move all complex crypto from Indy SDK to Ursa",,Task,Medium,"To Develop","2017-08-29 13:32:30","2017-08-29 13:32:30",5
"Hyperledger Indy SDK","iOS Wrapper: register_wallet_type support",,"New Feature",Medium,Complete,"2017-08-29 13:01:34","2017-08-29 13:01:34",7
"Hyperledger Indy SDK","Java Wrapper: Support Maven Central","Current CI publish Java artifacts to our maven repo. We want to publish artifacts to Maven Cetnrall instead,",Task,Medium,Complete,"2017-08-29 12:31:33","2017-08-29 12:31:33",3
"Hyperledger Indy SDK","Indy Crypto:Debug build support for AMCL","Current AMCL v2 works only in the release build. The reason is Rust's runtime checks for arithmetics overflow.    It is possible to refactor the code with using https://doc.rust-lang.org/std/num/struct.Wrapping.html and solve this issue.    ",Task,Medium,Complete,"2017-08-29 12:17:23","2017-08-29 12:17:23",3
"Hyperledger Indy SDK","Indy Crypto: AMCL curves configuration through Cargo features","Current AMCL v2 support curves configuration only through commenting/uncommenting lines of code.     We need to provide Cargo compatible conditional comilation.",Task,Medium,Complete,"2017-08-29 12:14:26","2017-08-29 12:14:26",3
"Hyperledger Indy SDK","Wallet: Keys rotation support","As as Indy SDK user, I need to be able to rotate my verky and update it in the ledger    A possible solution:  - create a temporary key-pair for a DID (not overriding the current one);  - send NYM txn for the new verkey (signing with the old/current one)  - apply tmp key-pair for the DID (override the current one with the new one);  - remove temporarily key-pair    The operation need to be atomic, that is if we NYM is updated, but applying new verkey failed, we need to re-try to apply it, or revert NYM to the old (current) one sending another NYM txn.    It must be tested and added to all wrappers","New Feature",Medium,Complete,"2017-08-29 09:49:10","2017-08-29 09:49:10",7
"Hyperledger Indy SDK","State Proofs: State Proofs support in Indy SDK","Indy SDK need to be able to verify state proofs to reduce Ledger load.    - https://github.com/hyperledger/indy-plenum/pull/364 - implementation in python.   - We need to have state trie code in indy-sdk for state proof verification  - There is an ethereum implementation of etherium in rust called parity. It contains state trie and verification of state proofs.","New Feature",High,Complete,"2017-08-29 08:54:54","2017-08-29 08:54:54",7
"Hyperledger Indy SDK","Indy Crypto: Python Wrapper","As a community member and Indy Node developer, I need to have a python wrapper for Indy Crypto","New Feature",Medium,Complete,"2017-08-28 16:49:00","2017-08-28 16:49:00",4
"Hyperledger Indy SDK","Indy Crypto: BLS Signature","As a community member, Indy SDK and Indy Node developer, I need to have a BLS signature implementation in Indy Crypto   - Create a new project `libindy-crypto`   - Implement BLS math using amcl   - Expose Native C and Rust interfaces","New Feature",Medium,Complete,"2017-08-25 15:01:55","2017-08-25 15:01:55",5
"Hyperledger Indy SDK","Release: Demo projects for installation testing","Functional testing is performed before artifacts packaging. libindy has some runtime dependencies and we need to be sure that package installation satisfy this dependencies.    I suggest the following:   * Create simple demo projects on C, Python and Java that will depend on libindy artifacts and move our demo tests to these projects (in the future we need projects for iOS, .Net and NodeJS). We can try to do this in the current sprint.   * Test libibindy and wrapper installation on ubuntu and windows (in the future on macos, rhel, iOS too)   * Test that these demo projects can be built and run with rc packages    1. Python project is the first priority  2. Java wrapper is the second priority  3. С is optional for now as libindy packages will be checked by Python and Java projects too.  ","New Feature",Medium,Complete,"2017-08-25 13:59:04","2017-08-25 13:59:04",3
"Hyperledger Indy SDK","Release: Implement libindy-libindy interoperability tests","1. Implement the following test cases:    {color:#000080}* {color}Persistent configuration backward compatibility for Major version   {color:#000080}* {color}Persistent wallet backward compatibility for Major version   {color:#000080}* {color}Persistent pool cache backward compatibility for Major version   {color:#000080}* {color}Anoncreds protocol backward compatibility for Major version   {color:#000080}* {color}Agent communication backward compatibility for Major version     2. Integrate these tests to CI  3. Update CI pipeline structure documentation","New Feature",Medium,"To Develop","2017-08-25 11:23:30","2017-08-25 11:23:30",8
"Hyperledger Indy SDK","ubuntu: agent test cases fail on port-map configuration","On ubuntu 16.04,    {{*$ pwd*}}  {{/home/<USER>indy/indy-sdk/libindy}}    *{{$ git log}}*  {{commit 5563dfd6126476f04bda4743ec9b7eb8222fbae5}}  {{Merge: 00f0bcf be297f7}}  {{Author: <USER><<EMAIL>>}}  {{Date:   Thu Aug 24 13:23:41 2017 +0300}}    {{    Merge pull request #218 from <USER>bugfix/header}}    {{    Corrected header file. Deleted wrong params}}  {{...}}    {{*$ docker build -f ci/indy-pool.dockerfile -t indy_pool .*}}    {{*$ docker run -itd -p 9701-9708:9701-9708 indy_pool*}}{{*$ docker images*}}    {{CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                        NAMES}}  {{7b81282f2023        indy_pool           /usr/bin/supervisord   9 minutes ago       Up 9 minutes        0.0.0.0:9701-9708->9701-9708/tcp, 9709/tcp   friendly_rosalind}}      {{*$ RUST_TEST_THREADS=1 RUST_LOG=trace RUST_BACKTRACE=1 cargo test --test=agent*}}        yields    {{test result: FAILED. 38 passed; 18 failed; 1 ignored; 0 measured; 0 filtered out}}    as per attached (zipped) file.    [^libindy-agent-only.ubuntu1604.portmap.zip]          ",Task,Medium,Complete,"2017-08-24 16:30:13","2017-08-24 16:30:13",1
"Hyperledger Indy SDK","Close callback on custom wallet types never called","The close callback registered when calling register_custom_wallet_type is never called when calling indy_close_wallet for the corresponding custom wallet type.      This has previously not been uncovered in the Java and .NET test suites because the relevant tests did not correctly test for it.",Task,Medium,Complete,"2017-08-24 15:42:48","2017-08-24 15:42:48",3
"Hyperledger Indy SDK","CI: Test wrappers in parallel","As for now, there is the next sequence of steps for Ubuntu platform on CI:   # Build libindy with tests ~6 min   # Run libindy tests ~4 min   # Run java wrapper test, using libindy from step 1 ~3 min   # Run python wrapper test, using libindy from step1 ~3min    Total about 15 min for testing.    The first step can be split into 2: build libindy (~4 min) and build tests. Build libindy tests and 2-4 steps from the list above can be done in parallel. Expected time for testing is about 10 min.  ",Task,High,Complete,"2017-08-23 10:51:19","2017-08-23 10:51:19",3
"Hyperledger Indy SDK","Clean-up wrappers after removing revocRegSeqNo from API",,Task,Medium,Complete,"2017-08-23 10:42:21","2017-08-23 10:42:21",1
"Hyperledger Indy SDK","Release: Deprecate python debs",,Task,Medium,Complete,"2017-08-18 16:48:21","2017-08-18 16:48:21",2
"Hyperledger Indy SDK","Release: Deprecate cargo publishing",,Task,Medium,Complete,"2017-08-18 16:47:55","2017-08-18 16:47:55",1
"Hyperledger Indy SDK","iOS wrapper: Propagate repos path and artifacts name changes to iOS build ",,Task,Medium,Complete,"2017-08-18 13:12:00","2017-08-18 13:12:00",3
"Hyperledger Indy SDK","Release: Update .Net wrapper to use actual libindy version (Sprint 8)",,Task,Medium,Complete,"2017-08-18 12:58:27","2017-08-18 12:58:27",2
"Hyperledger Indy SDK","Release: Update iOS wrapper to use actual libindy version (Sprint 9)",,Task,Medium,Complete,"2017-08-18 12:57:42","2017-08-18 12:57:42",3
"Hyperledger Indy SDK","Release: Update java wrapper to use actual libindy version (Sprint 7)",,Task,Medium,Complete,"2017-08-18 12:57:20","2017-08-18 12:57:20",2
"Hyperledger Indy SDK","Release: Update python wrapper to use actual libindy version (Sprint 7)",,Task,Medium,Complete,"2017-08-18 12:56:51","2017-08-18 12:56:51",2
"Hyperledger Indy SDK","Release: Update libindy to use actual node version (Sprint 7)",,Task,Medium,Complete,"2017-08-18 12:56:04","2017-08-18 12:56:04",2
"Hyperledger Indy SDK","Documentation: Restructure and enhance documentation","Existing documentation isn't very well structured. We need to provide:    1. Resonable structure. It can possible to move some documents between root folder, libindy and wrappers    2. Links to sovrin that can help to undertand workflow    3. High level documentation of API parts, links to documentation in code    4. All existing documents should be referenced through root Readme.md","New Feature",Medium,Complete,"2017-08-18 12:49:35","2017-08-18 12:49:35",3
"Hyperledger Indy SDK","Release: Update CI pipeline to support releases","Few things must be added to pipelines code to support releases:   * Updating of publishing scripts to support new repos structure   * Updating of publishing scripts to be aware about master, rc, stable artifacts naming and paths   * Add QA validation step for stable pipeline build   * Add steps that performs copying of rc artifacts to stable artifacts","New Feature",Medium,Complete,"2017-08-18 12:02:11","2017-08-18 12:02:11",4
"Hyperledger Indy SDK","Release: Design acceptance procedure","We need to define and document acceptance procedure for Indy SDK releases. I expect creation of document acceptance.md with description of the approach.","New Feature",Medium,Complete,"2017-08-18 11:44:47","2017-08-18 11:44:47",5
"Hyperledger Indy SDK","Release: Consistent repos paths","We need the following:   * Designe consisten repos path for all artifacts we produce   * Document this structure in .md file (may be in root Readme.md)   * Create repos structure in repo.evernym.com   * Update CI pipelines to use this paths   * Share info with community",Task,Medium,Complete,"2017-08-17 17:00:17","2017-08-17 17:00:17",2
"Hyperledger Indy SDK","Documentation: Provide the links to binary artifacts repos in Readme.md",,"New Feature",Medium,Complete,"2017-08-17 16:21:35","2017-08-17 16:21:35",1
"Hyperledger Indy SDK","Versioning for indy_pool in CI","Implement ability to set concrete version of indy_pool to can test wrappers with older version rather libindy source","New Feature",Medium,Complete,"2017-08-17 10:27:01","2017-08-17 10:27:01",2
"Hyperledger Indy SDK","Add FAQ section to readme","missed nuances in current readme:    - tracked by VCS Cargo.lock for rust library (vs http://doc.crates.io/faq.html#why-do-binaries-have-cargolock-in-version-control-but-not-libraries)","New Feature",Medium,"To Develop","2017-08-11 11:25:29","2017-08-11 11:25:29",2
"Hyperledger Indy SDK","Use fixed dependencies versions in libindy","We encounter with broken CI after some packages updates in cargo crates and our library don't fix dependencies versions for build.",Task,High,Complete,"2017-08-11 10:31:13","2017-08-11 10:31:13",2
"Hyperledger Indy SDK","Python Wrapper: Provide readme.md with some start information",,Task,Medium,Complete,"2017-08-10 13:05:48","2017-08-10 13:05:48",1
"Hyperledger Indy SDK",".NET wrapper: Support changes associated with Sign and Verify Api calls","There is a pool request that solves IS-158: indy_sign and indy_verify_signature should support arbitrary byte array (PR 172). It changes API and requires support in wrappers. We performed this changes in python and java wrapper, but we need this support for .NET wrapper too.","New Feature",Medium,Complete,"2017-08-10 09:07:55","2017-08-10 09:07:55",2
"Hyperledger Indy SDK","IOS wrapper: Support changes associated with Sign and Verify Api calls","There is a pool request that solves IS-158: indy_sign and indy_verify_signature should support arbitrary byte array (PR 172). It changes API and requires support in wrappers. We performed this changes in python and java wrapper, but we need this support for iOS wrapper too.","New Feature",Medium,Complete,"2017-08-10 09:06:51","2017-08-10 09:06:51",3
"Hyperledger Indy SDK","Update nodes pool to 1.0.84",,"New Feature",Medium,Complete,"2017-08-09 15:24:30","2017-08-09 15:24:30",1
"Hyperledger Indy SDK","Windows Support: Configure jenkins agent on Windows node","Most tricky part is that we need infrastructure to start docker containers from this node with network configuration appropriate to connect indy pool nodes and libindy client.",Task,Medium,Complete,"2017-08-09 12:03:07","2017-08-09 12:03:07",3
"Hyperledger Indy SDK","MacOS Support: Configure jenkins agent on MacOS node","Need to attach existed (outside currently used private jenkins build network) MacOS machine to jenkins server as agent node and configure it:   * install docker   * create 'jenkins' user and configure ssh access by key   * install Java",Task,Medium,Complete,"2017-08-09 12:00:27","2017-08-09 12:00:27",2
"Hyperledger Indy SDK","CLI: Indy-SDK based CLI - Pools management","Implement Indy-SDK based CLI based on design provided on IS-380         This task scope:    - add genesis transaction  - create genesis transaction file  - connect  - disconnect  - list connections","New Feature",Medium,Complete,"2017-08-09 11:11:17","2017-08-09 11:11:17",2
"Hyperledger Indy SDK","DID-TLS: Design","We need to define approach of DID-TLS support in Indy SDK. It would be nice to provide some design document that we can discuss together and create the list of implementation stories or tasks.    For background on the DID-TLS specification see [here|https://docs.google.com/document/d/1-aPY1eeHdR_TnF7_WpEs58RZ_jNdDeptVrNEu3groFc/edit?usp=sharing].    The goal is to extend IndySDK to use this specification in both agent to agent communication and eventually agent to ledger as well. Currently IndySDK uses a patched version of CurveZMQ for those communications. At a high level the DID-TLS simply means that two systems will connect, authenticate and encrypt their communications using self-signed certificates found on Sovrin rather than using certificates signed by a central certificate authority.    Introducing DID-TLS to the IndySDK project will happen in phases, with later phases deprecating the work done in earlier phases. The first phase should include the following tasks:   # Create a mechanism for storing and retrieving RSA certificates from the ledger.   ## In the short-term this may be done as an ATTRIB.   ## Ideally as part of the DDO.   # Create a raw socket SSL/TLS library for use by IndySDK in its agent to agent communication.   ## Enable sender customization of the SNI hint   ### See the DID-TLS specification for more information.   ### May include “knock twice” workaround   ## Enable receiver parsing and handling of the SNI hint   ### See the DID-TLS specification for more information.   # Enable agent to agent communication to use either the new socket library or CurveZMQ.   ## Will agents listen for incoming connections over both CurveZMQ and raw sockets?","New Feature",Medium,"In Progress","2017-08-08 14:53:09","2017-08-08 14:53:09",3
"Hyperledger Indy SDK","Technical debt: Perform full cleanup in Java Wrapper tests","Some Java Wrapper tests don't perform full cleanup. For example, Agent tests leave opened listener sockerts.     I suggest to implement correct resources cleanup as it makes tests much easier to maintain. I suggest to look to python tests as for example.",Task,Medium,Complete,"2017-08-08 14:24:40","2017-08-08 14:24:40",3
"Hyperledger Indy SDK","Technical debt: Remove warnings in Java Wrapper","I see a lot of warning in Java Wrapper if open it in IDEA. I suggest to have clean code inspect report as it helps to find problems in our code.",Task,Medium,Complete,"2017-08-08 14:22:58","2017-08-08 14:22:58",2
"Hyperledger Indy SDK","Python Wrapper: Better tests organization of tests with fixtures",,Task,Medium,Complete,"2017-08-04 13:42:37","2017-08-04 13:42:37",3
"Hyperledger Indy SDK","Windows: Update java tests to be compatible with windows","* Fix python tests to support pool ip configuration   * Fix any other issues","New Feature",Medium,Complete,"2017-08-03 12:45:09","2017-08-03 12:45:09",3
"Hyperledger Indy SDK","Windows: Update python tests to be compatible with windows","* Fix python tests to support pool ip configuration   * Fix any other issues","New Feature",Medium,Complete,"2017-08-03 12:43:24","2017-08-03 12:43:24",3
"Hyperledger Indy SDK",".Net Wrapper: Review approach of handling events in Agent API","Current approach with providing observers in Agent API looks too unnetural for async/await based environment.     Actually in related tests we have to just create Tasks that waits for callback call. It looks like unnecessary boilerplate.     I suggest the follwoing:    Provide additional Agent::WaitForEvent method that requres list of listeners or connnections handles and returns Task that waits for the first event on this handles.    This idea is already implemented in python wrapper. See [https://github.com/hyperledger/indy-sdk/blob/master/wrappers/python/indy/agent.py] and corresponded tests for reference.","New Feature",Medium,Complete,"2017-08-01 12:02:58","2017-08-01 12:02:58",3
"Hyperledger Indy SDK","iOS Wrapper: Port test changes to iOS (Sprint 5)",,Task,Medium,Complete,"2017-08-01 10:02:16","2017-08-01 10:02:16",3
"Hyperledger Indy SDK","Integrate all pipelines to CI",,Task,High,Complete,"2017-07-31 16:35:16","2017-07-31 16:35:16",4
"Hyperledger Indy SDK","Support pool node v1.0.68",,"New Feature",Medium,Complete,"2017-07-31 11:08:47","2017-07-31 11:08:47",2
"Hyperledger Indy SDK","Documentation: Document pipelines structure",,"New Feature",Medium,Complete,"2017-07-26 07:32:27","2017-07-26 07:32:27",3
"Hyperledger Indy SDK","Python Wrapper: Integration tests (high cases) for indy_register_wallet_type",,"New Feature",Medium,Complete,"2017-07-26 07:29:37","2017-07-26 07:29:37",3
"Hyperledger Indy SDK","Python Wrapper: Implement wrapper for indey_register_wallet_type",,"New Feature",Medium,Complete,"2017-07-26 07:29:02","2017-07-26 07:29:02",3
"Hyperledger Indy SDK","zmq-pw crate relies on INDY_PREBUILT_DEPS_DIR env variable","build.rs of zmq-pw uses indy specific INDY{color:#444444}_PREBUILT_DEPS_DIR{color} env variable.    I suggest the following:   - Replace it witth ZMQ_LIB_DIR and ZMQ_INCLUDE_DIR variables   - If INDY_PREBUILT_DEPS_DIR env variable is present setup ZMQ_LIB_DIR and ZMQ_INCLUDE_DIR automatically by build.rs of libindy",Task,Medium,Complete,"2017-07-25 15:16:25","2017-07-25 15:16:25",2
"Hyperledger Indy SDK","milagro-crypto crate relies on SOVRIN_PREBUILT_DEPS_DIR env variable","build.rs of milagro-crypto uses outdated and indy specific {color:#444444}SOVRIN_PREBUILT_DEPS_DIR{color} env variable. For current moment it fails build on windows    I suggest the following:   - Replace it witth MILAGRO_LIB_DIR and MILAGRO_INCLUDE_DIR variables   - If INDY_PREBUILT_DEPS_DIR env variable is present setup MILAGRO_LIB_DIR and MILAGRO_INCLUDE_DIR automatically by build.rs of libindy   - Add similar automatic setup for all 3d party libraries location based on INDY_PREBUILT_DEPS_DIR variable",Task,Medium,Complete,"2017-07-25 15:07:41","2017-07-25 15:07:41",2
"Hyperledger Indy SDK",".Net Wrapper: Review of .net wrapper code",,Task,Medium,Complete,"2017-07-25 11:52:52","2017-07-25 11:52:52",3
"Hyperledger Indy SDK","Windows Support: Fix tests","For current moment some tests fail on the windows. We need to fix them.",Task,Medium,Complete,"2017-07-25 07:48:09","2017-07-25 07:48:09",8
"Hyperledger Indy SDK","Python Wrapper: Anoncreds API integration tests (High cases)",,"New Feature",Medium,Complete,"2017-07-24 21:13:18","2017-07-24 21:13:18",3
"Hyperledger Indy SDK","Rename libindy package name from indy-sdk to indy","* Rename libindy package name from indy-sdk to indy   * Rename corresponded cargo artifacts       {quote}[6:58]    Normally I see the crate name used with   ```extern```   statement is same as the name of crate on [https://crates.io|https://crates.io/]. Would it not be easier and more intuitive for us to do the same. Remember I am a noob in Rust so if what I feel is not right correct me. I do feel the sdk will be probably be used by several people outside of our organisation and it should be as intuitive as possible. How about we rename this to indysdk instead of indy-sdk and then we wont need this kind of difference. @daniel.hardman would you like to comment on this.    daniel.hardman    [7:11 PM]    Since the library is libindy, I believe indy is the correct crate name--not indysdk or even indy-sdk.    farooq.khan [7:25 PM]    @daniel.hardman do you mean that on [https://crates.io|https://crates.io/] also it should be named as “indy” or is it okay for it to be named as “indy-sdk” on crates.io (edited)    daniel.hardman   [10:46 PM]    I think it should be named indy; it's not the whole sdk, but rather just one library   asdasd  {quote}",Task,Medium,Complete,"2017-07-24 08:23:52","2017-07-24 08:23:52",1
"Hyperledger Indy SDK","Java Wrapper: register_wallet_type integration tests (high cases)",,Task,Medium,Complete,"2017-07-21 14:52:07","2017-07-21 14:52:07",3
"Hyperledger Indy SDK","Delete zmq from documentation and docker files",,Task,Medium,Complete,"2017-07-21 14:07:32","2017-07-21 14:07:32",1
"Hyperledger Indy SDK","Check MessagePack serialization stability in Rust",,"New Feature",Medium,Complete,"2017-07-20 13:37:12","2017-07-20 13:37:12",2
"Hyperledger Indy SDK","Python Wrapper: Anoncreds API",,"New Feature",Medium,Complete,"2017-07-19 16:08:30","2017-07-19 16:08:30",5
"Hyperledger Indy SDK","Java Wrapeer: Anoncreds API integration tests (high cases)",,Task,Medium,Complete,"2017-07-18 12:25:05","2017-07-18 12:25:05",5
"Hyperledger Indy SDK","iOS Wrapper:Make indy-pool docker image to be compatible with MacOS","{color:#444444}On MacOS we have an issue with creation of network interfaces for Docker network.{color} We have to hack code and docker image {color:#444444}to just use different ports on 127.0.0.1 instead of different ips.{color}         {color:#444444}This hack seems good to just make it default solution. {color}","New Feature",Medium,Complete,"2017-07-18 08:59:37","2017-07-18 08:59:37",3
"Hyperledger Indy SDK","Use MsgPack Serializaton for Pool ledger ","Indy-node (Ledger) is going to use MsgPack for  * Serialization of txns on the disk (all Ledgers including Pool ledger with NODE txns)  * Serialization used for calculating hashes of Merkle tree     Indy-sdk must:  * Use MsgPack for calculating of hashes (to compare merkle tree roots during catch-up process)  * Use MsgPack for serialization of Pool Ledger txns on the disk  * Expect incoming pool ledger txns (during catch-up) in MsgPack format","New Feature",Medium,Complete,"2017-07-18 08:53:31","2017-07-18 08:53:31",5
"Hyperledger Indy SDK","indy_create_pool_ledger_config fails if path to genesis_txn contains backslashes on Windows","When calling indy_create_pool_ledger_config and specifying the following config as the 3rd parameter it fails with CommonInvalidStructure:113    \{genesis_txn:C:\Users\srott\AppData\Local\Temp\.indy\temp.txn}     Changing the genesis_txn path to use forward slashes as the directory separator functions as a workaround.    Ideally this should also handle backslashes in Windows.",Task,Medium,Complete,"2017-07-17 10:43:38","2017-07-17 10:43:38",1
"Hyperledger Indy SDK","Agent API: Agent demo test",,"New Feature",Medium,Complete,"2017-07-14 14:46:36","2017-07-14 14:46:36",2
"Hyperledger Indy SDK","Java Wrapper: Support register_wallet_type ",,"New Feature",Medium,Complete,"2017-07-11 09:21:19","2017-07-11 09:21:19",3
"Hyperledger Indy SDK","Java Wrapper: Packages","Java wrapper artifacts are required for our first release. We need the following:    1. Get credentials to publish to maven central  2. Create script that will perform this piblishing  3. Integrate this script to CI    This will require a few things (some of which we may not be able to do right away):  1) A maven pom that builds the indy wraper such that it can depoly it to a maven repo in a way that handles the c callable libary  2) Setup and permision to pusblish to the Open Source Software Repository Hosting (OSSRH) (http://central.sonatype.org/pages/ossrh-guide.html)  3) Setup and permission to publish to the Maven Central repo    There are likely other steps that I don't know. I know that fabric is publishing a sdk to maven. (See https://search.maven.org/#artifactdetails%7Corg.hyperledger.fabric-sdk-java%7Cfabric-sdk-java%7C1.0.1%7Cjar)","New Feature",Medium,Complete,"2017-07-11 09:14:24","2017-07-11 09:14:24",3
"Hyperledger Indy SDK","Java Wrapper: CI Pipeline",,"New Feature",Medium,Complete,"2017-07-11 09:12:51","2017-07-11 09:12:51",5
"Hyperledger Indy SDK","Java Wrapper: Agent API integration tests (high cases)",,Task,Medium,Complete,"2017-07-11 09:05:12","2017-07-11 09:05:12",5
"Hyperledger Indy SDK","Java Wrapper: Ledger API integration tests (high cases)",,Task,Medium,Complete,"2017-07-11 09:04:19","2017-07-11 09:04:19",3
"Hyperledger Indy SDK","Java Wrapper: Demo integration tests",,Task,Medium,Complete,"2017-07-11 09:03:34","2017-07-11 09:03:34",3
"Hyperledger Indy SDK","Java Wrapper: Pool API integration tests (high cases)",,Task,Medium,Complete,"2017-07-11 09:02:39","2017-07-11 09:02:39",3
"Hyperledger Indy SDK","Java Wrapper: Signus API integration tests (high cases)",,Task,Medium,Complete,"2017-07-11 09:01:58","2017-07-11 09:01:58",3
"Hyperledger Indy SDK","Java Wrapper: Wallet API integration tests (high cases)",,Task,Medium,Complete,"2017-07-11 09:00:20","2017-07-11 09:00:20",3
"Hyperledger Indy SDK","CI: Use fixed sovrin-node version for Jenkins pipeline",,"New Feature",Highest,Complete,"2017-07-10 12:01:47","2017-07-10 12:01:47",1
"Hyperledger Indy SDK","Implement compatibility with the pool 0.4.15 (or later)",,"New Feature",High,Complete,"2017-07-10 10:41:35","2017-07-10 10:41:35",2
"Hyperledger Indy SDK","iOS Wrapper: Setup dependencies for libsovrin-core pod",,"New Feature",Medium,Complete,"2017-07-06 13:35:12","2017-07-06 13:35:12",5
"Hyperledger Indy SDK","Java Wrapper: Code review of Java Wrapper","Perform code review of Java Wrapper and discuss feerback with Marcus and team.",Task,Medium,Complete,"2017-07-05 11:17:48","2017-07-05 11:17:48",1
"Hyperledger Indy SDK","Pysovrin Interoperability: replace claim_def_seq_no to issuer_did and schema_seq_no for Claim Definition in Pysovrin","Change claim_def_seq_no to schema_seq_no and issuer_did","New Feature",Medium,Complete,"2017-07-05 08:45:50","2017-07-05 08:45:50",3
"Hyperledger Indy SDK","iOS Wrapper: Port sovrin_build_get_txn_request and corresponded tests",,"New Feature",Medium,Complete,"2017-07-04 12:01:41","2017-07-04 12:01:41",3
"Hyperledger Indy SDK","Pysovrin Interoperability: GET_TXN request support in indy sdk",,"New Feature",Medium,Complete,"2017-07-04 10:10:35","2017-07-04 10:10:35",5
"Hyperledger Indy SDK","MacOS Support: CI Pipeline","Provide CI piepline for MacOS","New Feature",Medium,Complete,"2017-07-04 10:01:17","2017-07-04 10:01:17",5
"Hyperledger Indy SDK","Python Wrapper: CI pipeline","Provide:   * CI pipeline",Task,Medium,Complete,"2017-07-04 09:53:08","2017-07-04 09:53:08",5
"Hyperledger Indy SDK","iOS Wrapper: Agent API wrapper update","Need to integrate latest changes to Agent API to iOS wrapper",Task,Medium,Complete,"2017-07-04 09:39:11","2017-07-04 09:39:11",5
"Hyperledger Indy SDK","Technical debt: Replace sovrin_ prefix to indy_ in iOS wrapper",,"New Feature",High,Complete,"2017-07-03 16:15:32","2017-07-03 16:15:32",3
"Hyperledger Indy SDK","Pysovrin Interoperability: Integration tests for GET_TXN request (Medium Cases)",,Task,Medium,Complete,"2017-07-03 16:07:47","2017-07-03 16:07:47",3
"Hyperledger Indy SDK","Pysovrin Interoperability: Interoperability tests","Need to create a tests for libsovrin-pysovrin interoperability","New Feature",Medium,Complete,"2017-07-03 15:37:00","2017-07-03 15:37:00",8
"Hyperledger Indy SDK","Pysovrin Interoperability: replace claim_def_seq_no to issuer_did and schema_seq_no for Claim Definition in indy-sdk","Change claim_def_seq_no to schema_seq_no and issuer_did","New Feature",Medium,Complete,"2017-07-03 15:35:23","2017-07-03 15:35:23",3
"Hyperledger Indy SDK","Pysovrin Interoperability: Proof","Implement required changes for Proof","New Feature",Medium,Complete,"2017-07-03 15:32:01","2017-07-03 15:32:01",3
"Hyperledger Indy SDK","Agent API: Update UML diagram for Agent2Agent communication",,Task,High,Complete,"2017-07-03 15:30:47","2017-07-03 15:30:47",1
"Hyperledger Indy SDK","Pysovrin Interoperability: Proof Request","Implement required changes for proof request  ","New Feature",Medium,Complete,"2017-07-03 15:30:34","2017-07-03 15:30:34",3
"Hyperledger Indy SDK","Pysovrin Interoperability: Claim","Implement required changes for Claim","New Feature",Medium,Complete,"2017-07-03 15:28:51","2017-07-03 15:28:51",3
"Hyperledger Indy SDK","Pysovrin Interoperability: Integration tests for GET_TXN request (High Cases)",,"New Feature",Medium,Complete,"2017-07-03 15:24:29","2017-07-03 15:24:29",3
"Hyperledger Indy SDK","Python Wrapper: Infrastructure",,Task,Medium,Complete,"2017-07-03 15:09:30","2017-07-03 15:09:30",9
"Hyperledger Indy SDK","iOS Wrapper: Port test changes to iOS (Sprint 4)",,Task,Medium,Complete,"2017-07-03 15:08:29","2017-07-03 15:08:29",3
"Hyperledger Indy SDK","RHEL Support: CI Pipeline","Provide Amazon Linux CI pipeline",Task,Medium,Complete,"2017-07-03 14:53:01","2017-07-03 14:53:01",3
"Hyperledger Indy SDK","RHEL Support: Packages","* Scripts for rpm creation and publishing",Task,Medium,Complete,"2017-07-03 14:52:33","2017-07-03 14:52:33",3
"Hyperledger Indy SDK","MacOS Support: Port libzmq-pw to MacOS","There is no need to do the task due changes on https://jira.hyperledger.org/browse/IS-7",Task,Highest,Complete,"2017-07-03 14:11:33","2017-07-03 14:11:33",3
"Hyperledger Indy SDK","Wallet API: Integration tests for sovrin_register_wallet (Medium cases)",,Task,Medium,Complete,"2017-07-03 13:28:34","2017-07-03 13:28:34",2
"Hyperledger Indy SDK","Wallet API: Integration tests for sovrin_register_wallet (High cases)","Implement integration tests for sovrin_register_wallet (High cases)",Task,Medium,Complete,"2017-07-03 13:27:43","2017-07-03 13:27:43",5
"Hyperledger Indy SDK","Signus API: Integration tests for encrypt/decrypt (Medium cases)","Implement Medium test cases for Signus API:   * sovrin_encrypt   * sovrin_decrypt    Medium level cases (beta version):   * Precondition checking:   ** Invalid handle   ** Wallet doesn't correspond to pool   ** Invalid json format   ** Invalid json structure (missed fields and etc...)   ** Invalid base58   ** Invalid crypto keys lenght and format   ** Invalid crypto primitives (bigints, points)   ** Invalid complex crypto structures (anoncreds structures mostly)   ** Invalid responses from 3d parties (Ledger, Agent)",Task,Medium,Complete,"2017-07-03 13:02:41","2017-07-03 13:02:41",2
"Hyperledger Indy SDK","Signus API: Integration tests for encrypt/decrypt (High cases)","Implement High test cases for Signus API:   * sovrin_encrypt   * sovrin_decrypt    High cases (alpha version):   * Normal cases. Note that there can be multiple execution branches. We need to cover at each branch. Branches examples:   ** Entity cached in the wallet   **  Entity should be taken from the ledger   * Error cases that require an explicit recovering procedure. Examples:   ** Invalid wallet credentials   ** No entity found in the wallet   ** No entity found in the ledger   ** Transaction doesn't allow for current identity   ** Unknown crypto   ** Claim doesn't correspond to scheme, proof request doesn't correspond to claim and etc...   ** Revocation registry is full and etc...",Task,Medium,Complete,"2017-07-03 13:00:54","2017-07-03 13:00:54",2
"Hyperledger Indy SDK","Ledger API: Review and update High and Medium level test cases","The current structure of Ledger API tests is a bit outdated from our latest vision. It requers some refactoring for better support. ",Task,Medium,"To Develop","2017-07-03 12:41:44","2017-07-03 12:41:44",3
"Hyperledger Indy SDK","CI: change IP for nodes in pool to 127.0.0.1","Change CI dockerfile for nodes pool to unify with iOS environment.",Task,High,Complete,"2017-06-30 17:17:12","2017-06-30 17:17:12",3
"Hyperledger Indy SDK","indy_sign and indy_verify_signature should support arbitrary byte array","Right now, {indy_sign}} and {{indy_verify_signature}} can create/verify signatures for the JSON messages that are sent to the ledger. In these methods, a JSON message is serialized to a byte array using a custom algorithm that is not used outside of Indy/Sovrin ledger communication. Also, the signature is automatically inserted into the JSON message.    I think it would be very useful if those methods could be used more generically, to create/verify signatures on any arbitrary byte array supplied by the library user.    [ Creating this JIRA issue and closing the Github issue: [https://github.com/hyperledger/indy-sdk/issues/32] ]",Task,Medium,Complete,"2017-06-29 22:49:40","2017-06-29 22:49:40",4
"Hyperledger Indy SDK","iOS Wrapper: Port libzmq-pw to iOS",,Task,Highest,Complete,"2017-06-29 15:35:03","2017-06-29 15:35:03",8
"Hyperledger Indy SDK","Windows Support: Installation package","* Decide about installation package format (zip + READE or msi or something else)   * Create scripts for installation package creation   * Integrate this script to CI pipeline","New Feature",Medium,Complete,"2017-06-29 09:39:03","2017-06-29 09:39:03",3
"Hyperledger Indy SDK","Technical debt: Ignore some fileds in signature_serializer","Python code (nodes, python client) ignore some fields (e.g. signature) in JSON while serialize for signing. But libsovrin code serialize all fields and as result signature will not be same.",Task,High,Complete,"2017-06-26 12:42:35","2017-06-26 12:42:35",0
"Hyperledger Indy SDK","RHEL Support: libsodium package","INDY-148 clarifies that although we can build on RHEL-based distros, we have to compile libsodium and zmq from source.    I would like updated packages for these libraries, so dependencies for the sdk don't have to be compiled by hand.",Task,Medium,Complete,"2017-06-24 22:24:19","2017-06-24 22:24:19",2
"Hyperledger Indy SDK","Pysovrin Interoperability: Support GET_TXN in Pysovrin","Implement query to get one tnx by its seqNo.","New Feature",High,Complete,"2017-06-23 15:37:04","2017-06-23 15:37:04",5
"Hyperledger Indy SDK","Technical debt: Replace sovrin_ prefix to indy_",,"New Feature",High,Complete,"2017-06-22 12:51:56","2017-06-22 12:51:56",5
"Hyperledger Indy SDK","Technical debt: Refactoring of libindy tests to perform correct full cleanup","We have big amount of libindy tests that doesn't perform resources cleanup. As result we have to use unique names, ports and etc in a lot of tests. It makes support of tests a bit complicated.     This ticket is about refactoring of tests to perform full cleanup:  1. Avoid usage of long custom names. Just use pool1 or wallet1. Look to python/java wrapper.    2. Close all opened handles  3. Think about involving of fixtures like or before/after like approach.",Task,Medium,Complete,"2017-06-22 12:10:23","2017-06-22 12:10:23",5
"Hyperledger Indy SDK","Release: Define releasing workflow for libsovrin and wrappers","Design, align and document the following points:   * Define release workflow (most probable resuse workflow from core team)   * Define exact list of artifacts we plan to release now and in the future   * Define naming and versioning approach for all articacts   * Define how to sync releases between node, libindy and wrappers   * Define release notes creation process    I expect release-workflow.md document to be created","New Feature",High,Complete,"2017-06-20 15:16:04","2017-06-20 15:16:04",3
"Hyperledger Indy SDK","Wallet API: Implement sovrin_register_wallet_type API call",,"New Feature",High,Complete,"2017-06-20 15:12:58","2017-06-20 15:12:58",8
"Hyperledger Indy SDK","Technical debt: Remove compilation settings allow unused_variables and dead_code",,Task,Medium,Complete,"2017-06-20 14:53:21","2017-06-20 14:53:21",2
"Hyperledger Indy SDK","Pool API: Consistency Proofs in Catch Up","Implement check for consistency proofs in catch up    Note: ledger status messages also should be handled properly.","New Feature",Medium,Complete,"2017-06-20 06:11:26","2017-06-20 06:11:26",5
"Hyperledger Indy SDK","Pool API: Integration tests (Medium cases)","Implement Medium test cases for Pool API:   * *Create*   * *Open*   * Refresh   * Close   * Delete    Medium level cases (beta version):   * Precondition checking:   ** Invalid handle   ** Invalid name   ** Invaid file path   ** Wallet doesn't correspond to pool   ** Invalid json format   ** Invalid json structure (missed fields and etc...)   ** Invalid base58   ** Invalid crypto keys lenght and format   ** Invalid crypto primitives (bigints, points)   ** Invalid complex crypto structures (anoncreds structures mostly)   ** Invalid responses from 3d parties (Ledger, Agent)",Task,Medium,Complete,"2017-06-20 06:11:25","2017-06-20 06:11:25",3
"Hyperledger Indy SDK","Pool API: Timeout for outgoing message","Implement timeout logic for outgoing message.","New Feature",Medium,Complete,"2017-06-20 06:11:25","2017-06-20 06:11:25",3
"Hyperledger Indy SDK","Anoncreds API: Revocation integration testing (High cases)","Implement High test cases for Anoncreds API:   * sovrin_issuer_create_and_store_revoc_reg   *  sovrin_issuer_revoke_claim    High cases (alpha version):   * Normal cases. Note that there can be multiple execution branches. We need to cover at each branch. Branches examples:   ** Entity cached in the wallet   ** Entity should be taken from the ledger   * Error cases that require an explicit recovering procedure. Examples:   ** Invalid wallet credentials   ** No entity found in the wallet   ** No entity found in the ledger   ** Unknown crypto   ** Claim doesn't correspond to scheme, proof request doesn't correspond to claim and etc...   ** Revocation registry is full and etc...","New Feature",Medium,Complete,"2017-06-20 05:57:27","2017-06-20 05:57:27",5
"Hyperledger Indy SDK","Anoncreds API: Type-3 pairing based revocation","Implement type-3 pairing based revocation","New Feature",Medium,Complete,"2017-06-20 05:57:26","2017-06-20 05:57:26",8
"Hyperledger Indy SDK","Anoncreds API: Revocation integration testing (Medium cases)","Implement Medium test cases for Anoncreds API:   * sovrin_issuer_create_and_store_revoc_reg   *  sovrin_issuer_revoke_claim    Medium level cases (beta version):   * Precondition checking:   ** Invalid handle   ** Wallet doesn't correspond to pool   ** Invalid json format   ** Invalid json structure (missed fields and etc...)   ** Invalid base58   ** Invalid crypto keys lenght and format   ** Invalid crypto primitives (bigints, points)   ** Invalid complex crypto structures (anoncreds structures mostly)   ** Invalid responses from 3d parties (Ledger)","New Feature",Medium,Complete,"2017-06-20 05:57:25","2017-06-20 05:57:25",5
"Hyperledger Indy SDK","iOS Wrapper: CD and Packaging","Provide:   * Automated build   * Scripts for packages creation and publishing -(pods)- as binaries artifcats",Task,Medium,Complete,"2017-06-19 16:37:11","2017-06-19 16:37:11",8
"Hyperledger Indy SDK","Windows Support: CI pipeline","* Provide CI pipeline for Windows",Task,Medium,Complete,"2017-06-16 15:06:12","2017-06-16 15:06:12",8
"Hyperledger Indy SDK","Ubuntu Support: Packages","* Provide script for debs creation   * Integrate this script with CI","New Feature",Medium,Complete,"2017-06-16 15:06:12","2017-06-16 15:06:12",3
"Hyperledger Indy SDK","Technical debt: Trace helpers and rules","* implement trace helpers for errors to throw   * determine format of trace and add macros if default is not enough   * code refactoring to use this helpers in all places",Task,Medium,Complete,"2017-06-16 15:06:12","2017-06-16 15:06:12",2
"Hyperledger Indy SDK","Agent API: Integration testing (Medium cases)",,Task,Medium,Complete,"2017-06-16 15:06:11","2017-06-16 15:06:11",5
"Hyperledger Indy SDK","Wallet API: Add security to wallet",,"New Feature",Medium,Complete,"2017-06-16 15:06:10","2017-06-16 15:06:10",0
"Hyperledger Indy SDK","IOS Wrapper: Agent API integration tests (High cases)","Need to implement the high cases tests for functions:   * agentConnect   * agentListen   * agentSend   * agentCloseConnection   * agentCloseListener",Task,Medium,Complete,"2017-06-16 15:06:10","2017-06-16 15:06:10",5
"Hyperledger Indy SDK","Python Wrapper: Pool API",,"New Feature",Medium,Complete,"2017-06-16 15:06:07","2017-06-16 15:06:07",3
"Hyperledger Indy SDK","Python Wrapper: Ledger API",,"New Feature",Medium,Complete,"2017-06-16 15:06:07","2017-06-16 15:06:07",3
"Hyperledger Indy SDK","Python Wrapper: Agent API",,"New Feature",Medium,Complete,"2017-06-16 15:06:07","2017-06-16 15:06:07",5
"Hyperledger Indy SDK","Python Wrapper: Wallet API",,"New Feature",Medium,Complete,"2017-06-16 15:06:07","2017-06-16 15:06:07",3
"Hyperledger Indy SDK","Python Wrapper: Signus API",,"New Feature",Medium,Complete,"2017-06-16 15:06:07","2017-06-16 15:06:07",3
"Hyperledger Indy SDK","Python Wrapper: Port demo tests",,Task,Medium,Complete,"2017-06-16 15:06:07","2017-06-16 15:06:07",5
"Hyperledger Indy SDK","Python Wrapper: Pool API integration tests (High cases)",,Task,Medium,Complete,"2017-06-16 15:06:07","2017-06-16 15:06:07",3
"Hyperledger Indy SDK","Python Wrapper: Ledger API integration tests (High cases)",,Task,Medium,Complete,"2017-06-16 15:06:06","2017-06-16 15:06:06",3
"Hyperledger Indy SDK","Python Wrapper: Agent API integration tests (High cases)",,Task,Medium,Complete,"2017-06-16 15:06:06","2017-06-16 15:06:06",3
"Hyperledger Indy SDK","Python Wrapper: Wallet API integration tests (High cases)",,Task,Medium,Complete,"2017-06-16 15:06:06","2017-06-16 15:06:06",3
"Hyperledger Indy SDK","Python Wrapper: Signus API integration tests (High cases)",,Task,Medium,Complete,"2017-06-16 15:06:06","2017-06-16 15:06:06",3
"Hyperledger Indy SDK","MacOS Support: Build libsovrin for MacOS","* Try to build   * Solve all issues in 3d party dependencies   * Solve all issues in libsovrin   * Provide instruction","New Feature",Medium,Complete,"2017-06-16 15:06:05","2017-06-16 15:06:05",3
"Hyperledger Indy SDK","MacOS Support: CD and Packages","* Automate artifacts creation and publishing","New Feature",Medium,Complete,"2017-06-16 15:06:05","2017-06-16 15:06:05",3
"Hyperledger Indy SDK","Logging: Libindy should provide API for logger configuration that can be integrated with application logging approach.","For the current moment libindy is linked with simple logger that outputs logs to stdout/stderr, but best practice for libraries is to use logger that will be provided by application to re-use application logging facilities.     We suggest the following:    - Libindy should provide indy_set_logger call that will allow application to register logging callbacks  - Libindy should provide indy_get_logger call that will allow plugins (payments, storages) to re-use logger from libindy  - For development purposes libindy should also provide set_default_logger call that will allow to register simple logger bundled with libindy. We can keep the same logger behaviour as we have for now. I only suggest to disable logging by default.    Acceptance criteria:    - Design is performed and documented  - API is implemented with TDD aprroach  - Good integration tests coverage is provided  - Documentation is provided  - Migration guide is updated  - Dependent teams (vcx, libsovtoken) are notified about expected changes         I also suggest to review thread in [https://github.com/hyperledger/indy-sdk/issues/19] for some ideas.","New Feature",Medium,Complete,"2017-06-16 15:06:05","2017-06-16 15:06:05",5
