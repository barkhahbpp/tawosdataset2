Name,Title,Description,Type,Priority,Status,Creation_Date,Estimation_Date,Story_Point
"The Mongo C++ driver","Bump minimum required C driver","Needed for Client-Side Field Level Encryption.    If we are releasing a 3.6.0-beta, raise the minimum to 1.17.0-beta2. The C++ master branch currently relies on API released in the 1.17.0 beta (hedged reads, for one thing).",Improvement,"Major - P3",Closed,"2020-03-31 17:46:40","2020-03-31 16:46:40",0
"The Mongo C++ driver","Implement b_type struct -> bson_value_t conversions","This will allow bson_value::value's to be constructed from bson_value::views (aka making an owning copy from an un-owning bson value).",Improvement,"Major - P3",Closed,"2020-03-30 17:39:58","2020-03-30 16:39:58",1
"The Mongo C++ driver","Add URI option to disable certificate revocation checking","See DRIVERS-975 for details.",Improvement,"Major - P3",Closed,"2020-03-25 18:35:20","2020-03-25 18:35:20",0
"The Mongo C++ driver","Driver support for server Hedged Reads",,"New Feature","Major - P3",Closed,"2020-03-20 20:07:18","2020-03-20 20:07:18",2
"The Mongo C++ driver","Ensure that the WriteConcernError errInfo object is propagated","See DRIVERS-967 for details.",Improvement,"Major - P3",Closed,"2020-03-17 19:43:44","2020-03-17 19:43:44",0
"The Mongo C++ driver","Fix static linking against C driver","The C++ driver links against deprecated C driver targets, which were removed in CDRIVER-3414, breaking the build.  Update the C++ project to link against valid C driver targets.",Task,"Major - P3",Closed,"2020-03-03 13:47:57","2020-03-03 13:47:57",1
"The Mongo C++ driver","Do not repeatedly resume if getMore receives the same error","See DRIVERS-907 for details.",Improvement,"Major - P3",Closed,"2020-03-02 19:54:46","2020-03-02 19:54:46",0
"The Mongo C++ driver","Allow hinting the delete command","See DRIVERS-908 for details.","New Feature","Major - P3",Closed,"2020-03-02 19:52:58","2020-03-02 19:52:58",1
"The Mongo C++ driver","Reduce Client Time To Recovery On Topology Changes",,"New Feature","Major - P3",Closed,"2020-02-12 15:25:49","2020-02-12 15:25:49",0
"The Mongo C++ driver","Unify behavior around configuration for replica set discovery ",,Improvement,"Major - P3",Closed,"2020-02-10 20:55:22","2020-02-10 20:55:22",0
"The Mongo C++ driver","Raise error if hint specified for unacknowledged update using OP_MSG or OP_UPDATE","See DRIVERS-790 for details.",Improvement,"Major - P3",Closed,"2020-01-22 20:26:07","2020-01-22 20:26:07",0
"The Mongo C++ driver","OCSP Support",,Improvement,"Major - P3",Closed,"2020-01-22 15:12:33","2020-01-22 15:12:33",1
"The Mongo C++ driver","Test 3.6 drivers against 4.2 servers","See DRIVERS-788 for details.",Task,"Major - P3",Closed,"2019-12-17 19:39:00","2019-12-17 19:39:00",1
"The Mongo C++ driver","Improve testing around default writeConcern","See DRIVERS-440 for details.",Task,"Major - P3",Closed,"2019-11-04 10:55:41","2019-11-04 10:55:41",1
"The Mongo C++ driver","Collection and index creation in multi-doc txns","See DRIVERS-706 for details.",Task,"Major - P3",Closed,"2019-11-04 10:27:59","2019-11-04 10:27:59",0
"The Mongo C++ driver","Create language specific copy/pasteable FLE tutorials","{html}  <!--This block of HTML and the script in it auto-populate the SPEC ticket description on page load.-->      <div id=script-target-wrapper>          <br>          <b>DRIVERS Ticket Description</b>          <div id=script-target>              Script Target - If you can read this text, the script has failed              <script>                  $.get('https://jira.mongodb.org/browse/DRIVERS-752', function(data) {                      var description = $(data).find(#description-val);                      description.find(#script-target-wrapper).remove();                      $(#script-target).html(description);                  });              </script>          </div>      </div>  {html}      ",Task,"Major - P3",Closed,"2019-10-21 18:52:11","2019-10-21 17:52:11",1
"The Mongo C++ driver","support ability to pass hint to update","See DRIVERS-751 for details.","New Feature","Major - P3",Closed,"2019-10-21 18:49:11","2019-10-21 17:49:11",1
"The Mongo C++ driver","Test Planned Maintenance Scenarios in Drivers","See DRIVERS-560 for details.","New Feature","Major - P3",Open,"2019-02-11 22:53:58","2019-02-11 22:53:58",3
"The Mongo C++ driver","Causally Consistent Reads support ",,"New Feature","Major - P3",Closed,"2017-08-01 21:32:12","2017-08-01 20:32:12",1
"The Mongo C++ driver","All writes retryable support",,"New Feature","Major - P3",Closed,"2017-08-01 21:26:16","2017-08-01 20:26:16",1
"The Mongo C++ driver","Change stream support",,"New Feature","Major - P3",Closed,"2017-07-31 19:22:34","2017-07-31 18:22:34",3
"The Mongo C++ driver","fix view_or_value's description ","Pull request #586 on Github, which fixes a mistake in the documentation referring to a document::view instead of a document::value.",Bug,"Major - P3",Closed,"2017-07-28 17:05:18","2017-07-28 16:05:18",0.5
"The Mongo C++ driver","Provide example and docs for using collection::distinct","The {{distinct}} method returns a cursor, but the cursor only has a single document like this:        This is surprising.  We should provide example code and improve the docs to clarify this situation.",Improvement,"Trivial - P5",Open,"2017-07-24 16:04:11","2017-07-24 15:04:11",1
"The Mongo C++ driver","OP_MSG support",,"New Feature","Major - P3",Closed,"2017-07-20 16:08:25","2017-07-20 15:08:25",0
"The Mongo C++ driver","Implement client sessions in the driver","We need to implement the drivers [session spec|https://docs.google.com/document/d/1DGCdfracpwyN9Wm_-3vkHXD-vI_yga7taqHhM3nVNB4/edit?ts=596d1e89#heading=h.a383qv2dd29d] and tests for the logical sessions that server version 3.6 is introducing.",Epic,"Major - P3",Closed,"2017-07-19 22:21:26","2017-07-19 21:21:26",3
"The Mongo C++ driver","Array Update Improvements",,"New Feature","Major - P3",Closed,"2017-07-10 22:32:35","2017-07-10 21:32:35",1
"The Mongo C++ driver","Bulk write operations don't inherit write concern from the collection","In our implementation of collection::bulk_write, we're currently not using the collection's write concern due to the call to libmongoc::bulk_operation_set_collection getting a new mongoc_collection_t from the client rather than using the existing one with the options set. To remedy this, we should replace the call to libmongoc::bulk_operation_new in the constructor for bulk_write with a call to libmongoc::collection_create_bulk_operation, which properly handles inheriting the write concern from the collection.",Bug,"Major - P3",Closed,"2017-07-07 21:07:54","2017-07-07 20:07:54",1
"The Mongo C++ driver","Implement command monitoring API","We currently have no implementation of the [command monitoring API|https://github.com/mongodb/specifications/blob/master/source/command-monitoring/command-monitoring.rst]. We should implement this, possibly by wrapping the [C driver's implementation|http://mongoc.org/libmongoc/current/application-performance-monitoring.html].    As part of this work, we should implement the [spec tests|https://github.com/mongodb/specifications/blob/master/source/command-monitoring/tests/README.rst] for command monitoring to ensure that our implementation works as expected.","New Feature","Major - P3",Closed,"2017-07-05 21:26:06","2017-07-05 20:26:06",2
"The Mongo C++ driver","Add API for subscribing to SDAM events","The [SDAM spec|https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring-monitoring.rst] requires that drivers allow users to subscribe to a queue of events. We should implement an API that wraps the [C driver's|http://mongoc.org/libmongoc/current/application-performance-monitoring.html] to conform to the spec.","New Feature","Major - P3",Closed,"2017-07-05 19:44:31","2017-07-05 18:44:31",2
"The Mongo C++ driver","Implement integration tests for authentication","We currently have no integration tests for authentication, so we should implement some. This includes updating our evergreen configuration to have mongo orchestration spin up servers for the driver to authenticate to.",Task,"Major - P3",Open,"2017-06-29 17:53:13","2017-06-29 16:53:13",4
"The Mongo C++ driver","Investigate issues with load path for macos-1012 variant","To get the example projects to correctly find the dylib on MacOS 10.12, we currently are [manually adding the path to the library to the DYLD_LIBRARY_PATH variable|https://github.com/mongodb/mongo-cxx-driver/blob/bd79b587f787bfc2d6940c726385b2bcc8dcaae7/examples/projects/bsoncxx/pkg-config/shared/build.sh#L23]. We should figure out why this is necessary and see if we can find a way to get it to work without it.",Task,"Major - P3",Open,"2017-06-28 20:41:32","2017-06-28 19:41:32",2
"The Mongo C++ driver","Generate microbenchmark scores","Once we've implemented all of the microbenchmarks, we should generate a final set of scores for the driver and compare them to those of the other drivers.",Task,"Major - P3",Closed,"2017-06-21 20:24:51","2017-06-21 19:24:51",1
"The Mongo C++ driver","Implement Parallel microbenchmarks","After the skeleton code for running a task is written (as part of CXX-1373), we can write the code to implement the parallel microbenchmarks. Part of this work should involve investigating multiple ways to execute the task (e.g. trying out different numbers of threads for parallel execution) to find the fastest way to do each task.",Task,"Major - P3",Closed,"2017-06-21 20:23:36","2017-06-21 19:23:36",4
"The Mongo C++ driver","Implement Multi-Doc","After the skeleton code for running a task is written (as part of CXX-1373), we can write the code to implement the Multi-Doc microbenchmarks.",Task,"Major - P3",Closed,"2017-06-21 20:21:21","2017-06-21 19:21:21",2
"The Mongo C++ driver","Implement Single-Doc microbenchmarks","After the skeleton code for running a task is written (as part of CXX-1373), we can write the code to implement the Single-Doc microbenchmarks.",Task,"Major - P3",Closed,"2017-06-21 20:18:59","2017-06-21 19:18:59",2
"The Mongo C++ driver","Implement BSON microbenchmarks","After the skeleton code for running a task is written (as part of CXX-1373), we can write the code to implement the BSON microbenchmarks.",Task,"Major - P3",Closed,"2017-06-21 20:16:32","2017-06-21 19:16:32",2
"The Mongo C++ driver","Write scoring code for microbenchmarks","As part of the work for implementing the microbenchmark suite, we should design and implement classes for both individual iteration scores (including the wall-clock runtime of the task and the number of MB processed) and individual benchmark scores (including a sorted array of iteration scores, a set of benchmark types corresponding to the given benchmark, and a method for getting the _n_th percentile of the benchmark). Additionally, we'll need to implement functionality for doing composite score calculations.",Task,"Major - P3",Closed,"2017-06-21 20:14:31","2017-06-21 19:14:31",1
"The Mongo C++ driver","Implement skeleton for running microbenchmarks","As part of the work to implement the microbenchmarking suite, we should start by implementing a skeleton for running a single microbenchmark (i.e. setup, before, do, after, and teardown, as described in the document), along with any other necessary helper functions (e.g. parsing a JSON file into a vector of BSON documents).",Task,"Major - P3",Closed,"2017-06-21 20:10:20","2017-06-21 19:10:20",2
"The Mongo C++ driver","Backport fix for b_timestamp fields appending in wrong order","Backports CXX-1367",Bug,"Major - P3",Closed,"2017-06-16 18:07:54","2017-06-16 17:07:54",0.5
"The Mongo C++ driver","Test maxTimeMS is an accepted option for createIndexes and dropIndexes command",,Task,"Major - P3",Closed,"2017-06-13 17:04:00","2017-06-13 16:04:00",1
"The Mongo C++ driver","Replace osx-1010 Evergreen variant with macos-1012","The Evergreen osx-1010 variant is being replaced with the macos-1012 builder, so we should switch to that.",Task,"Major - P3",Closed,"2017-06-12 18:14:01","2017-06-12 17:14:01",0.5
"The Mongo C++ driver","bsoncxx::types::timestamp t and i parts are reversed","The timestamp and increment fields of bsoncxx::types::timestamp are being passed incorrectly to bson_append_timestamp in the core builder. As part of the work of fixing it, we should write a regression test for the bug.    This fix will need to be backported to at least 3.1.x.    Previous description:    {quote}    Hi!  Is it normal that parts of timestamp i and t are confused?      {quote}",Bug,"Minor - P4",Closed,"2017-06-10 15:38:13","2017-06-10 14:38:13",0.5
"The Mongo C++ driver","Eliminate warnings generated by MSVC","In  CXX-1312, we are eliminating warnings generated by clang and gcc from a certain set of flags. However, MSVC does not use the same set of warning flags as clang and gcc. We should determine which warnings we want to enable for our Windows builds and implement any necessary fixes to make the build clean (including adding pragmas to disable the warnings from being checked in libbson and libmongoc).",Task,"Major - P3",Open,"2017-06-09 18:39:43","2017-06-09 17:39:43",3
"The Mongo C++ driver","Wrap internal usage of libbson/libmongoc headers in pragmas to disable warnings","In preparation for CXX-1312, we should wrap all usages of bson.h and mongoc.h in pragams to disable warnings.",Task,"Major - P3",Closed,"2017-06-08 21:33:50","2017-06-08 20:33:50",1
"The Mongo C++ driver","Replace index mock tests with integration tests","In preparation for the changes in CXX-1359, we should rewrite the mock tests pertaining to indexes as integration tests.",Task,"Major - P3",Closed,"2017-06-08 18:49:03","2017-06-08 17:49:03",1
"The Mongo C++ driver","Replace dummy index view implementation with actual implementation","As the final part of the work for implementing the index view API, we should replace the dummy implementation with a working one, ensuring that the tests we wrote pass for the new implementation.","New Feature","Major - P3",Closed,"2017-06-06 19:34:21","2017-06-06 18:34:21",1
"The Mongo C++ driver","Write tests for index view implementation","As part of the work for implementing the index view API, we should implement tests for the new API. To ensure that these tests are falsifiable, we should write these independently from the implementation of the API itself.",Task,"Major - P3",Closed,"2017-06-06 19:28:55","2017-06-06 18:28:55",1
"The Mongo C++ driver","Implement index_model and add dummy implementation of index_view","As part of the work to implement the index view spec, we should implement an index_model class as well as writing a dummy implementation of an index_view class. This will enable us to write tests for the index view implementation before fully implementing it.","New Feature","Major - P3",Closed,"2017-06-06 19:25:00","2017-06-06 18:25:00",1
"The Mongo C++ driver","Replace use of index options in API with BSON document","Currently, we use mongocxx::options::index to pass options to our index-related API methods. This has the downside of requiring changes whenever the server begins supporting new options. To mitigate this, we should change the index-related API methods to take a BSON document rather than an options object. As part of the work, we should implement a [cast operator|http://en.cppreference.com/w/cpp/language/cast_operator] to bsoncxx::document::value for mongocxx::options::index to enable existing code to continue working.","New Feature","Major - P3",Closed,"2017-06-06 19:21:28","2017-06-06 18:21:28",1
"The Mongo C++ driver","Add test and implementation for max staleness of -1 specified in URI","{quote} We should add a test that ensures that setting a max staleness of -1 in the URI causes our getter to return nullopt rather than -1. {quote}    Edit read_preference to be able to set max_staleness to -1 and make sure that if is -1 the URI getter returns a nullopt instead of -1.",Task,"Major - P3",Closed,"2017-06-02 16:24:07","2017-06-02 15:24:07",0.5
"The Mongo C++ driver","Add support for reading and writing OP_COMPRESSED",,"New Feature","Major - P3",Closed,"2017-06-01 18:52:13","2017-06-01 17:52:13",0
"The Mongo C++ driver","Add integration tests for database::list_collections","The enumeration collections spec [describes a number of tests in prose|https://github.com/mongodb/specifications/blob/master/source/enumerate-collections.rst#tests], which the C++ driver does not currently implement. We should implement these.",Task,"Major - P3",Closed,"2017-05-31 20:35:13","2017-05-31 19:35:13",1
"The Mongo C++ driver","Add integration tests for $out stage in pipeline aggregation","Currently, we have no tests regarding the behavior of the $out stage of an aggregation pipeline. We should add integration tests for this, including both successful behavior and that an error occurs if the $out stage is not last.",Task,"Major - P3",Closed,"2017-05-31 18:25:17","2017-05-31 17:25:17",1
"The Mongo C++ driver","Add integration tests for collection::list_indexes","We currently have no integration tests for collection::list_indexes. We should implement them as necessary.",Task,"Major - P3",Closed,"2017-05-30 22:22:09","2017-05-30 21:22:09",1
"The Mongo C++ driver","Investigate implementing the index view API described in the index management spec","The index management spec details two APIs, the standard API and the index view API and gives drivers the option of implementing either. mongocxx currently implements all of the standard API except the `create_indexes`, `drop_index`, and `drop_indexes` methods. We should decide whether we want to implement the index view spec and deprecate the collection methods pertaining to indexes or simply finish implementing the standard API.",Task,"Major - P3",Open,"2017-05-30 22:11:26","2017-05-30 21:11:26",1
"The Mongo C++ driver","Implemented automated tests for read/write concern spec","The read/write concern spec details a number of [automated tests|https://github.com/mongodb/specifications/tree/master/source/read-write-concern/tests], which are not currently implemented for the C++ driver. These should be implemented.",Task,"Major - P3",Open,"2017-05-30 19:28:52","2017-05-30 18:28:52",3
"The Mongo C++ driver","Implement manual read/write concern tests described in spec","The read/write concern spec describes a number of [manual tests|https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#test-plan], none of which are currently implemented for the C++ driver. These tests should be implemented.",Task,"Major - P3",Closed,"2017-05-30 19:26:47","2017-05-30 18:26:47",2
"The Mongo C++ driver","Remove -Werror from CMAKE_CXX_FLAGS around calls to generate_export_header()","generate_export_header() (from the GenerateExportHeader CMake module) adds a configure test to see whether the compiler supports a deprecated attribute.  Unfortunately, this configure test interacts poorly with the -Werror: if -Werror is contained in CMAKE_CXX_FLAGS, then this configure test always fails, because the deprecation warning generated by the configure program is always promoted to an error (and an error is supposed to indicate that the compiler lacks support for such an attribute).    As such, all of our CI builders which specify -Werror in CMAKE_CXX_FLAGS are declaring BSONCXX_DEPRECATED/MONGOCXX_DEPRECATED as empty macros.    As a temporary workaround, we could programmatically remove -Werror from CMAKE_CXX_FLAGS right before calling generate_export_header(), and add it back after the generate_export_header() call if the removal attempt was successful.",Task,"Major - P3",Closed,"2017-05-25 17:42:30","2017-05-25 16:42:30",1
"The Mongo C++ driver","Calls to bson_append_* are not checked for errors in the core builder","Throughout the implementation of the core builder (in src/bsoncxx/builder/core.cpp), there are calls to various `bson_append_*` functions, all of which return a boolean indicating whether the call was successful. We should check the return value of these calls and throw an appropriate error message in the case that that it's false, as currently all of them ignore the value returned/",Bug,"Major - P3",Closed,"2017-05-24 21:35:27","2017-05-24 20:35:27",1
"The Mongo C++ driver","Add integration tests for proper index creation in GridFS","We should add tests that ensure indexes are created properly when using GridFS",Task,"Major - P3",Open,"2017-05-17 21:31:46","2017-05-17 20:31:46",1
"The Mongo C++ driver","Add integration test for `bypass_document_validation` on writes","There are currently no integration tests for the `bypass_document_validation` field of the various write options types. We should add integration tests for each of these.",Task,"Major - P3",Closed,"2017-05-16 23:04:24","2017-05-16 22:04:24",1
"The Mongo C++ driver","Add missing integration tests for options::find fields","There are currently no integration tests for `options::find::return_key` or `options::find::show_record_id`. Given that testing them would consist of merely checking the fields present in the document(s) returned, we should implement integration tests for each of them.",Task,"Major - P3",Closed,"2017-05-16 23:01:40","2017-05-16 22:01:40",1
"The Mongo C++ driver","Add missing unit tests for options/results classes","Currently, there are no unit tests for `options::bulk_write`, `result::bulk_write`, or `result::insert_many`. We should implement unit tests for them in a similar fashion to the other options and result classes.",Task,"Major - P3",Closed,"2017-05-16 22:58:21","2017-05-16 21:58:21",0.5
"The Mongo C++ driver","Wrong integer type for many CRUD spec API fields","There are a number of places in the CRUD API of the driver where the integer types differ from those described in the spec. Specifically, the following getters and setters use int32 where the spec requires int64:    * options::find::limit  * options::find::max_scan  * options::find::skip  * result::bulk_write::inserted_count  * result::bulk_write::matched_count  * result::bulk_write::modified_count  * result::bulk_write::deleted_count  * result::bulk_write::upserted_count  * result::update::matched_count  * result::update::modified_count    This issues should be rectified by changing the API to use std::int64_t instead of std::int32_t.",Bug,"Major - P3",Closed,"2017-05-16 22:09:30","2017-05-16 21:09:30",1
"The Mongo C++ driver","Write integration tests for client metadata handshake feature","The driver is currently lacking test coverage of the client metadata handshake feature (which the driver has integration logic for, albeit minimal).  We should write two smoke tests for this feature, one which uses mongocxx::pool and one which uses mongocxx::client.    The test should perform the following steps:  - Connect to the server with a URI specifying a custom app name (mongodb://<hostname>/?appName=xyz).  - Run the currentOp command.  - Verify that the currentOp entry associated with the current connection has the expected client metadata.  The test should validate at least 1) the correct app name, 2) the correct driver name, 3) the correct mongocxx portion of the driver version, and 4) presence of the os.type field.    The assertions for specific client metadata fields other than app name should be skipped on server versions 3.4 and earlier, since SERVER-29075 is not implemented for those versions.",Task,"Minor - P4",Closed,"2017-05-15 22:00:54","2017-05-15 21:00:54",1
"The Mongo C++ driver","Write additional collation integration tests","The [collation spec|https://github.com/mongodb/specifications/blob/master/source/collation/collation.rst#test-plan] mandates that drivers write the following test as part of implementing the Collation spec.  The C++ driver currently lacks this test.  # ... drivers should test that two indexes can be created with identical key patterns and different collations. A custom name must be provided for one of them. Then, the test should ensure that the correct index is dropped when delete_one is called with an index name.    I also recommend writing the following integration tests (these are not mandated by the spec, though having them would increase our confidence that there are no issues in our integration with the C driver, and would help prevent later regressions in spec compliance):  # Test that a bulk write will fail if the server has maxWireVersion < 5 and any contained write specifies a collation.  This is logic implemented in the C driver, and currently the C++ driver tests this indirectly via the CRUD tests, but the driver lacks tests for this condition that specifically target bulk writes.  See comment referencing model::delete_one at CXX-1269.   # Test that unacknowledged deletes and updates will fail when a collation is specified.  This is logic implemented in the C driver, and the C++ driver currently does not test this condition.  See comment referencing Database operations for update / delete (via both CRUD methods and write models) must fail at CXX-1269.  # Test that mongocxx::database::run_command() succeeds when the command document specifies a collation field and the server's maxWireVersion is < 5.  See comment referencing mongocxx::database::run_command() at CXX-1269.",Task,"Major - P3",Closed,"2017-05-15 16:14:18","2017-05-15 15:14:18",1
"The Mongo C++ driver","Capped size in bytes is limited to 32bit integer, need 64bit integer","for capped collection size:   legacy driver correctly use a long long in bool mongo::DBClientWithCommands::createCollection  new driver use int instead:   create_collection& mongocxx::options::create_collection::size ( int  max_size )   ",Bug,"Major - P3",Closed,"2017-05-11 09:44:57","2017-05-11 08:44:57",1
"The Mongo C++ driver","Task log should show detailed error when example program fails while running under MSVC","Currently, when one of the example programs fails to run successfully under MSVC, a message like the following is printed to the task log:        In particular, the task log gives no indication of either of the following, both of which are crucial to diagnose failure in the example programs:  - Which example program failed.  - If an exception was thrown, what the exception type and message are.    We should make this information available via the task logs.",Task,"Major - P3",Open,"2017-05-06 01:12:23","2017-05-06 00:12:23",1
"The Mongo C++ driver","Add index hint to aggregation and non-materialized views",,"New Feature","Major - P3",Closed,"2017-05-05 20:49:22","2017-05-05 19:49:22",1
"The Mongo C++ driver","Cache SCRAM-SHA-1 ClientKey",,Improvement,"Major - P3",Closed,"2017-05-05 20:41:17","2017-05-05 19:41:17",0
"The Mongo C++ driver","Add RHEL 7 Evergreen builder","With the removal of the RHEL 5.5 builder in CXX-1330, we will have a gap in coverage against RHEL.  To fix this, we should add an RHEL 7 builder.",Task,"Major - P3",Open,"2017-05-03 00:53:19","2017-05-02 23:53:19",1
"The Mongo C++ driver","Remove RHEL 5.5 Evergreen builder ","Per [this comment at CDRIVER-2083|https://jira.mongodb.org/browse/CDRIVER-2083?focusedCommentId=1560082&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-1560082], there is an issue with libbson's installed CMake files, which manifests in a linker failure on the RHEL 5.5 builder when attempting to statically link against libbson.    This issue would have been caught by the C driver test suite, but the C driver team has removed the RHEL 5.5 builder from their testing matrix and has no plans to add it back.  The C++ driver should only be testing against platforms that the C driver is testing on; to prevent the C++ driver team from needing to spend time investigating C driver issues on the RHEL 5.5 builder in the future, we should remove it.",Task,"Major - P3",Closed,"2017-05-03 00:51:17","2017-05-02 23:51:17",0.5
"The Mongo C++ driver","Add driver benchmarks to Evergreen","After CXX-1127 is complete, the benchmarks should be run in Evergreen on a periodic basis similar to how the C driver does it.    There are a few pieces to this work:  * Get benchmarks running in Evergreen  * Get results generated in the correct format  * Get Evergreen displaying performance graphs",Task,"Major - P3",Open,"2017-05-02 11:12:12","2017-05-02 10:12:12",3
"The Mongo C++ driver","Make examples run from installed CMake config files","Right now, mongocxx and bsoncxx examples use CMake targets to configure their build.  Instead, they should use the results of find_package(libmongocxx) or find_package(libmongocxx-static) just like a standalone program would.    We should set the path for find_package to load from the install directory where we just installed .cmake files.",Task,"Major - P3",Open,"2017-04-28 20:40:51","2017-04-28 19:40:51",2
"The Mongo C++ driver","Add automated test verifying that the static/shared builds for bsoncxx and mongocxx have no non-trivial file collisions","We should have an automated test which verifies that the static/shared builds for bsoncxx have no non-trivial file collisions, when installed to the same directory (non-trivial meaning that it doesn't end up installing a byte-for-byte identical file at the same path). Ditto for mongocxx.","New Feature","Major - P3",Open,"2017-04-28 13:45:31","2017-04-28 12:45:31",1
"The Mongo C++ driver","Rewrite Getting help documentation page","The [Getting help section|https://mongodb.github.io/mongo-cxx-driver/getting-help/] of the C++ driver manual is currently quite sparse.  It would be a natural place to put several kinds of useful resources:  - A troubleshooting guide, with a checklist of steps to follow for commonly encountered driver issues.  e.g. Symptom: I get a 'fatal error: 'bsoncxx/builder/basic/document.hpp' file not found' error when compiling my application. / Solution: - Step 1: Check the include flags on your compile line (<additional information here about how to find the compile line and what the the include flag should look like with the user's toolchain>)....  We should make sure that deleting the build directory is included on the troubleshooting checklists for building the driver.  - A more generic mongocxx FAQ.  It'd be useful for us to throw answers to frequently-asked questions here which don't (yet) have a natural home elsewhere in the documentation.  - A how to ask for help resource.  We can liberally copy from the existing legacy driver resource: https://mongodb.github.io/mongo-cxx-driver/legacy-v1/installation/#how-to-ask-for-help.    In addition, we should also add a prominent link (or links) to the Getting help page from the installation docs (since users often need help compiling/installing the driver).","New Feature","Major - P3",Open,"2017-04-25 20:34:18","2017-04-25 19:34:18",3
"The Mongo C++ driver","Overly-greedy template substitution in declarations of comparison operator free functions for bsoncxx::types::value","The SFINAE logic in the declarations of the comparison operator free functions for bsoncxx::types::value is overly greedy, such that it prevents users from declaring their own comparison operator overloads which name bsoncxx::types::value as a parameter.  See below for the current declarations of these functions:  {code:cpp}  385 // sfinae in the bool return to avoid competing with the value == value  386 // operators  387 template <typename T>  388 using not_value =  389     typename std::enable_if<!std::is_same<typename std::remove_reference<T>::type, value>::value,  390                             bool>::type;  391  392 // these all return bool  393 template <typename T>  394 BSONCXX_INLINE not_value<T> operator==(const value& lhs, T&& rhs) {  395     return lhs == value{std::forward<T>(rhs)};  396 }  397  398 template <typename T>  399 BSONCXX_INLINE not_value<T> operator==(T&& lhs, const value& rhs) {  400     return value{std::forward<T>(lhs)} == rhs;  401 }  402  403 template <typename T>  404 BSONCXX_INLINE not_value<T> operator!=(const value& lhs, T&& rhs) {  405     return lhs != value{std::forward<T>(rhs)};  406 }  407  408 template <typename T>  409 BSONCXX_INLINE not_value<T> operator!=(T&& lhs, const value& rhs) {  410     return value{std::forward<T>(lhs)} != rhs;  411 }  {code}    In addition to inconveniencing users, this prevents us from being able to use bsoncxx::types::value as an operand in REQUIRE(x == y) statements with our unit testing framework, since those macro expansions declare operator==() overloads with decltype\(y\) as a parameter type.",Bug,"Minor - P4",Closed,"2017-04-24 22:46:20","2017-04-24 21:46:20",1
"The Mongo C++ driver","Examples not running under Ubuntu 16.04 builders","The example binaries are not being run on any of the Ubuntu 16.04 hosts.    See the following excerpt from this [recent run|https://evergreen.mongodb.com/task/cxx_driver_ubuntu1604_debug_asan_compile_and_test_with_mongoc_master_branch_b096ca3ee8e008adc3042533523b889f6f1a50fd_17_04_21_01_38_44] of the ASAN Ubuntu 16.04 Debug builder:  ",Bug,"Major - P3",Closed,"2017-04-21 03:34:56","2017-04-21 02:34:56",0.5
"The Mongo C++ driver","Improve performance of Cursor iteration test","The k_tailable_await section of the Cursor iteration test executes in 6 seconds.  This is not ideal, since the remainder of a make test run executes in ~3 seconds.  To improve developer productivity, we should improve the performance of this test.",Task,"Major - P3",Closed,"2017-04-18 00:54:03","2017-04-17 23:54:03",0.5
"The Mongo C++ driver","gridfs::bucket::upload_from_stream and upload_from_stream_with_id infinitely loop on invalid ifstream without error bits set","If an invalid ifstream (e.g. one pointing to a non-existent file) without error bits set is passed to gridfs::bucket::upload_from_stream (or gridfs::bucket::upload_from_stream_with_id), the method will infinitely loop. This is because istream::read only throws an exception if `badbit` is set.    The most straightforward fix for this would be to set the error bits at the beginning of upload_from_stream_with_id so that errors will throw exceptions (and then document that this is the case):    {code:c++}  source->exceptions(std::io::failbit | std::io::badbit);  {code}  ",Bug,"Major - P3",Closed,"2017-04-17 22:13:25","2017-04-17 21:13:25",1
"The Mongo C++ driver","Separate unit tests out into separate executables","Currently, all bsoncxx tests link against the entire public bsoncxx library.  The same applies for mongocxx tests.    Instead, we should consider separating out our unit tests from our integration tests, and create separate executables for each class being unit tested.  A few pros/cons:  - Pro: we'll have a cleaner way to test non-public functionality when we allow building/testing without static libraries (we currently always build the static library, but this won't be the case when CXX-1257 is resolved).  - Pro: this will encourage maintainers to keep a clean internal dependency tree, since each unit-testable component of both libraries will need to have their dependencies explicitly listed.  - Con: clean builds will take longer, due to additional time spent linking the newly-added executables (possibly additional time re-compiling unit test dependencies, depending on how we implement unit test dependencies in CMake).    In order to do achieve this, we will need to create a new target with common dependencies (e.g. our polyfill libraries) that unit tests can depend on.",Task,"Major - P3",Open,"2017-04-15 01:09:07","2017-04-15 00:09:07",3
"The Mongo C++ driver","Add Evergreen builder for Arch Linux / gcc 6.3","We should add a gcc 6.3 builder to our Evergreen CI loop, to test against a newer version of gcc than what we currently test against (5.4).    Currently, the only Evergreen host types available with a system gcc 6 installed are the Arch Linux host types, so we should use those.",Task,"Major - P3",Open,"2017-04-14 22:42:07","2017-04-14 21:42:07",2
"The Mongo C++ driver","Add Evergreen builder for clang 3.9","We should add a clang 3.9 builder to our Evergreen CI loop, to test against a newer version of clang than what we currently test against (which is 3.8, what we run on the ASAN and UBSAN builders).     Although the host types we currently use in Evergreen don't have a system-installed version of clang 3.9 available, we can use clang 3.9 from /opt/mongodbtoolchain/v2.  If related ticket BUILD-3005 is completed before this work, we should update the description for this ticket to refer to clang 4.0.",Task,"Major - P3",Open,"2017-04-14 22:13:25","2017-04-14 21:13:25",1
"The Mongo C++ driver","Add GridFS integration tests which upload/download files of size >4 GB","We've caught a number of issues in the GridFS code during code review around implicit narrowing conversions of numeric values.  To help gain confidence that code functions as expected for files that have a file size not expressible as an unsigned 32-bit integer, we should add large file tests to our existing GridFS tests.","New Feature","Major - P3",Closed,"2017-04-14 21:41:31","2017-04-14 20:41:31",1
"The Mongo C++ driver","bucket::upload_from_stream() and bucket::upload_from_stream_with_id() should abort upload on failure","According to the [File Upload|https://github.com/mongodb/specifications/blob/master/source/gridfs/gridfs-spec.rst#file-upload] section of the GridFS spec, the bucket::upload_from_stream() and bucket::upload_from_stream_with_id() methods should abort the upload on failure (excerpted text: When using upload_from_stream, the upload will be aborted if the source stream raises an error).",Bug,"Major - P3",Closed,"2017-04-14 21:30:22","2017-04-14 20:30:22",1
"The Mongo C++ driver","Add tests for installed pkg-config and installed CMake config files ","We should ensure that a trivial project with bsoncxx or mongocxx dependencies is able to successfully build, using each of the following installed pkg-config/CMake config files:  - libbsoncxx.pc  - libbsoncxx-static.pc  - libbsoncxx-config.cmake  - libbsoncxx-static-config.cmake  - libmongocxx.pc  - libmongocxx-static.pc  - libmongocxx-config.cmake  - libmongocxx-static-config.cmake","New Feature","Major - P3",Closed,"2017-04-14 18:48:31","2017-04-14 17:48:31",3
"The Mongo C++ driver","mongocxx: Change static library name to mongocxx-static, add static-only pkg-config and CMake config files, depend on mongoc-static-1.0 if BUILD_SHARED_LIBS=OFF","Duplicates the work from CXX-1307 and CXX-1313, but for mongocxx.","New Feature","Major - P3",Closed,"2017-04-14 18:41:09","2017-04-14 17:41:09",2
"The Mongo C++ driver","Switch order of pointer/length parameters to gridfs::uploader::write and gridfs::downloader::read","To more closely mirror the I/O functions in the standard library, we should change the order of the parameters to mongocxx::gridfs::uploader::write and mongocxx::gridfs::downloader::read so that the pointer to the buffer is first and the size is second.",Task,"Major - P3",Closed,"2017-04-13 20:42:10","2017-04-13 19:42:10",0.5
"The Mongo C++ driver","bsoncxx depends on bson-1.0 if BUILD_SHARED_LIBS, else depends on bson-static-1.0","Currently, both the bsoncxx and bsoncxx_static targets depend on the bson-1.0 library, which is the shared libbson library.    We should remove the bsoncxx_static target, and make the bsoncxx target a shared or static library depending on the user value for BUILD_SHARED_LIBS.  If BUILD_SHARED_LIBS is on, bsoncxx should depend on bson-1.0; else, if should depend on bson-static-1.0.    This has the effect of limiting users to building either the static library or the shared library, but not both at once.","New Feature","Major - P3",Closed,"2017-04-13 00:08:19","2017-04-12 23:08:19",3
"The Mongo C++ driver","Eliminate warnings generated by compiler","When compiling the driver with the flags `-Wall -Wextra -Wconversion -Wnarrowing -pedantic`, a number of warnings occur, which should be fixed. The warning types and counts are as follows:         85  implicit conversion loses integer precision       85  implicit conversion changes signedness",Task,"Major - P3",Closed,"2017-04-12 19:30:50","2017-04-12 18:30:50",3
"The Mongo C++ driver","Check driver test suites against single-node replica set",,Task,"Major - P3",Closed,"2017-04-12 18:50:38","2017-04-12 17:50:38",0.5
"The Mongo C++ driver","Add basic integration tests for GridFS bucket methods other than open_upload_stream()/open_download_stream()","For the most part, our existing GridFS integration tests only touch the open_upload_stream() and open_download_stream() bucket methods.  We should add basic integration tests for the remaining bucket methods:  - bucket::open_upload_stream_with_id()  - bucket::upload_from_stream()  - bucket::upload_from_stream_with_id()  - bucket::download_to_stream()  - bucket::delete_file()  - bucket::find()","New Feature","Major - P3",Closed,"2017-04-11 09:49:49","2017-04-11 08:49:49",2
"The Mongo C++ driver","bsoncxx: Change static library name to bsoncxx-static, add static-only pkg-config and CMake config files","See description at parent epic ticket CXX-1257.","New Feature","Major - P3",Closed,"2017-04-11 06:36:23","2017-04-11 05:36:23",2
"The Mongo C++ driver","Add C++17 polyfill","To assess whether the driver can use C++17's standard library, we should develop an experimental C++17 polyfill that can be used if the compiler is in C++17 mode.",Task,"Major - P3",Closed,"2017-04-10 15:31:23","2017-04-10 14:31:23",8
"The Mongo C++ driver","Document std::experimental polyfill as unsupported","We should clarify in our docs where we discuss polyfills that std::experimental is, indeed, experimental and not recommended nor supported.    We could elaborate and say that it's there to help us assess compatibility with future standard library features as they are developed, or we could just say not recommended; not supported.  I don't have a strong preference for either way to do it.",Task,"Major - P3",Closed,"2017-04-10 15:29:23","2017-04-10 14:29:23",0.5
"The Mongo C++ driver","Document compiler versions that have been tested, rather than supported","Rather than list broad open ranges of supported compilers, we should list compiler versions (and possibly polyfill versions) that we have tested.    We could adapt the internal matrix of compiler/polyfill versions we're developing and present it as a table on our docs site.    We'll need to think about what level of granularity to present, e.g. do we list *every* version of gcc we've tried or do we list just what we use in our CI system?  The latter seems more manageable and is a better representation of what we're making sure stays working.",Task,"Major - P3",Closed,"2017-04-10 15:25:53","2017-04-10 14:25:53",1
"The Mongo C++ driver","Documentation for read_concern::acknowledge_string() should clarify that any read concern string can be passed in","The current documentation for read_concern::acknowledge_string() states that the parameter rc_string needs to be 'One of local, majority, linearizable, or '.  For better compliance with the Read and Write Concern spec ([section Unknown Levels and Additional Options for String Based ReadConcerns|https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#unknown-levels-and-additional-options-for-string-based-readconcerns]), we should clarify that any read concern string can be passed in.    In addition, since our code/documentation assumes that local translates to MONGOC_READ_CONCERN_LEVEL_LOCAL / etc, we should consider adding static assertions to this effect, to reduce the risk of regressions introduced due to possible future changes in the C driver.",Bug,"Major - P3",Closed,"2017-04-06 20:36:13","2017-04-06 19:36:13",0.5
"The Mongo C++ driver","Read preference constants should be mapped to libmongoc constants","The constants for mode ({{k_primary_preferred}}) hard code values.  This risks being out of sync with libmongoc if they ever change their values.  We should map our values to theirs using their constants, as we do for read concerns.",Task,"Minor - P4",Closed,"2017-04-06 20:12:12","2017-04-06 19:12:12",1
"The Mongo C++ driver","Prevent mongoc_init/mongoc_cleanup from running more than once","mongocxx::instance prevents creation of an instance when a singleton instance exists, but it does not appear to prevent creating and destroying multiple instances serially, which would result in calling mongoc_init and mongoc_cleanup more than once.    We should prevent this from happening and only ever allow a single instance to be created whether as a singleton or as a scoped object.",Bug,"Major - P3",Closed,"2017-04-06 20:06:12","2017-04-06 19:06:12",2
"The Mongo C++ driver","database::create_collection leaks collection on error","database::create_collection leaks the collection received from libmongoc if an error is thrown. This should be remedied by immediately wrapping the collection_t in a mongocxx::collection before any checks for errors.",Bug,"Major - P3",Closed,"2017-04-06 18:54:45","2017-04-06 17:54:45",0.5
"The Mongo C++ driver","database::list_collections leaks cursor on error","database::list_collections leaks the cursor received from libmongoc if an error is thrown. This should be remedied by immediately wrapping the cursor_t in a mongocxx::cursor before any checks for errors.",Bug,"Major - P3",Closed,"2017-04-06 18:50:43","2017-04-06 17:50:43",0.5
"The Mongo C++ driver","mongocxx code should throw exceptions derived from mongocxx::exception, instead of throwing mongocxx::exception itself","Most error handling code in mongocxx throws an exception derived from mongocxx::exception, such as mongocxx::logic_error, mongocxx::operation_exception, etc.  We should audit the codebase to find the remaining functions that throw mongocxx::exception directly, and replace the exceptions in those throw statements with the appropriate specific exception.    Also, consider whether gridfs_exception deserves to derive from exception, as it does now, or if it should be a subclass of operation_exception, or just deleted in favor of the existing exceptions.","New Feature","Major - P3",Open,"2017-04-06 18:49:34","2017-04-06 17:49:34",1
"The Mongo C++ driver","Provide clearer error message to users when attempting to link x86 libmongocxx against x64 libmongoc with MSVC","Currently, when users attempt to link an x86 build of libmongocxx to an x64 build of libmongoc with MSVC, the linker reports several dozen unhelpful unresolved symbol errors and one helpful warning, which gets drowned out in the noise.    Example unhelpful error:       Example helpful warning:      Users commonly run into this issue when building on x64 machines where they fail to pass {{-G Visual Studio 14 2015 Win64}} to cmake when building mongocxx.  On these machines, the default CMake generator is often Visual Studio 14 2015 (an x86 generator).    It would be helpful to detect this condition earlier in the build process (during time of cmake execution?) and to present a readable error message to the user explaining how to fix the issue.","New Feature","Major - P3",Open,"2017-04-04 06:32:32","2017-04-04 05:32:32",2
"The Mongo C++ driver","Add new free functions to assist in efficient subdocument/subarray building with the basic builder","The bsoncxx basic builder provides an extremely flexible API for programmatically building documents with complex structures.  However, for use cases of building simple documents of a known schema that contain any nested subdocuments or subarrays, the basic builder API is overly verbose.    To illustrate, see this example of using the basic builder to create the document \{a: \{b: \[1, x, \{c: 1}]}}:    {code:cpp}      auto doc1 = make_document(kvp(a, [](sub_document subdoc) {          subdoc.append(kvp(b, [](sub_array subarr) {              subarr.append(1, x, [](sub_document subdoc) { subdoc.append(kvp(c, 1)); });          }));      }));       We should provide some solution to users that aims to achieve the best of both worlds: the performance of the lambda approach, but the readability of the make_document() approach.  For example, if we had helpers called make_sub_document_func() and make_sub_array_func(), we might be able to use them as follows:  {code:cpp}      auto doc3 = make_document(          kvp(a,              make_sub_document_func(                  kvp(b, make_sub_array_func(1, x, make_sub_document_func(kvp(c, 1)))))));  {code}","New Feature","Minor - P4",Closed,"2017-04-04 04:31:24","2017-04-04 03:31:24",2
"The Mongo C++ driver","CI: Add Atlas free tier proxy to Evergreen testing",,Task,"Major - P3",Closed,"2017-03-29 14:42:01","2017-03-29 13:42:01",2
"The Mongo C++ driver","Installation guide should clarify that driver's dependency on Boost is header-only","The mongocxx install guide currently states that On Windows, boost 1.56 or later is required.  We should clarify that users do not need to compile the full set of Boost libraries or download pre-compiled Boost binaries, since the driver's dependency on Boost is header-only.","New Feature","Major - P3",Closed,"2017-03-28 23:43:50","2017-03-28 22:43:50",1
"The Mongo C++ driver","Add functionality to mocked tests to check that read preference options are set properly","As part of the work for [CXX-1285|https://jira.mongodb.org/browse/CXX-1285], functionality is being added to test that read preferences are set properly on aggregation operations. Similar functionality should be added to the tests for other operations to ensure that no other operations have the same issue as aggregation.",Task,"Major - P3",Closed,"2017-03-28 21:30:55","2017-03-28 20:30:55",1
"The Mongo C++ driver","Add Evergreen builder for clang 3.5","The minimum compatible version of clang we advertise is clang 3.5, so we should add an Evergreen builder that compiles and tests against clang 3.5.",Task,"Major - P3",Open,"2017-03-27 22:53:39","2017-03-27 21:53:39",1
"The Mongo C++ driver","Add method to detect dead tailable cursor","Currently, users have no way of knowing that a tailable cursor is dead -- i.e. that there are no more documents to iterate and the server has returned a cursor_id of zero.    After CDRIVER-2093 is released in libmongoc 1.7.0, we can add a method like {{can_tail}} which is always false for non-tailable cursors and for tailable (and tailable-await) cursors passes through the value of {{mongoc_cursor_more}}.","New Feature","Major - P3",Closed,"2017-03-27 18:10:36","2017-03-27 17:10:36",1
"The Mongo C++ driver","Document how to build mongoc and mongocxx for SSL support","We should answer the following questions in our documentation.    In order to build an application that makes SSL connections to the server:  - Do users have to explicitly request SSL support when building the C driver? (it depends on whether they have prereqs installed?)  - Do users have to explicitly request SSL support when building the C++ driver? (no, defaults to on)  - Do users have to specify ssl=true in their connection URI, or ssl_opts() in their client options? (yes)    The C driver documents some of the above in its Advanced Connections page: http://mongoc.org/libmongoc/1.6.1/advanced-connections.html#connecting-to-a-server-over-ssl    Where possible, we should also detect whether the user has skipped any of the above steps, and issue a readable diagnostic or error (e.g. when building an SSL C++ driver against a non-SSL C driver).","New Feature","Major - P3",Open,"2017-03-26 02:54:35","2017-03-26 01:54:35",2
"The Mongo C++ driver","aggregate sets read preference option incorrectly","When given a read preference in the options to {{aggregate}}, read preferences are set from the collection object instead of the option:    ",Bug,"Major - P3",Closed,"2017-03-23 23:53:00","2017-03-23 23:53:00",1
"The Mongo C++ driver","scoped_bson_t should simplify use case providing a pointer for initialization","When default constructed, {{scoped_bson_t}} requires calling {{flag_init}} before calling {{bson}} to provide a pointer to pass to libmongoc functions.  We should provide a new method called something like {{bson_for_init}} that can be used directly and internally calls {{flag_init}}.","New Feature","Major - P3",Closed,"2017-03-23 02:30:31","2017-03-23 02:30:31",1
"The Mongo C++ driver","collection::name() should not guarantee returned string is null-terminated","The current documentation for collection::name() is as follows:        It's generally not appropriate to pass around stdx::string_view objects with annotations of the fact that the underlying string is null-terminated, since this knowledge is hidden from the type system.  Documenting to users that this string is null-terminated also limits the ability of authors to add performance optimizations to this function in the future.  We should remove this note from our public-facing documentation, and update our implementation to improve clarity where this function is used.","New Feature","Major - P3",Closed,"2017-03-22 20:27:02","2017-03-22 20:27:02",1
"The Mongo C++ driver","collection::find() and collection::distinct() leak a mongoc_cursor_t on some error paths","- If a user calls collection::find() with an invalid value for options::find::max_await_time(), a mongoc_cursor_t object will be leaked when a logic_error is thrown.  - If a user calls collection::distinct() in circumstances such that mongoc_cursor_new_from_command() reply returns a cursor with an error set, the mongoc_cursor_t object will be leaked when an operation_exception is thrown.",Bug,"Major - P3",Closed,"2017-03-22 20:05:07","2017-03-22 20:05:07",1
"The Mongo C++ driver","Basic builders are not copyable or movable","Currently, the basic builders (bsoncxx::builder::basic::document and bsoncxx::builder::basic::array) are neither copyable or movable. We should determine if this is intentional, and if not, implement the necessary functionality to move and copy them.","New Feature","Major - P3",Closed,"2017-03-22 16:30:30","2017-03-22 16:30:30",1
"The Mongo C++ driver","Copy assignment for database/collection incorrectly degrades to no-op if rhs is default-constructed",,Bug,"Major - P3",Closed,"2017-03-21 23:17:00","2017-03-21 23:17:00",1
"The Mongo C++ driver","Audit driver against GridFS spec","Revalidate driver against:  * DRIVERS-246",Task,"Major - P3",Closed,"2017-03-20 15:47:36","2017-03-20 15:47:36",1
"The Mongo C++ driver","Audit driver against SDAM Monitoring spec","Revalidate driver against:  * DRIVERS-296  * DRIVERS-324    Reminder: SDAM Monitoring is monitoring the monitoring, i.e client side events for SDAM changes.",Task,"Major - P3",Closed,"2017-03-20 15:46:50","2017-03-20 15:46:50",1
"The Mongo C++ driver","Audit driver against Command Monitoring spec","Revalidate driver against:  * DRIVERS-247",Task,"Major - P3",Closed,"2017-03-20 15:41:04","2017-03-20 15:41:04",1
"The Mongo C++ driver","Audit driver against Out Aggregation Pipeline operator spec","Revalidate driver against:  * DRIVERS-111",Task,"Major - P3",Closed,"2017-03-20 15:40:13","2017-03-20 15:40:13",1
"The Mongo C++ driver","Audit driver against Enumerate Collections spec","Revalidate driver against:  * [Enumerating Collections spec|https://github.com/mongodb/specifications/blob/master/source/enumerate-collections.rst]",Task,"Major - P3",Closed,"2017-03-20 15:39:23","2017-03-20 15:39:23",1
"The Mongo C++ driver","Audit driver against find, getMore and killCursors spec","Revalidate driver against:  * DRIVERS-211  * DRIVERS-271",Task,"Major - P3",Closed,"2017-03-20 15:38:17","2017-03-20 15:38:17",1
"The Mongo C++ driver","Audit driver against Index Management spec","Revalidate driver against:  * DRIVERS-217",Task,"Major - P3",Closed,"2017-03-20 15:37:18","2017-03-20 15:37:18",1
"The Mongo C++ driver","Audit driver against CRUD spec","Revalidate driver against:  * DRIVERS-220  * DRIVERS-239  * DRIVERS-332  * DRIVERS-347  ",Task,"Major - P3",Closed,"2017-03-20 15:36:43","2017-03-20 15:36:43",1
"The Mongo C++ driver","Audit driver against Connection String spec","Revalidate driver against:  * DRIVERS-248",Task,"Major - P3",Closed,"2017-03-20 15:35:40","2017-03-20 15:35:40",1
"The Mongo C++ driver","Audit driver against Collation spec","Revalidate driver against:  * DRIVERS-291",Task,"Major - P3",Closed,"2017-03-20 15:34:36","2017-03-20 15:34:36",1
"The Mongo C++ driver","Audit driver against Handshake Spec","Revalidate driver against:  * DRIVERS-304",Task,"Major - P3",Closed,"2017-03-20 15:33:51","2017-03-20 15:33:51",1
"The Mongo C++ driver","Audit driver against Decimal 128 Spec","Revalidate driver against:  * DRIVERS-288",Task,"Major - P3",Closed,"2017-03-20 15:03:52","2017-03-20 15:03:52",1
"The Mongo C++ driver","Audit driver against Read-Write Concern spec","Revalidate driver against:  * [Read Write Spec|https://github.com/mongodb/specifications/tree/master/source/read-write-concern]  * DRIVERS-266  ",Task,"Major - P3",Closed,"2017-03-20 15:02:55","2017-03-20 15:02:55",1
"The Mongo C++ driver","Audit driver against Max Staleness Spec","Revalidate driver against:  * DRIVERS-293  * DRIVERS-335  * DRIVERS-336  * DRIVERS-340",Task,"Major - P3",Closed,"2017-03-20 15:00:48","2017-03-20 15:00:48",1
"The Mongo C++ driver","Audit driver against Server Selection Spec","Revalidate driver against:  * DRIVERS-203",Task,"Major - P3",Closed,"2017-03-20 14:59:04","2017-03-20 14:59:04",1
"The Mongo C++ driver","Audit driver against Server Discovery and Monitoring Spec","Revalidate driver against:  * DRIVERS-182  * DRIVERS-267  * DRIVERS-230  * DRIVERS-327",Task,"Major - P3",Closed,"2017-03-20 14:57:17","2017-03-20 14:57:17",1
"The Mongo C++ driver","Audit driver against SSL requirement","Revalidate driver against:  * DRIVERS-65",Task,"Major - P3",Closed,"2017-03-20 14:55:44","2017-03-20 14:55:44",1
"The Mongo C++ driver","Audit driver against Auth spec","Revalidate driver against:  * [Auth spec|https://github.com/mongodb/specifications/tree/master/source/auth]  * DRIVERS-166  * DRIVERS-333  * DRIVERS-344",Task,"Major - P3",Closed,"2017-03-20 14:51:50","2017-03-20 14:51:50",1
"The Mongo C++ driver","Audit driver against BSON specs","Revalidate the driver against:  * DRIVERS-82  * DRIVERS-101  * DRIVERS-196  * DRIVERS-281  * DRIVERS-330",Task,"Major - P3",Open,"2017-03-20 14:50:26","2017-03-20 14:50:26",1
"The Mongo C++ driver","Cursor iterators lose lockstep at cursor end","When there are multiple iterators for a cursor, iterators should move in lockstep, meaning that incrementing any iterator is equivalent to incrementing all of them. This fails when an interator is incremented and there are no more documents. In that case, other iterators will not compare equal to {{cursor.end()}}.    Example code:    {code}  #include <iostream>  #include <string>    #include <bsoncxx/builder/basic/document.hpp>  #include <bsoncxx/json.hpp>  #include <bsoncxx/stdx/string_view.hpp>  #include <mongocxx/client.hpp>  #include <mongocxx/instance.hpp>  #include <mongocxx/uri.hpp>    using bsoncxx::builder::basic::kvp;    int main() {      auto inst = mongocxx::instance{};      auto client = mongocxx::client{mongocxx::uri{}};      auto coll = client[test][foo];      coll.drop();        for (auto n : {1, 2, 3, 4}) {          auto doc = bsoncxx::builder::basic::document{};          doc.append(kvp(x, n));          coll.insert_one(doc.extract());      }        auto cursor = coll.find({});      auto iter = cursor.begin();        for (auto&& doc : cursor) {          std::cout << bsoncxx::to_json(doc) << std::endl;      }        auto cond = iter == cursor.end() ? std::string(==) : std::string(!=);      std::cout << iter  << cond <<  cursor.end() << std::endl;        return EXIT_SUCCESS;  }  {code}        The current way that iterators are marked at the end is by setting their {{_cursor}} member to nullptr.  This means that a cursor that doesn't yet know that it's at the end won't compare equal to the {{cursor.end()}} iterator with a nullptr {{_cursor}}.    Iterator equality comparison needs to be enhanced so that comparing a nullptr {{_cursor}} with a non-null {{_cursor}} has some additional way to see if {{_cursor}} has actually been exhausted.",Bug,"Major - P3",Closed,"2017-03-16 15:44:46","2017-03-16 15:44:46",1
"The Mongo C++ driver","Fix CI builds with libmongoc master branch","The CI build is broken.  Issues include:    * missing cassert.h header  * pool example URI    Separately, I note that examples are running on OS X.",Task,"Major - P3",Closed,"2017-03-15 08:15:56","2017-03-15 08:15:56",1
"The Mongo C++ driver","Add a file length accessor to gridfs::downloader","To facilitate downloading gridfs files when the length isn't known beforehand, gridfs::download should have an accessor to get the length of the file.","New Feature","Major - P3",Closed,"2017-03-14 19:13:04","2017-03-14 19:13:04",1
"The Mongo C++ driver","Document that write_concern timeout of zero means no timeout","Documentation for write_concern is misleading, as 'majority' says a timeout is required, but neglects to mention that zero is acceptable and means no timeout.  Likewise, 'timeout' says nothing about zero.    Both need to be corrected.",Bug,"Major - P3",Closed,"2017-03-14 10:37:48","2017-03-14 10:37:48",1
"The Mongo C++ driver","Tailable cursors only work once","When using a tailable cursor, only the first iteration to {{cursor::end()}} works and subsequent iteration attempts find nothing. See the attached file for an example.    This is almost certainly a consequence of the way cursors are marked dead in the [fix for CXX-1001 and CXX-1100|https://github.com/mongodb/mongo-cxx-driver/commit/e2c086fe158c9a21f1d168ec13800b1a04e2211f], which should not happen if the cursor is tailable.    I also see that we have no integration tests for tailable cursors, or we'd have caught this breakage earlier.",Bug,"Major - P3",Closed,"2017-03-13 14:49:52","2017-03-13 14:49:52",2
"The Mongo C++ driver","mongocxx implementation should use bsoncxx's basic builder instead of stream builder","The stream builder is difficult to use when it is mutated across multiple statements, and we would like to issue enable warnings when it is used in an unsafe manner (CXX-1152).  To address mongocxx's current non-compliant uses of the stream builder (necessary in order to enable these warnings) and to set a good example for users, we should just replace its use of the stream builder with the basic builder, using the recently-added make_document() and make_array() helpers where appropriate.",Task,"Major - P3",Closed,"2017-03-10 18:52:40","2017-03-10 18:52:40",2
"The Mongo C++ driver","Create examples for sample shell commands",,Task,"Major - P3",Closed,"2017-03-09 01:40:40","2017-03-09 01:40:40",2
"The Mongo C++ driver","Document that Windows users should build libbson without extra alignment","Compiling the driver under Windows with Visual Studio 14 2015 produces the following warning    mongo-cxx-driver-r3.1.1\src\bsoncxx\builder\core.cpp(199): warning C4316: 'bsoncxx::v_noabi::builder::core::impl': object allocated on the heap may not be aligned 128",Bug,"Major - P3",Open,"2017-03-08 10:14:13","2017-03-08 10:14:13",1
"The Mongo C++ driver","Add build variants to CI loop that produce 32-bit builds","Currently, Evergreen only produces 64-bit builds of the driver.  We should add several variants which ensure that the driver can compile in 32-bit mode and run on 32-bit platforms.    The mongo-c-driver project accomplishes this on Windows through Visual Studio 14 2015 CMake generator (as opposed to the Visual Studio 14 2015 Win64 generator), and on Unix platforms by specifying the -m32 -march=i386 compiler flags.  We could also investigate whether the toolchains on any of the 32-bit host types provided by Evergreen (rhel55-32? windows-32?) meet our minimum toolchain requirements.",Task,"Major - P3",Open,"2017-03-03 23:19:51","2017-03-03 23:19:51",1
"The Mongo C++ driver","Audit GridFS implementation for correct handling of user-provided and server-provided file lengths and chunk sizes","From the GridFS spec:  {quote}  However, drivers MUST be able to handle existing GridFS files where the length and chunkSize fields might have been stored using a different numeric data type.  {quote}    It appears that the initial GridFS implementation does not correctly handle downloads of files where the chunkSize element from the files document is stored as a 64-bit integer.    In addition, the GridFS API should document that users may not specify a chunk size larger than the maximum value for int32_t when uploading files.  Currently, the user-provided chunk size value is narrowed to int32_t in the mongocxx::uploader constructor (when sizeof(size_t) is greater than 4 on the user's system).  We should audit the rest of the logic surrounding the handling of these values.",Bug,"Major - P3",Closed,"2017-03-03 22:52:29","2017-03-03 22:52:29",1
"The Mongo C++ driver","Implement Extended JSON spec",,"New Feature","Major - P3",Closed,"2017-03-02 14:11:04","2017-03-02 14:11:04",1
"The Mongo C++ driver","Investigate making mongocxx::gridfs::bucket constructor private","An alternative to having a public constructor for mongocxx::gridfs::bucket would be to have a method on mongocxx::database that returns a bucket (similar to how collections work). We should decide if this is a better API, and if so, implement it.",Task,"Major - P3",Closed,"2017-03-02 00:11:59","2017-03-02 00:11:59",1
"The Mongo C++ driver","Implement unit tests for GridFS options and result classes","Unit tests should be written for the options and result classes for GridFS.",Task,"Minor - P4",Closed,"2017-03-01 23:17:37","2017-03-01 23:17:37",2
"The Mongo C++ driver","Write GridFS integration tests","Additional integration tests should be written for some of the cases that the GridFS spec do not cover, including reading and writing files with arbitrary sizes (i.e. not just the chunk size).",Task,"Major - P3",Closed,"2017-03-01 23:17:00","2017-03-01 23:17:00",2
"The Mongo C++ driver","PIMPL gridfs bucket, uploader, and downloader classes","The classes mongocxx::gridfs::bucket, mongocxx::gridfs::uploader, and mongocxx::gridfs::downloader should be PIMPL'd. This will make the header files simpler and make future ABI stability easier to achieve, as well as making the classes more consistent with the rest of our codebase.",Task,"Major - P3",Closed,"2017-03-01 17:21:49","2017-03-01 17:21:49",2
"The Mongo C++ driver","Clean up use of exceptions in GridFS","Currently, all exceptions thrown in GridFS code are generic `std::exception`. These should be replaced with more proper specific exceptions (i.e. either existing or newly-created exceptions in the `mongocx/exception` directory.    Also, as part of the work for this ticket, we should validate user-provided and server-provided input.",Task,"Major - P3",Closed,"2017-02-28 16:29:24","2017-02-28 16:29:24",3
"The Mongo C++ driver","Create GridFS upload/download example","We should put an example in the `examples` directory showing how to upload and download files from GridFS.","New Feature","Major - P3",Closed,"2017-02-28 16:22:05","2017-02-28 16:22:05",2
"The Mongo C++ driver","When patching include paths to use 'mnmlstc', avoid filename collisions (PR #582)","Tracking ticket for [PR-582|https://github.com/mongodb/mongo-cxx-driver/pull/582]:    {quote}  By default, perl's -i option tells it to:    Open the specified file.  Unlink the file.  Create a new file with the same name.  Copy the old file to the new file, transforming it per the regex.  This is not valid on Windows because you can't have two files with the same name, even if one of them has been unlinked.    The quick fix is to tell Perl to instead create a backup file, so it moves the original file rather than unlinking it.  {quote}",Bug,"Major - P3",Closed,"2017-02-27 15:18:15","2017-02-27 15:18:15",1
"The Mongo C++ driver","Add website example code to examples directory","[~<USER>, please add the website example code you worked on for [~<USER> into the {{examples}} directory, so we keep it up to date and tested in Evergreen.    Please add a comment that if we change it (e.g. to add {{make_document}} and {{make_array}} later), to open a DOCS ticket about it so the website can be updated.    (Kay, is a DOCS ticket the right thing?  Or something else?)",Task,"Major - P3",Closed,"2017-02-26 16:30:46","2017-02-26 16:30:46",1
"The Mongo C++ driver","Resolve json.cpp compile warnings introduced by deprecation of bson_as_json","As of the upcoming 1.7.0 libbson release, bson_as_json() is being deprecated by the introduction of bson_as_extended_json(). See related ticket CDRIVER-1947.    We should disable this deprecation warning via CXX-1056.    Example of the output being generated by this warning:  ",Bug,"Major - P3",Closed,"2017-02-23 00:13:08","2017-02-23 00:13:08",1
"The Mongo C++ driver","GridFS download streams should kill the cursor when closed","In the implementation of [CXX-1130|https://jira.mongodb.org/browse/CXX-1130], the idea came up to kill the cursor being used to fetch the chunk when a download stream is closed. It isn't apparent what the most idiomatic way to do this would be; two options would be to either wrap the cursor in a unique pointer and then release it or to implement a method like `cursor::kill` specifically for these types of use cases.",Improvement,"Major - P3",Closed,"2017-02-03 21:09:17","2017-02-03 21:09:17",1
"The Mongo C++ driver","Document how to build array in a loop with stream builder","We periodically keep getting users confused about building arrays with the stream builder.  Our best canonical answers are in [this google group thread|https://groups.google.com/forum/#!topic/mongodb-user/ggkTtUxuGUE/discussion].    We should extract the various approaches, put them on the docs site in the Working with BSON section, and link to that from open_array's docs.","New Feature","Major - P3",Closed,"2017-01-26 14:56:05","2017-01-26 14:56:05",1
"The Mongo C++ driver","Improve mongocxx::instance documentation","mongocxx::instance is under-documented and difficult to use correctly.  We should make the following improvements to our documentation of mongocxx::instance:  - The mongocxx Quick Start page under Tutorial for mongocxx does not mention mongocxx::instance.  We should add a section which explains what mongocxx::instance is, and also makes a recommendation to users on how to manage this object.  - All mongocxx examples should contain a code comment indicating that creating a mongocxx::instance object is necessary to initialize the driver.  - The class comment for instance.hpp should be expanded.  In particular, it should:  -- Indicate explicitly that the mongocxx::instance constructor initializes the driver and that mongocxx::instance destructor shuts down the driver.  -- Explain that instantiating mongocxx::instance more than once in the same program is an error (even if the objects have non-overlapping lifetimes).  -- Contain a short example of basic correct usage of mongocxx::instance.  -- Contain an example of common incorrect usage of mongocxx::instance.  -- Refer users to the instance_management example for advanced mongocxx::instance usage.",Bug,"Major - P3",Closed,"2017-01-20 01:12:18","2017-01-20 01:12:18",1
"The Mongo C++ driver","Backport mongocxx::uri::database() segfaults if no database specified in URL","Backport of CXX-1187 to 3.1.2.  {quote}  Reproducer:  {code:cpp}  mongocxx::uri uri{mongocxx::uri::k_default_uri};  std::cout << uri.database() << std::endl;      {{libmongoc::uri_get_database()}} returns a char*.  Because we are returning a {{std::string}}, C++ performs an implicit cast.    If no database was specified in the URI, {{uri_get_database()}} returns NULL, not (for example) .  I think this is an entirely reasonable C API.  However, the implicit {{std::string(const char*)}} constructor requires/assumes that the char* point to a valid string.  When passed a NULL pointer, it dereferences that pointer and causes a segfault.    A trivial solution would be to add a helper that handles NULL somehow.  For example:    {code:cpp}  std::string safe_string(const char* ch)  {      if (!ch) { return ; }      return std::string(ch);  }  std::string uri::database() const {      return safe_string(libmongoc::uri_get_database(_impl->uri_t));  }  {code}    But there are a bunch of design decisions here.  Also, just glancing at the code in this file, I suspect that some other accessors on this class may be affected by the same issue.  {quote}",Bug,"Major - P3",Closed,"2017-01-11 23:56:51","2017-01-11 23:56:51",0.5
"The Mongo C++ driver","mongocxx::uri::database() segfaults if no database specified in URL","Reproducer:  {code:cpp}  mongocxx::uri uri{mongocxx::uri::k_default_uri};  std::cout << uri.database() << std::endl;      {{libmongoc::uri_get_database()}} returns a char*.  Because we are returning a {{std::string}}, C++ performs an implicit cast.    If no database was specified in the URI, {{uri_get_database()}} returns NULL, not (for example) .  I think this is an entirely reasonable C API.  However, the implicit {{std::string(const char*)}} constructor requires/assumes that the char* point to a valid string.  When passed a NULL pointer, it dereferences that pointer and causes a segfault.    A trivial solution would be to add a helper that handles NULL somehow.  For example:    {code:cpp}  std::string safe_string(const char* ch)  {      if (!ch) { return ; }      return std::string(ch);  }  std::string uri::database() const {      return safe_string(libmongoc::uri_get_database(_impl->uri_t));  }  {code}    But there are a bunch of design decisions here.  Also, just glancing at the code in this file, I suspect that some other accessors on this class may be affected by the same issue.",Bug,"Major - P3",Closed,"2017-01-10 00:53:33","2017-01-10 00:53:33",1
"The Mongo C++ driver","Draft GridFS design document",,Task,"Major - P3",Closed,"2016-12-22 21:50:55","2016-12-22 21:50:55",2
"The Mongo C++ driver","Exclude files/dirs from git-generated archive files","GitHub releases are generated from {{git archive}} and we can use the {{.gitattributes}} file to exclude files.  I think there's a good case to be made that the tarball should omit developer files so it's as small and focused as possible.    Candidates for inclusion:  * {{/.*}} -- exclude all dot files, including {{.evergreen}}, {{.gitignore}}, {{.travis.yml}} etc.  * {{/appveyor.yml}} -- just like excluding {{.travis.yml}}  * {{/docs}} -- exclude all the hugo source files and HTML template for the docs site  * {{/etc}} -- exclude all these development helpers     The downside of removing things like {{docs}} and {{etc}} is that some developer build targets will be broken, but I don't think that will have an impact on the typical user.  Anyone who wants a developer's view of the code should clone the repo.",Task,"Trivial - P5",Closed,"2016-12-21 21:19:02","2016-12-21 21:19:02",1
"The Mongo C++ driver","CMAKE_C_COMPILER, CMAKE_CXX_COMPILER not passed to CMake invocation for EP_mnmlstc_core","If users set CMAKE_C_COMPILER or CMAKE_CXX_COMPILER when invoking CMake, the specified compilers will be used to compile the driver, but not to compile external dependencies like EP_mnmlstc_core.    See the attached build log.  Note that the user's CMake configure check says Check for working CXX compiler: /opt/mongodbtoolchain/v2/bin/g\+\+, but the EP_mnmlstc_core configure check says Check for working CXX compiler: /usr/bin/c\+\+.    Users can use the CC and CXX environment variables to work around this issue.",Bug,"Major - P3",Closed,"2016-12-21 17:58:28","2016-12-21 17:58:28",1
"The Mongo C++ driver","Backport CXX-1043 - Add doxygen tag for mongocxx and bsoncxx namespaces","Backport CXX-1043.    {quote}  Doxygen generates broken links to mongocxx and bsoncxx namespace documentation pages because those namespaces aren't documented with the namespace tag.    They also don't show up on the TODO list (CXX-852), so I've created this ticket as a reminder.  {quote}",Bug,"Minor - P4",Closed,"2016-12-20 16:45:05","2016-12-20 16:45:05",1
"The Mongo C++ driver","Introduce make_document() and make_array() helpers, builder::core append style methods should return ref-to-this","Much like we do with the pipeline methods, we could easily make it possible to chain together method calls on the basic and core BSON builders if those methods returned a reference to *this. They all currently return void, so there is no harm in doing so and it would not break any existing callers.  ","New Feature","Major - P3",Closed,"2016-12-18 18:35:02","2016-12-18 18:35:02",1
"The Mongo C++ driver","Minor refactoring (PR #578)","This is a tracking ticket for [PR #578|https://github.com/mongodb/mongo-cxx-driver/pull/578]:    {quote}  Initially I intended to remove the explicit clearing of the stack in the builder::core _impl destructor, but when I did that the tests had a memory corruption.    I am not sure why this is, possibly a double free maybe? (Maybe the stack needs to be cleared before bson_destroy?)  {quote}  ",Improvement,"Major - P3",Closed,"2016-12-15 23:17:34","2016-12-15 23:17:34",2
"The Mongo C++ driver","Update release documentation to discuss  moving releases/stable branch","We need to put a note into the release docs to move releases/stable and when.  We should have moved it for r3.0.3 and we didn't.  We may have coincidentally made a good choice not to move it for 3.1.0, but we should definitely move it for 3.1.1.",Task,"Major - P3",Closed,"2016-12-15 16:30:20","2016-12-15 16:30:20",1
"The Mongo C++ driver","Backport CXX-1163 - Compiling with SSL support doesn't work",,Bug,"Major - P3",Closed,"2016-12-15 15:55:14","2016-12-15 15:55:14",1
"The Mongo C++ driver","Catch comparison expressions with bsoncxx::document::view operands should pretty-print when test fails","For document::view variables a and b, a failure of the Catch test statement REQUIRE(a == b) results in the following output:      Instead of printing a question mark for a and b, their JSON representations should be printed instead.    This may be as simple as providing a operator<<(std::ostream&, document::view) overload in the right place which streams the result of to_json().",Task,"Major - P3",Closed,"2016-12-14 22:04:38","2016-12-14 22:04:38",1
"The Mongo C++ driver","Please add instructions to compile Mongo C++ driver as static library","The current docs don't tell how to compile the driver statically on Linux/Unix. Some instructions here would be tremendously helpful.","New Feature","Minor - P4",Closed,"2016-12-12 13:59:36","2016-12-12 13:59:36",1
"The Mongo C++ driver","Add Windows configure/build/test instructions to cxx driver manual",,"New Feature","Major - P3",Closed,"2016-12-02 21:01:20","2016-12-02 21:01:20",1
"The Mongo C++ driver","Context enforcement for BSON stream builder doesn't play nicely with statements that leave open sub-documents or sub-arrays","BSON stream builders feature the ability to stream keys and values across multiple statements, including values that leave open new sub-documents and sub-arrays.  As a result, the type system cannot have knowledge of what the current level of depth is for a BSON stream builder, or what the type of its current context is.  This leads to unintuitive behaviors.    Consider the following code snippet (modified from the test case [\[\] with large nesting levels|https://github.com/mongodb/mongo-cxx-driver/blob/r3.1.0-rc0/src/bsoncxx/test/bson_get_values.cpp#L177-L220]) that uses a document stream builder to build the document \{a: \{b: \{c: 1}}}:  {code:cpp}  // Example 1:  bsoncxx::stream::builder::document doc;  doc << a << open_document;  doc << b << open_document;  doc << c << 1;  doc << close_document;  doc << close_document;      Or, when a statement leaves open a sub-document or sub-array which provides a different context than the top-level BSON datum type provides:  {code:cpp}  // Example 3:  bsoncxx::stream::builder::document doc;  doc << x << open_array;  doc << 1;  // Doesn't compile!  doc isn't an array_context.  doc << close_array;  // Doesn't compile!  doc isn't an array_context.  {code}    The fact that example 1 compiles and runs but example 2 and example 3 fail to compile reveals a fundamental design flaw in the stream builder.  The stream builder should be changed such that either all three examples compile, or all three examples fail to compile.",Bug,"Major - P3",Closed,"2016-12-01 19:52:33","2016-12-01 19:52:33",1
"The Mongo C++ driver","Remove CHECK_OPTIONAL_ARGUMENT_WITHOUT_EQUALITY() macro, define equality/inequality operators where needed","The CHECK_OPTIONAL_ARGUMENT_WITHOUT_EQUALITY() macro doesn't check the return value of the getters it tests.  For better test coverage, we should define equality operators and inequality operators for the mongocxx types we are currently testing using this macro, and then remove the macro entirely.    Specifically, we will define the following:  {code:cpp}      friend MONGOCXX_API bool MONGOCXX_CALL operator==(const write_concern&, const write_concern&);      friend MONGOCXX_API bool MONGOCXX_CALL operator!=(const write_concern&, const write_concern&);      friend MONGOCXX_API bool MONGOCXX_CALL operator==(const read_concern&, const read_concern&);      friend MONGOCXX_API bool MONGOCXX_CALL operator!=(const read_concern&, const read_concern&);      friend MONGOCXX_API bool MONGOCXX_CALL operator!=(const read_preference&,                                                        const read_preference&);  {code}    Original description:  {quote}  Currently, CHECK_OPTIONAL_ARGUMENT_WITHOUT_EQUALITY() is used for verifying the existence of getters that return objects which don't provide operator==().  However, in all of our existing uses of this macro, we have no other test coverage that examines the return value of these getters being tested.     To improve our test coverage of these getter methods, we should remove CHECK_OPTIONAL_ARGUMENT_WITHOUT_EQUALITY() and extend CHECK_OPTIONAL_ARGUMENT() to support custom equality checks for non-comparable types.  {quote}",Task,"Major - P3",Closed,"2016-11-22 21:29:10","2016-11-22 21:29:10",1
"The Mongo C++ driver","Read preference option not applied to distinct","The 'read_preference' member of mongocxx::options::distinct is not applied to the command.",Bug,"Major - P3",Closed,"2016-11-16 16:40:26","2016-11-16 16:40:26",1
"The Mongo C++ driver","Add bsoncxx generic internal error code","As we start checking libbson return values more consistently, we're going to encounter situations where we know an error occurred and have little information to share.  Adding a {{k_internal_error}} code lets us cover all these situations without trying to report reasons that might not be correct.","New Feature","Major - P3",Closed,"2016-11-16 16:29:27","2016-11-16 16:29:27",1
"The Mongo C++ driver","Implement GridFS Spec","See https://github.com/mongodb/specifications/tree/master/source/gridfs for details of the work and tests necessary.","New Feature","Major - P3",Closed,"2016-11-14 22:34:34","2016-11-14 22:34:34",3
"The Mongo C++ driver","Include MONGOCXX_CALL and BSONCXX_CALL macros with function definitions","From our internal discussions, we believe that putting the calling convention declarations on *both* the declaration and definition of non-class functions will reduce the risk of errors if end users override compiler flags with a different default calling convention.    As part of the work for this ticket, we should audit the declarations for all of the non-method functions in our API should specify BSONCXX_CALL or MONGOCXX_CALL.","New Feature","Major - P3",Closed,"2016-11-07 22:55:57","2016-11-07 22:55:57",1
"The Mongo C++ driver"," Update Max Staleness implementation",,Task,"Major - P3",Closed,"2016-11-07 18:14:54","2016-11-07 18:14:54",1
"The Mongo C++ driver","result::insert_one/insert_many returns possibly-dangling references for inserted ids, no definition provided for result::insert_many::result()","My code:  {code:c++}              std::vector<bsoncxx::document::value> documents;              for(int i = 0; i < 100; i++) {                  documents.push_back(                          bsoncxx::builder::stream::document{} << i << i << finalize);              }              auto result  = collection.insert_many(documents);              if(result) {                  auto ids = result.value().inserted_ids();                  for (auto it = ids.begin(); it != ids.end(); ++it) {                      //cout << it->second.get_oid().value.to_string() << endl;                      auto second = it->second;                      auto oId = second.get_oid();                      auto idValue = oId.value;                      string str = idValue.to_string();                  }              }  {code}  I get the src/bson/bson-iter.c:395 bson_iter_type(): precondition failed: iter->raw exception on the auto oId = second.get_oid(); line.",Bug,"Major - P3",Closed,"2016-11-04 05:44:16","2016-11-04 05:44:16",1
"The Mongo C++ driver","Add REQUIRE_THROWS_AS_WITH_CODE test macro","The REQUIRE_THROWS_AS macro from the Catch testing framework allows tests to declare the type of the exception expected to be thrown in an expression.  However, no mechanism exists for introspecting the error code associated with the exception thrown.  Adding a macro such as REQUIRE_THROWS_AS_WITH_CODE would allow for easy creation of tests that fully verify the correctness of the exception thrown.",Task,"Major - P3",Open,"2016-11-01 18:44:53","2016-11-01 18:44:53",1
"The Mongo C++ driver","bsoncxx test binary doesn't return test status in exit code","The {{src/bsoncxx/test/new_tests.cpp}} file with {{main}} doesn't return the catch test result as the exit status.  To the build system it will always appear to succeed even when bsoncxx tests are failing.    Here is an example from work-in-progress test-driven development:        The bsoncxx test CMakeLists.txt should be modified to match the mongocxx test CMakeLists.txt file which links the {{main.cpp}} file in the {{catch}} directory.",Bug,"Major - P3",Closed,"2016-10-26 15:39:18","2016-10-26 14:39:18",1
"The Mongo C++ driver","Having more than one iterator per cursor violates mongoc lifecycle constraints","Given a single cursor, iterator construction and iteration result in the construction of {{bsoncxx::document::view}} objects wrapping the {{bson_t}} pointer returned by a call to {{mongoc_cursor_next}}.  However, the validity of this {{bson_t}} pointer is only until the next call to {{mongoc_cursor_next}} (see [docs|http://mongoc.org/libmongoc/current/mongoc_cursor_next.html]).    Consider this example:        In short, only the most recently iterated iterator ever has a valid {{bsoncxx::document::view}}.",Bug,"Major - P3",Closed,"2016-10-24 22:21:09","2016-10-24 21:21:09",3
"The Mongo C++ driver","Evergreen test suite should fail fast when pre-task script fails","Currently, the main body of the Evergreen compile_and_test_with_* tasks are dispatched even when the pre-task script fails.  Instead, the suite should fail fast when this happens.    See [here|https://evergreen.mongodb.com/task/mongodb_cpp_driver_dev_power8_ubuntu1604_compile_and_test_with_mongoc_current_ad81a90a704ba4ce6326e37bfbb98c377e04d07b_16_10_18_21_55_06] for an example of the task continuing to execute after the MongoDB server download fails.",Task,"Major - P3",Closed,"2016-10-19 04:38:59","2016-10-19 03:38:59",1
"The Mongo C++ driver","collection::distinct() should return error to user if collation specified and connection max wire version < 5","Currently, no error is returned to the user.    The work for this ticket consists of migrating the collection::distinct() implementation to use mongoc_collection_read_command_with_opts().",Bug,"Major - P3",Closed,"2016-10-19 04:11:48","2016-10-19 03:11:48",1
"The Mongo C++ driver","document::element::operator[] overloads should not throw when given an invalid element","{{bsoncxx::document::element::operator[]}} is documented as non-throwing, however the expression {{bsoncxx::document::element{}\[foo\]}} throws.    A fix for this issue was attempted in CXX-862, but the fix was incomplete.    Original description:  {quote}  bsoncxx::document view blubb;    if( blubb\[jolo\] )  => false    if( blubb\[jolo\]\[1\] )  terminate called after throwing an instance of 'bsoncxx::v_noabi::exception'    what():  unset document::element  For this, can the exception say, that I'm out of bound of a array, or that no array is existing?  Most awesome would be if the exception would tell the non existing position.    This behavior is a bit misleading. I would assume for both the upper behavior in just returning a true or false.  {quote}",Bug,"Major - P3",Closed,"2016-10-13 18:58:09","2016-10-13 17:58:09",1
"The Mongo C++ driver","Deprecate non-const methods on mongocxx::client","We should deprecate all of the non-const methods on mongocxx::client, namely:  - client::read_concern(class read_concern)  - client::read_preference(class read_preference)  - client::write_concern(class write_concern)    This would allow us to eventually remove the calls to mongoc_client_set_read_concern() and others from client.cpp, which in turn would allow the C++ driver to be in compliance with the C driver requirement of [It is a programming error to call this function on a client from a mongoc_client_pool_t.|http://mongoc.org/libmongoc/current/mongoc_client_set_read_concern.html].    We should document that users should instead set these values on the client/pool URI, or the database or collection objects derived from the client instead.    Original description:  {quote}  Because clients have mutable state, it may be possible for the following to happen:    * check out client A from pool  * modify client A's write concern from default set via URI  * perform operations with modified write concern (e.g. find-and-modify ops)  * return client A to pool  * check out client A from pool, still with modified write concern  * perform operations with modified write concern rather than the default    Is this actually possible?  If so, should we enforce an invariant that all clients are checked out with identical configuration?  Should we push that invariant upstream to libmongoc?  {quote}","New Feature","Major - P3",Closed,"2016-10-12 16:22:25","2016-10-12 15:22:25",0.5
"The Mongo C++ driver","Divide mongocxx tests into unit, mocked unit and integration tests","Currently, all driver tests except the instance test wind up in a single driver test binary.  Also, tests sources are jumbled together in a single directory.  It may also be that there are a mix of mocked and non-mocked tests in a single file.  This makes it hard to know what failed when the test fails and hard to know where to find integration and unit tests in the source.    I think it would be a lot clearer to divide test binaries as follows:  * unit – unit tests that do not rely on mocking, e.g. options class tests  * mock – unit tests that require mocking libmongoc functions  * integration – tests that require a mongod    Similarly, test sources should be divided along similar lines, possibly into separate directories.",Task,"Major - P3",Open,"2016-10-11 02:51:47","2016-10-11 01:51:47",1
"The Mongo C++ driver","Confusing installation instructions","Copied from notes on a [Stackoverflow question|https://stackoverflow.com/a/39875020/11800] so we don't lose track of it.    {quote}  A couple notable issues:    The tutorial points to a specific file to fetch via curl rather than pointing to the github repository and suggesting doing a clone. This is a recipe for being a bit out of date. If I tell my infrastructure to fetch release 3.0.1, it will happily do that forever, rather than updating. That said, it appears that compiling from git is fine.  A prerequisite is installing libmongoc. It sure looks like installing from standard ubuntu packages is enough, since that's what the referenced page says. But the mongocxx installer wants >=1.3.4. So installing from git is required.  It depends on libbson >= 1.3.4, which is later than the ubuntu 16.04 installed version. So installing that, too, from git is required.  Note that none of the git packages specify which branch or tag to request in order to get a production build. Looking at all the tags on master and picking the numerically largest with no rc in the name seems to work. A tag called release or current would be oh-so-kind.  The build (typing make) tries to do a make install of the subpackage EP_mnmlstc_core, and this fails. So the entire build apparently has to run as root.  The example at the end of the tutorial presents build instructions that assume that everything you've done is somehow known to pkg-config, but the instructions never suggested how to make pkg-config aware of you. I just manually added cflags and ldflags. For me, that became this, although (warning) I'm still chasing down some symbols.  {quote}    I see these specific issues to address:    # We need to provide a stable git reference for use in installation instructions. *UPDATE*: done  # We need to provide guidance on installing the correct versions of libmongoc, such as a git reference for installation. *UPDATE*: docs mention specific versions; opened CDRIVER-1904 to request permalink for stable tarball  # We need to document that the build (make) stage tries to install install EP_mnmlstic_core by default; if this requires {{sudo}}  (if the install directory is not owned by root) we need to mention that.  (Separately, we should find a way to break those stages apart.) *UPDATE: done*  # We need to give better instructions on using pkg-config. *UPDATE*: doc patch ready",Bug,"Minor - P4",Closed,"2016-10-06 16:27:42","2016-10-06 15:27:42",1
"The Mongo C++ driver","Make bsoncxx iterators always const_iterators","This is a tracking ticket for https://github.com/mongodb/mongo-cxx-driver/pull/555 :    bq. STL-style containers return const_iterator using methods begin/end for const objects, but your implementation returns non const iterators for const objects.    After consideration, instead of adopting the pull request, we decided to make all iterator const_iterators and to alias the iterator types to their corresponding const_iterator type.  ",Bug,"Major - P3",Closed,"2016-10-04 20:49:31","2016-10-04 19:49:31",1
"The Mongo C++ driver","Audit all libmongoc and libbson calls for error handling","We've seen several cases where libmongoc or libbson calls aren't checked for errors in the return value or in out parameters.  We should audit every single call to confirm that if errors are possible that we are handling them.",Task,"Major - P3",Closed,"2016-10-04 01:10:00","2016-10-04 00:10:00",1
"The Mongo C++ driver","mongocxx::uri doesn't validate URI on construction","Uncatchable Error during initialisation. try{ . . . }catch(...){ . . . }  If I input wrong input parameters like: mongodb://:@:/ The my program exits with -1. Last output is: src/mongoc/mongoc-topology.c:155 mongoc_topology_new(): precondition failed: uri    If the version of the new c++ driver is important, pleas tell me how I can find out the library version of my compiled libraries.     CODE:  mongocxx::client conn;  // defined in class header file  SomeClass::someClass(){  std::stringstream stmMongoDbUri;    stmMongoDbUri        << mongodb:// //<< MyConfiguration.dbUser        << :    //<< MyConfiguration.dbPassword        << @    //<< MyConfiguration.dbHost        << :    //<< MyConfiguration.dbPort        << /    //<< MyConfiguration.databaseName;        std::string strMongoDbUri (std::istreambuf_iterator<char>(stmMongoDbUri), {});      printf(47 - Streamconten Mongo DB Config -> %s <-, strMongoDbUri.c_str() );      // src/mongoc/mongoc-topology.c:155 mongoc_topology_new(): precondition failed: uri    // No valid connection established / invalid string... ka...    //[strMongoDbUri] = mongodb://:@:/     conn = mongocxx::client(mongocxx::uri(strMongoDbUri));  ...  }",Bug,"Major - P3",Closed,"2016-10-03 23:29:31","2016-10-03 22:29:31",1
"The Mongo C++ driver","Update link to final views page in 3.4 manual","Once DOCS-8728 is resolved, the documentation for the options::create_view and options::modify_collection classes should point to the final views page in the 3.4 manual.",Bug,"Minor - P4",Closed,"2016-10-01 21:13:24","2016-10-01 20:13:24",1
"The Mongo C++ driver","Add aggregation pipeline class builder methods for new MongoDB 3.4 stages and $geoNear / $indexStats stages","The pipeline class is currently missing methods associated with the [new-in-MongoDB-3.4 pipeline stages|https://docs.mongodb.com/master/release-notes/3.4/#aggregation]:  - $addFields  - $bucket  - $bucketAuto  - $count  - $collStats  - $facet  - $graphLookup  - $replaceRoot  - $sortByCount    It is also missing a method associated with the [$indexStats|https://docs.mongodb.com/master/reference/operator/aggregation/indexStats/#pipe._S_indexStats] stage (new in MongoDB 3.2), and the $geoNear stage.    In addition, pipeline::unwind() needs a new overload that allows users to specify values for the [includeArrayIndex and preserveNullAndEmptyArrays options|https://docs.mongodb.com/manual/reference/operator/aggregation/unwind/#pipe._S_unwind] (new in MongoDB 3.2).    We should either add new builder methods to the pipeline class for all of these new stages, or we should deprecate the pipeline class entirely and instead have users pass array builders directly to collection::aggregate().","New Feature","Major - P3",Closed,"2016-10-01 19:04:36","2016-10-01 18:04:36",2
"The Mongo C++ driver","Deprecate database::modify_collection()","database::modify_collection() is a database helper that wraps the collMod database command.  No other official MongoDB drivers support a collMod helper, so we should consider deprecating it for ease of maintainability and cross-driver consistency.    The deprecations added in this ticket will be documentation-only deprecations.  The work to add compiler warnings for the newly-deprecated methods will be completed under CXX-1056.",Task,"Major - P3",Closed,"2016-10-01 18:10:48","2016-10-01 17:10:48",1
"The Mongo C++ driver","Add mechanism to disable deprecation warnings for a given section of code","It would be nice to be able to test deprecated driver functionality without generating deprecation warnings in the test compile output.    In clang, deprecation warnings can be disabled for a section of code as follows:  {code:cpp}  #pragma clang diagnostic push  #pragma clang diagnostic ignored -Wdeprecated-declarations  ...  #pragma clang diagnostic pop  {code}    We should hide such compiler-specific functionality behind a header or macro, and have test code use this mechanism to disable deprecation warnings for the tests of deprecated functionality.    As part of the work for this ticket, all existing deprecated API methods should have the BSONCXX_DEPRECATED or MONGOCXX_DEPRECATED specifier added to the method declaration.  No deprecation specifiers will be added to public types.    In addition, as part of the work for this ticket, we should remove -Wno-error=deprecated-declarations from our Evergreen compiler flags, which was temporarily added to work around CXX-1226.",Task,"Major - P3",Closed,"2016-10-01 04:11:53","2016-10-01 03:11:53",2
"The Mongo C++ driver","Add getters to options::create_collection/options::create_view/validation_criteria classes, make setters support chaining, deprecate to_document() methods","The options::create_collection and options::create_view classes vary from the other options classes in that they embed knowledge of the command request formats for their command (the create command).    We should add getters to these classes, and deprecate their to_document() methods.  Once this is done, these classes will be more struct-like and thus more consistent with the other options classes.  Knowledge of the command format for create could then be moved to the collection class, where it belongs.    Similar work should be completed for the validation_criteria class.  The setters for the validation_criteria class should also support method chaining, for consistency with similar struct-like classes.    The deprecations added in this ticket will be documentation-only deprecations.  The work to add compiler warnings for the newly-deprecated methods will be completed under CXX-1056.","New Feature","Major - P3",Closed,"2016-09-29 19:00:57","2016-09-29 18:00:57",2
"The Mongo C++ driver","Install target fails to install headers when source absolute path contains the substring test","I noticed something very odd when installing the driver and the install location path had the word in all lower case test at the beginning of any of the parent directories of the install location.  The only headers that get installed are export.hpp, version.hpp, and config.hpp even though when it goes to install it says Install configuration: Release. I've noticed this on both Ubuntu and Mac and with different compilers so it doesn't seem to be a OS or compiler problem.  If I use the same exact cmake commands and just change the install location so that it doesn't contain the word test at the beginning of the parent directories it works.     And so it fails when the path is one of the following   /Users/nick/testing/mongoExp/mongo-cxx-install  /home/hathawan/mongoExp/test/mongo-cxx-install  /home/hathawan/mongoExp/testHold/mongo-cxx-install    And it works with the following paths  /home/hathawan/mongoExp/Test/mongo-cxx-install  /home/hathawan/mongoExp/holdtestHold/mongo-cxx-install    So I'm not sure what's happening but I'm guessing it's a cmake issue but I don't know cmake very well so I couldn't tell.     Of course the work around is to not install to location that contains the word test but I thought it was odd and probably not intended behavior so I thought I would bring it up.        NIck        ",Bug,"Major - P3",Closed,"2016-09-26 16:08:29","2016-09-26 15:08:29",1
"The Mongo C++ driver","MSVC warning C4714, bsoncxx operator <<, view() etc. marked as __forceinline not inlined","In MSVC 2015U3, the compiler is unable to inline some bsoncxx functions.    Try compiling the following with /O2 /W4 (warning level 4):        Output:        ",Bug,"Major - P3",Closed,"2016-09-23 09:40:00","2016-09-23 08:40:00",1
"The Mongo C++ driver","Add doxygen tag for mongocxx and bsoncxx namespaces","Doxygen generates broken links to mongocxx and bsoncxx namespace documentation pages because those namespaces aren't documented with the namespace tag.    They also don't show up on the TODO list (CXX-852), so I've created this ticket as a reminder.",Bug,"Minor - P4",Closed,"2016-09-20 19:58:17","2016-09-20 18:58:17",1
"The Mongo C++ driver","Update link to final collation page in 3.4 manual","Once DOCS-7503 is resolved, the documentation for the collation methods in the options classes should point to the final collation page in the 3.4 manual.",Bug,"Minor - P4",Closed,"2016-09-15 23:37:14","2016-09-15 22:37:14",1
"The Mongo C++ driver","Add Evergreen tasks for running integration tests against old stable server versions","The C++11 driver integration tests should be run against server version 2.4, 2.6, 3.0, and 3.2, on all supported platforms.  We should add Evergreen tasks for these.",Task,"Major - P3",Open,"2016-09-15 18:45:35","2016-09-15 17:45:35",3
"The Mongo C++ driver","Update minimum C driver version to latest 1.5.x release","Marking this as 3.1.0 rather than 3.1-required because it should be one of the last tasks in the 3.1 project.",Task,"Major - P3",Closed,"2016-09-14 15:54:09","2016-09-14 14:54:09",1
"The Mongo C++ driver","Document production/API/ABI stability across branches","The README.md implies the mongocxx driver is stable, which it is not.    There may be other places in the documentation or on the wiki that imply the same.    We need to make sure that all documentation sources clearly indicate the lack of API/ABI stability for the 3.x mongocxx series.",Bug,"Critical - P2",Closed,"2016-09-07 14:03:05","2016-09-07 13:03:05",1
"The Mongo C++ driver","Update C++ Driver Documentation: 3.4 Feature Collation","If your driver does not have a playbook, updates for the 3.4 feature collation will still be handled by the driver engineer.     The docs team will be working on writing the updates for node.js/ruby/java drivers.  If you want to wait until those are done, you can then borrow the text from those and tweak the wording as appropriate for your driver and swap out examples.",Task,"Minor - P4",Closed,"2016-09-03 00:02:51","2016-09-02 23:02:51",1
"The Mongo C++ driver","bsoncxx::builder::core exceptions are undocumented","There are several {{throw}} calls that doesn't seem to have any corresponding documentation.  Some may be internal, but many look like they are not:      ",Bug,"Minor - P4",Closed,"2016-09-02 02:22:17","2016-09-02 01:22:17",1
"The Mongo C++ driver","Update clang_format.py to use clang-format 3.8","clang-format 3.8 adds additional directives from version 3.6 that will be useful to enable (e.g. SortIncludes, ReflowComments, etc).  We should upgrade our build system to use version 3.8.",Task,"Major - P3",Closed,"2016-08-29 18:32:23","2016-08-29 17:32:23",1
"The Mongo C++ driver","Add additional directives to clang-format style file","The repository's clang-format style file currently contains a minimal set of rules.  Simply copy-pasting the style file from current master of mongodb/mongo (after removing the directives specific to clang format 3.8) and applying a bulk format will increase the repository's code consistency, with minimal effort.",Task,"Major - P3",Closed,"2016-08-29 18:27:56","2016-08-29 17:27:56",1
"The Mongo C++ driver","End of life for 26compat release stream","The tentative end-of-life date for the 26compat release series is October 31, 2016 (the same as the end-of-life date for the server version 2.6 series, per https://www.mongodb.com/support-policy).    Tasks for sunsetting this release:  - Remove all references to 26compat on wiki. (skipping, see comment below)  - -Remove all references to 26compat on legacy and master branches.-  - -Update README.md in 26compat branch to indicate release has reached end of life.-  - -Announce on mailing list.- (https://groups.google.com/d/msg/mongodb-announce/EwMFthp3Kos/koHJJvLGAQAJ)",Task,"Minor - P4",Closed,"2016-08-25 20:27:00","2016-08-25 19:27:00",1
"The Mongo C++ driver","mongocxx::cursor.begin() increments the iterator","Simple program to create and print out two records:    {code:title=main.cpp|borderStyle=solid}  #include <bsoncxx/builder/stream/document.hpp>  #include <bsoncxx/types.hpp>  #include <bsoncxx/json.hpp>  #include <mongocxx/client.hpp>  #include <mongocxx/instance.hpp>  #include <mongocxx/uri.hpp>  #include <iostream>    int main()  {   mongocxx::instance inst{};   mongocxx::client conn{ mongocxx::uri{} };     auto db = conn[testcursor];     db[names].drop();     bsoncxx::document::value document = bsoncxx::builder::stream::document{} << name << George << bsoncxx::builder::stream::finalize;    db[names].insert_one(std::move(document));   document = bsoncxx::builder::stream::document{} << name << Mark << bsoncxx::builder::stream::finalize;   db[names].insert_one(std::move(document));     auto cursor = db[names].find({});     for (auto&& doc : cursor) {    std::cout << bsoncxx::to_json(doc) << std::endl;   }   return 0;  }  {code}    Output (as expected):        Now, if I insert into the code {{cursor.begin();}} right after the {{find()}}:        Then my output is (unexpectedly missing the George entry):        My objective was to test if the cursor was empty (there is no .empty()) so I tried to use:    {{if ( cursor.begin() == cursor.end() )}} but that seemingly advances the iterator?",Bug,"Major - P3",Closed,"2016-08-21 16:57:44","2016-08-21 15:57:44",3
"The Mongo C++ driver","Migrate documentation to GitHub Pages","Our plan is to migrate all documentation to GitHub pages.  This includes:    * The new Driver Playbook intro docs (rendered by Hugo)  * CXX11 API docs (doxygen)  * Legacy API docs (doxygen)    The Driver Playbook has an open code review from the docs team and needs to be migrated into a docs directory in the master repo.    We then need automation to build and deploy updated docs on demand.  We should have the capability to build and deploy documentation for legacy branches and point release branches/tags.",Task,"Major - P3",Closed,"2016-08-19 19:51:54","2016-08-19 18:51:54",3
"The Mongo C++ driver","Add mongocxx::pool examples","We have no examples of pool usage for multi-threaded operation and we should have some.  At a minimum, it should show:    * pool initialization and configuration (pool size)  * RAII acquisition of a client object within a thread for an operation  ","New Feature","Minor - P4",Closed,"2016-08-17 15:15:47","2016-08-17 14:15:47",2
"The Mongo C++ driver","Fix missing or misleading docs about pools, thread/fork safety and background monitoring","Pool docs imply that single clients have a background monitoring thread, but this is incorrect.    More generally, thread safety and monitoring behaviors are not prominently documented:    * {{mongocxx::client}} – not thread-safe and uses the single-threaded monitoring algorithm (stop the world every 60 seconds to scan)  * {{mongocxx::pool}} – thread-safe and uses a background thread per server to monitor every 10 seconds    We should also document Server Discovery and Monitoring and Server Selection options configurable via the URI.  See [mongoc_uri_t|http://mongoc.org/libmongoc/current/mongoc_uri_t.html] docs for an example.",Bug,"Minor - P4",Closed,"2016-08-17 15:13:42","2016-08-17 14:13:42",1
"The Mongo C++ driver","Fix documentation of invalid element access","CXX-862 changed {{bsoncxx::document::element::operator[]}} to return an invalid element instead of throwing an exception, but the documentation in element.hpp was never changed.",Bug,"Major - P3",Closed,"2016-08-10 21:46:25","2016-08-10 20:46:25",1
"The Mongo C++ driver","Improve use of bson_init_static","We call bson_init_static repeatedly and redundantly (e.g. on every element access).  We should call bson_init_static once on view creation and cache the result.    *Update*: we can't cache a {{bson_t}} because it uses internal references and it therefore non-copyable without dangling pointers.  We've proposed CDRIVER-2064, which would allow us to construct {{bson_iter_t}} structures directly directly from the view buffer.",Improvement,"Major - P3",Closed,"2016-08-07 21:10:17","2016-08-07 20:10:17",1
"The Mongo C++ driver","Add BSONCXX_DEPRECATED to deprecated BSON types","DBpointer, undefined, and symbol all need BSONCXX_DEPRECATED.",Task,"Major - P3",Closed,"2016-07-28 03:12:39","2016-07-28 02:12:39",1
"The Mongo C++ driver","Document how connection pooling works in the C++ driver (C++11)","See DRIVERS-311.",Task,"Minor - P4",Closed,"2016-07-11 14:44:26","2016-07-11 13:44:26",1
"The Mongo C++ driver","Fix legacy driver continuous integration mongo-orchestration tests","The following legacy C++ driver tasks have been mostly failing on Evergreen across a few variants for many months:  - client-test-latest  - integration-test-latest  - integration-test-latest-with-auth    See [this link|https://evergreen.mongodb.com/task/mongodb_cpp_driver_os_x_107_client_test_latest_7e6bfd42cce468c02886cb89142b8fe9e02d16fc_16_06_21_19_58_40] for an example of a recent failure of 'client-test-latest' on OS X 10.7.    It appears that mongo-orchestration is failing to start mongod by the time that the tests in these suites are run.  From the above example, the test outputs couldn't connect : couldn't connect to server localhost:27017 (127.0.0.1), connection attempt failed right before failing.",Task,"Minor - P4",Closed,"2016-06-23 21:52:35","2016-06-23 20:52:35",5
"The Mongo C++ driver","BSON Null should not be discouraged","The documentation of the BSON Null type in the C++11 type says that its use is discouraged, which is inconsistent with the BSON spec.  We should remove this language.",Bug,"Minor - P4",Closed,"2016-06-01 22:10:01","2016-06-01 21:10:01",1
"The Mongo C++ driver","Documented exceptions are incorrect","insert_one() throws a wrong documentated exception!    mongocxx::write_exception // is thrown    In Comments of the function:  /// @throws exception::write if the operation fails.   // is in the file collection.hpp in the comment line 309     stdx::optional<result::insert_one> insert_one(...",Improvement,"Trivial - P5",Closed,"2016-05-24 16:54:19","2016-05-24 15:54:19",1
"The Mongo C++ driver","Return disengaged result optionals for unack'ed write operations","Because of CDRIVER-1194, we cannot correctly return disengaged results from the collection interface.",Bug,"Major - P3",Closed,"2016-04-15 18:19:14","2016-04-15 17:19:14",1
"The Mongo C++ driver","Documentation missing examples for accessing data","See more details here: http://stackoverflow.com/questions/35847104/how-to-use-the-cursor-in-the-new-c-mongo-driver",Improvement,"Minor - P4",Closed,"2016-03-09 09:59:01","2016-03-09 09:59:01",0
"The Mongo C++ driver","Implement Decimal 128 type spec",,"New Feature","Major - P3",Closed,"2016-03-07 20:07:04","2016-03-07 20:07:04",3
"The Mongo C++ driver","Add test coverage for the aggregation framework API","Not required for 3.0.1, kicking out to 3.0.2",Task,"Major - P3",Closed,"2016-02-16 00:50:17","2016-02-16 00:50:17",2
"The Mongo C++ driver","Change collection methods to use options.max_time()","Collection methods that call libmongoc::find_and_modify_opts_set_flags ignore options.max_time() because the C driver does not accept maxTimeMS. See TODOs in collection::find_one_and_replace, collection::find_one_and_update, and collection::find_one_and_delete.",Bug,"Major - P3",Closed,"2015-12-10 17:10:10","2015-12-10 17:10:10",2
