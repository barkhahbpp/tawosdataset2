Name,Title,Description,Type,Priority,Status,Creation_Date,Estimation_Date,Story_Point
"Alloy Framework","Alloy: ListView dataBinding creates deprecated setItems call","When using Alloy ListView databinding it will produce code with  and therefore produce a using deprecated setter warning:    https://github.com/appcelerator/alloy/blob/6c311743af90da438f9c30bfdbe29275247daa51/Alloy/commands/compile/parsers/Ti.UI.ListSection.js#L163    ",Improvement,Critical,Closed,"2020-08-11 20:11:46","2020-08-11 20:11:46",1
"Alloy Framework","Add ability to run in the background without UI","*Summary:*  We plan on adding a new tiapp.xml property run-in-background, when set {{true}}, will allow the app.js to be executed while the app is in the background and is unable to host UI. This means we have to defer root window creation until the app is ready to host UI. On Android, we also need to support recreation of the root window when user backs out of the app and re-launches it.    See Titanium SDK ticket [TIMOB-27896] for details.    *To-Do:*  The app.js generated by Alloy needs to be changed to the following...      *Note:*  We need to release this Alloy change via CLI 8.1.0 before we release Titanium 9.1.0. The new Titanium backgrounding feature won't work correctly on Alloy without it. The plan is to have the Titanium 9.1.0 build system check that CLI 8.1.0 is installed when the backgrounding feature is enabled in the tiapp.xml or else we'll trigger a build failure.  ","New Feature",Medium,Closed,"2020-06-03 03:55:54","2020-06-03 03:55:54",1
"Alloy Framework","Use standalone compiler package","For Webpack support the Alloy compiler was refactored and moved into a standalone package for easier access in other tooling. This works needs to be folded back into the main Alloy package.","New Feature",None,"In Review","2020-03-04 13:22:27","2020-03-04 13:22:27",21
"Alloy Framework","Styles: Alloy global can no longer be accessed in styles","h5.Description    SDK 9 removes the implicit global scope in app.js. We tried to handle this in ALOY-1633, but there was an oversight that the Alloy global can be used in styles which does not get touched by the babel plugin.    We need to either figure out how we can inject Alloy if needed, or just fallback to forcing the Alloy global to exist    h5.Steps to reproduce    1. Copy the below contents to the right files    {code: title=alloy.js}  Alloy.Globals.color = 'blue'      {code: title=controllers/index.js}  function onClick() {   $.UI.create('Window');  }  $.win.open();    2. Build for any platform/device  3. Tap the window      h5.Actual    Runtime error    h5.Expected    Blue window with the label foo",Bug,High,Closed,"2020-02-20 16:25:36","2020-02-20 16:25:36",5
"Alloy Framework","The generated directories /i18n and /platform should be moved","After the patch which required you to move the folders `i18n` and `platform` into `/app`, the legacy folders were being created after a build with one tag-file named `alloy_generated`.    This makes little sense and I suggest generating those files into the `build` directory since that is where they belong. Having more generated directories in the root of your project requires people to add more `.gitignore` rules",Improvement,High,Open,"2016-08-01 13:42:29","2016-08-01 13:42:29",5
"Alloy Framework","TextField property value generate a bug in iOS","Just found a rather odd bug using a textfield. Looks like it refuses to take a value of 86.6 instead setting it to 86.599999999    *Test Environment:*      *Test code:*  *Index.xml*    *Index.js*      *Test result:* See the attachment section.    *Test steps:*  1. Open Appcelerator studio and create an alloy project.  2. Add index.xml and index.js in the project.  3. Run the project with iOS 13 or iOS 12 device or simulator.",Bug,High,Resolved,"2019-10-11 06:42:01","2019-10-11 06:42:01",0
"Alloy Framework","XML: Unable to use platform namespace restriction on event handlers","h5.Description    ALOY-1646 introduced support for namespacing an xml attribute to restrict a property to a single platform, this does not work for event handlers as they are handled separately to where this is done.    {code: title=index.xml}  <Alloy>   <Window android:onClick=doClick>   </Window>  </Alloy>      h5.Steps to reproduce    1. Add the above to your index.xml/index.js files  2. Build to Android    h5.Actual    No event listener is attached    h5.Expected    Event listener should be attached",Bug,Medium,Closed,"2019-08-20 14:52:10","2019-08-20 14:52:10",3
"Alloy Framework","Compile: Errors thrown during sourcemap step are not visible to a user","h5.Description    *This is a regression due to ALOY-1629, as babel became stricter on syntax being more correct. There's nothing we can do to stop this being thrown, other than backing that out which imo we shouldnt do. We should prefer correctness*    When we hit an error in the parsing of code in the sourcemap step we currently log it a trace level and rethrow it. This doesn't really help a user figure out what's wrong, we should handle it similarly to other babel processing errors where we construct a codeframe for the error and log that to give a user some context as to what the error is    We should be able to achieve this by using the [dieWithCodeFrame|https://github.com/appcelerator/alloy/blob/c63914c87610bcd1bc0e8be3426b160783a0991e/Alloy/utils.js#L535] function from utils, as the error is thrown by babel we should have the required info    h5.Steps to reproduce    1. Add the below to a file under lib    2. Run a build for any platform    h5.Actual    The build errors with a stacktrace, but no real useful info    h5.Expected    The build should error with a codeframe to try and point a user to the right location and what the error is",Bug,None,Closed,"2019-07-22 15:48:59","2019-07-22 15:48:59",3
"Alloy Framework","Alloy: Prevent re-opening DB on queries","- During {{sync}}, Alloy will {{open}} and {{close}} the database. Which is unnecessary and has an overhead of ~5ms.  - We can prevent closing the database and maintain an open connection to the database.",Improvement,Medium,Closed,"2019-06-20 23:50:50","2019-06-20 23:50:50",3
"Alloy Framework","Source maps report incorrect file value","The generated source maps for Alloy report an incorrect file value, which is intended to be the generated JS file's path. (it reports a similar path, with the platform folder stripped out)",Bug,High,Closed,"2019-06-07 16:48:12","2019-06-07 16:48:12",3
"Alloy Framework","sourcemaps not being generated for files under lib","h5.Description    Alloy should be generating sourcemaps for files under {{lib}} according to ALOY-616 but this currently is not occurring. It looks like this was broken in ALOY-1262 as it checks whether the target file (i.e the file we're about to write exists) rather than the file we're generating the sourcemap for.    h5.Steps to reproduce    1. Compile kitchensink-v2 {{\[appc\] alloy compile --config platform=ios}}  2. Check the sourcemap directory {{ls ./build/map/Resources/iphone}}    h5.Expected    There should be {{actionbar.js.map}}, {{logger.js.map}}, and, {{permissions.js.map}} files in that folder    h5.Actual    Those files do not exist",Bug,None,Closed,"2019-05-24 13:22:32","2019-05-24 13:22:32",3
"Alloy Framework","Alloy: App crashes due to context used when accessing Ti.Database API","The current master is broken due to changes in the Obj-C JSCore interface (TIMOB-26038):    Specifically, changes in {{Ti.Database}} seem to have caused this issues. It was triggered by Alloy models which use Backbone in the background which uses Ti.Database in the background.    To reproduce, simply create a new Alloy app and create a model as documented in the docs. For the core-team: This is also reproducible in the app you guys have access to.    *EDIT*: After investigating this, it seems like [this selector|https://github.com/appcelerator/titanium_mobile/pull/10381/files#diff-d0e600e43c92d0fe06ffee452771f44cR125] is causing the issues as it's referenced in the sql.js to get the field from the result-set at the specified index.",Bug,None,Closed,"2019-05-02 10:27:34","2019-05-02 10:27:34",8
"Alloy Framework","Add support for camelCase, kabab-case, and snake_case XML elements in Alloy","Add support for camelCase, kabab-case, and snake_case XML elements in Alloy.   Right now, only PascalCase is supported.    For Example, instead of       You could write it any of these different ways:          Not a huge feature but it is a relatively small change and gives a lot of flexibility and control to the developer.","New Feature",None,Resolved,"2019-03-06 23:51:58","2019-03-06 23:51:58",1
"Alloy Framework","iOS: TabbedBar usage on lower than SDK 8 is broken","h5.Description    https://github.com/appcelerator/alloy/pull/918 was bad and was missing several requires, this was not exposed through either eslint or the tests although it should have been (and I should have realised how bad I borked anyways)    h5.Steps to reproduce    1. Build kitchensink-v2 with alloy 1.13.6 and sdk 7.5.0    h5.Actual        h5.Expected    It should work",Bug,None,Closed,"2019-01-15 20:39:12","2019-01-15 20:39:12",3
"Alloy Framework","Modify <TabbedBar/> to use Ti.UI instead of Ti.UI.iOS for 8.0.0","*Summary*  Alloy currently creates {{TabbedGroup}} from {{Ti.UI.iOS}} only. This needs to change to create it from {{Ti.UI}} instead when building with Titanium 8.0.0 and higher.    *Reason:*  We're adding {{Ti.UI.TabbedBar}} support to Android in Titanium 8.0.0 for parity with iOS. See: [TIMOB-25953]    iOS currently has it defined under both {{Ti.UI}} and {{Ti.UI.iOS}}. In Titanium 7.x.x, {{Ti.UI.TabbedGroup}} is flagged deprecated, but we plan on reversing that and making {{Ti.UI.iOS.TabbedGroup}} deprecated in 8.0.0. See: [TIMOB-26674]    *Note:*  This should probably be implemented similar to how it was done for {{NavigationWindow}} here...  https://github.com/appcelerator/alloy/pull/901  ",Improvement,High,Closed,"2018-12-21 03:15:29","2018-12-21 03:15:29",3
"Alloy Framework","Theme is null when a theme is defined in config.json","I think it is caused by https://jira.appcelerator.org/browse/ALOY-1631.    If no theme is defined in the cli, alloy will be called with theses args:      theme with be a string with null inside.    In this file https://github.com/appcelerator/alloy/blob/master/Alloy/commands/compile/compilerUtils.js#L904,  we should check if theme is null or a string null.          ----        config.json        In 1.13.4:         In 1.13.2, theme is defined:                                                                                                                                      ",Bug,Critical,Closed,"2018-11-17 15:28:57","2018-11-17 15:28:57",3
"Alloy Framework","App fails to build on Android if a custom NavigationWindow tag is used","Alloy has the capability to override tags using commonJS modules and the module attribute so:    {{<NavigationWindow id=nav module=xp.ui>}}    allows the xp.ui module to handle the createNavigationWindow request -- we use the xp.ui module ourselves in our Appc test apps.    in 7.4.0 and 7.4.1 when attempting to build an app with this tag in place you get the following :    {{[ERROR] Ti.UI.NavigationWindow for android requires Titanium 7.5.0+}}  {{[ERROR] Alloy compiler failed}}    and the app fails to build. it seems the checking is picking up the tag but NOT the module attribute.    The only workaround is to change the tag name to something else (and the commonJS library) so:    {{<NavigationWindowXP id=nav module=xp.ui>}}    works.",Bug,Medium,Resolved,"2018-11-02 13:42:10","2018-11-02 13:42:10",1
"Alloy Framework","Alloy: Allow to import a custom template from dir using Alloy CLI","Many of us use the open source version of Titanium / Alloy from the terminal to create our applications.    The process is always the same:    *ti create*  *alloy new*    Alloy allows you to transform a classic code application to mvc alloy and it is possible to set a template in the following way:    *alloy new ProjectNameFolder/ templateName*    The problem is: It only allows folder names that are hosted inside the templates folder in the alloy library.    If we move the custom template to this directory when alloy is updated, the custom template will be erased.    The proposal is:    Allow a directory path to be set as template.    *alloy new ProjectNameFolder/ /Path/to/my/custom/template*    This can be done in a simple way.    Just have to modify the *getPaths* function at line 136 in the file */alloy/Alloy/commands/new/index.js* and check if the *templateName* parameter is a directory or not.    What do you think about this proposal?","New Feature",Critical,Closed,"2018-09-27 09:05:09","2018-09-27 09:05:09",2
"Alloy Framework","Define theme from CLI","From [documentation|https://docs.appcelerator.com/platform/latest/#!/guide/Alloy_Themes]  {quote}To use a theme, add it to your Alloy project's config.json file with theme as the key and the name of the theme folder as the value{quote}      For my application I need to apply different themes for customers, so it would be nice to have ability to define theme from command line.  ",Improvement,Critical,Closed,"2018-09-19 12:42:17","2018-09-19 12:42:17",3
"Alloy Framework","Breakpoints not working on alloy apps","Sprint noticed their their break points aren't working on conditions in their alloy apps. I've been able to verify this with my own testing on a fresh application. To clarify (➜ == break point):        h3. Steps to reproduce  1. Create a new alloy app within Appcelerator Studio  2. Add the above if statement with a breakpoint on the conditoin  3. Run in debugging mode    h3. Expected  The code pauses on the if statement and doesn't call console.log()    h3. Actual  The code is ran as if the breakpoint isn't there. ",Bug,Critical,Closed,"2015-08-25 23:40:33","2015-08-25 23:40:33",5
"Alloy Framework","Alloy: Missing plugins/ directory causes cloned app-projects to fail","As part of ALOY-1609 we ignored the {{plugins/ti.alloy}} directory to prevent some git-glitches around the hook. Unfortunately that caused a regression that causes developers that clone other apps (like from GitHub) to see the following error because the directory is missing:    We instead need to revert the change and figure out why the hook is rewritten across Alloy versions.",Bug,Critical,Closed,"2018-08-29 09:38:17","2018-08-29 09:38:17",1
"Alloy Framework","Move NavigationWindow API from Ti.UI.iOS to Ti.UI (parity)","We are moving the Ti.UI.iOS.NavigationWindow to the cross-platform Ti.UI namespace, for parity with Android and Windows. Related tickets:  - Android: TIMOB-24582  - Windows: TIMOB-25537  - iOS: TIMOB-26060    For that, we also need to open the {{<NavigationWindow>}} API for other platforms. Right now, it is only accessible from iOS. This is planned to happen in the SDK 7.4.0 timeframe, with a CLI minor-release that includes a new Alloy version with this fix.",Improvement,Critical,Resolved,"2018-06-12 19:33:53","2018-06-12 19:33:53",3
"Alloy Framework","Fix new Buffer deprecation warnings","h5.Description    Node 10 produces a deprecation warning when the {{new Buffer}} constructor is used. See https://nodesource.com/blog/understanding-the-buffer-deprecation-in-node-js-10/ if you're curious    In most cases I believe the most appropriate swap for us to do is turn {{new Buffer}} into {{Buffer.from}}    There is one instance in the alloy code https://github.com/appcelerator/alloy/search?q=%22new+Buffer%22&unscoped_q=%22new+Buffer%22, it might not show up when alloy is ran however as code under {{node_modules}} will not throw the buffer deprecation warning    We might also wish to update eslint-config-axway to include the {{no-buffer-constructor}} rule    Steps to reproduce to be added as replacement happens",Bug,High,Closed,"2018-05-31 11:19:00","2018-05-31 11:19:00",1
"Alloy Framework","SQL: Error on Android when using SQL data-binding without declaring columns","When using databinding with collectionmodel then i get sql.js error on ANDROID when   columns are not declared.   IOS works fine - with or without declaration of columns in model-js file. (attached)    If i declare columns - Android-app doesn't show sql.js error (attached - screenshot from GenyMotion and Huawei 9 pro device",Bug,None,Resolved,"2018-05-03 21:35:27","2018-05-03 21:35:27",2
"Alloy Framework","Audioplayer cannot be created from Alloy without specifying ns property","When creating an audioplayer from alloy this should work:        But it doesn't, the {{ns}} property needs to be specified as such:        it would be great if this can be fixed/improved so the {{ns}} property doesn't need to be specified",Improvement,Medium,Closed,"2018-04-26 11:18:11","2018-04-26 11:18:11",1
"Alloy Framework","iOS: Picker data binding dosen't work","Can't use data binding on iOS picker like the Android picker!  {code:title=example.xml|borderStyle=solid}  <Picker id=city_picker >   <Column dataCollection=citiesAPI>    <Row cityID={id} title={city} />   </Column>  </Picker>  ",Bug,Critical,Resolved,"2018-04-22 15:11:57","2018-04-22 15:11:57",0
"Alloy Framework","Incorrect releases being tagged on GitHub","As per ALOY-1599 Alloy releases on GitHub are being tagged every build, we should only tag when we do an npm publish so that the releases on GitHub reflect the npm versions",Story,Low,Resolved,"2018-03-21 15:49:43","2018-03-21 15:49:43",5
"Alloy Framework","Add alloy.js plugin file to .gitignore","Every time the alloy version changes, the alloy.js plugin file inside the plugin folder changes too. This pollutes git and a default procedure is to remove the file from git alltogether.    This is discussed in a recent kitchensink PR https://github.com/appcelerator/kitchensink-v2/pull/31#pullrequestreview-101563655 by [~<USER>, [~<USER> and me. ",Improvement,None,Closed,"2018-03-07 13:01:38","2018-03-07 13:01:38",1
"Alloy Framework","Latest underscore version is breaking removeListener method in BaseController.js","Latest underscore version (1.8.3) used in Alloy 1.11.0 causes an error using *$.removeListener* method.    https://github.com/appcelerator/alloy/blob/2a25b1d50fe22d3f5c4f423a6027e1c1d7748b88/Alloy/lib/alloy/controllers/BaseController.js#L496    I don't know why Appc Team use underscore inside BaseController.js instead use built in prototype functions like 'forEach'. In fact bump to latest underscore version is breaking the normal usage of `$.removeListener`method and this is why:    BaseController.js          What happens in the underscore 1.8.3 version *_.each* method?  Well, it iterates in the array using a *for*, `undefined` values included.  If *event* is undefined when *event.view.removeEventListener(event.type, event.handler);* it fails because *view* isn't in event    {color:red}[ERROR] Error catched: Cannot read property 'view' of undefined{color}        What happens in the oldest underscore 1.6.0 version *_.each* method?  Well, it checks if *forEach* method is present in `Array.prototype` and uses it. This method skipes `undefined`values.          Use case in Titanium:              How to solve:    How you can solve this? So easy...    First way:    Change _.each for forEach          Second way:    Adding a simple check in the if...        As <USER>commented a way to avoid this undefined holes inside arrays is using *splice* instead *delete*    *self.__events.splice(index, 1);*",Bug,Critical,Closed,"2018-03-01 13:36:55","2018-03-01 13:36:55",1
"Alloy Framework","Android: Debugger not hitting breakpoints on Windows","Breakpoints are not being hit when using the debugger and when trying to debug to device the following error is shown:        *Test steps:*  + Create an alloy project with all modules enabled  + go to {{app/controllers/app.js}}  + Set breakpoints on line 2 and 5  + Press the debug button from the selection menu   + Run the program to an emulator   + When program launches breakpoints are not hit and user is able to click Hello world without the break point getting hit  + Now debug the application for a device   + Studio shows the above error     *Expected result:*  Debugger should be able to hit breakpoints and no error should be shown when debugging to device  ",Bug,High,Closed,"2017-12-18 20:18:03","2017-12-18 20:18:03",5
"Alloy Framework","Update Moment.js to version 2.21.0","According to the new updates such as backbone.js and underscore.js in Appcelerator CLI 7.0.2, we should also update Moment.js from version 2.16.0 to version 2.20.1",Improvement,Medium,Closed,"2018-02-06 15:30:28","2018-02-06 15:30:28",1
"Alloy Framework","Avoid some global variables to be only available in parent controller.","Quote from [Github|https://github.com/appcelerator/alloy/pull/859]:  {quote}  I don't understand why it is necessary to remove $model, __parentSymbol or __itemTemplate from the arguments variable.    This is causing issues when passing $model for example to a controller which is inheriting from another controller as per Alloy Controller Inheritance documentation (http://docs.appcelerator.com/platform/latest/#!/guide/Alloy_Controllers-section-src-34636384_AlloyControllers-Inheritance).    If we delete it from there, only the parent will have $model properly set but the child controller won't as it's deleted from arguments.    Another option would be to run __processArg() before calling the parent controller but this would mean only the child controller has `$model` properly set, it will be `null` for the parent one.    In order to reproduce:  # index.js  Alloy.createController('child', \{ $model: aBackboneModelObject \});    # parent.js  console.log(_.isNull($model)); // always return false  ...    # child.js  exports.baseController = parent;  console.log(_.isNull($model)); // always return true    {quote}",Improvement,Medium,Closed,"2018-02-01 15:36:12","2018-02-01 15:36:12",1
"Alloy Framework","Alloy: Support ES6","This epic will track all the items required to enable support for ES6",Epic,None,Closed,"2018-01-25 22:28:22","2018-01-25 22:28:22",0
"Alloy Framework","ALLOY: Model Data binding problem with the first upper case in the model src","There is a problem with code generated for Simple Data Binding with the first upper case letter in model name.    I have two models defined:  app/models/book.js  app/models/Task.js    I expect that following XMLs will produce the same code:  {code:xml}  <Alloy>   <Model src=book/>   <Label>{book.name}</Label>  </Alloy>  {code}  {code:xml}  <Alloy>   <Model src=Task/>   <Label>{Task.name}</Label>  </Alloy>  {code}      But in the first case it is correct:  {code:javascript}   Alloy.Models.instance('book');     $.__views.Book = Ti.UI.createLabel({ id: Book });   $.__views.Book && $.addTopLevelView($.__views.Book);   var __alloyId2 = function () {    Alloy['Models']['book'].__transform = _.isFunction(Alloy['Models']['book'].transform) ? Alloy['Models']['book'].transform() : Alloy['Models']['book'].toJSON();$.Book.text = Alloy['Models']['book']['__transform']['name'];   };Alloy['Models']['book'].on('fetch change destroy', __alloyId2);exports.destroy = function () {    Alloy['Models']['book'] && Alloy['Models']['book'].off('fetch change destroy', __alloyId2);   };  {code}    and in the second case it is invalid:  {code:javascript}   $.__views.Task = Ti.UI.createLabel({ text: $model.__transform.Task.name, id: Task });   $.__views.Task && $.addTopLevelView($.__views.Task);  {code}    and I get error $model.__transform is undefined",Bug,Critical,Closed,"2018-01-11 11:21:29","2018-01-11 11:21:29",1
"Alloy Framework","Use babel-code-frame to provide context when failing to parse code","h5.Description    Currently when we are parsing files if we hit a parser error then we output an error that isn't super helpful, it contains an line/column numbers but it would be a much better dev experience if we could show the code using babel-code-frame. We could also expand this to xml/tss parsing errors if the modules we use give us the locations in an easily consumable way    {code: title=current}  [ERROR] Error generating AST for /Users/<USER>Documents/projects/repotest/apps/hyperloop-examples/app/controllers/index.js  [ERROR] Unexpected token (1:5)  [ERROR] position 5  ",Improvement,High,Closed,"2017-12-20 11:00:18","2017-12-20 11:00:18",5
"Alloy Framework","Mobileweb assets copied on alloy new ","h5.Description    Similar to ALOY-1322, mobileweb assets are still being copied when creating a new alloy app.  There's a lot more mentions of mobileweb in the test suite than blackberry I believe so not sure simple this would be, is it actually more involved that just removing the platform/mobileweb folder? [~<USER> any recommendations?    h5.Steps to reproduce    # {{appc new -t titanium -n mwassets --id com.foo}}  # {{ls mwassets/app/assets/}}    h5.Actual    mobileweb assets are there    h5.Expected    No mobileweb assets",Bug,Medium,Closed,"2017-12-19 14:51:40","2017-12-19 14:51:40",3
"Alloy Framework","alloy compile broken on node 9.3.0","h5.Description    {{alloy compile}} is currently broken on node 9.3.0 due to the deasync modules use of undocumented internal apis. We should look to either move away from deasync or fix the use of the internal apis in that module    Reference     https://github.com/abbr/deasync/issues/89  https://github.com/nodejs/node/issues/17678",Bug,None,Closed,"2017-12-14 12:10:13","2017-12-14 12:10:13",1
"Alloy Framework","Builtins: Reimplement measurement by convertUnits","Reimplementing the measurement built-ins. PR: https://github.com/appcelerator/alloy/pull/668",Improvement,Medium,Closed,"2017-12-07 12:31:59","2017-12-07 12:31:59",3
"Alloy Framework","Transpile Alloy source to allow platform-independent ES6 / ES7 usage","We added Babel transpiling for classic apps in TIMOB-24610. In order to use it in Alloy as well, the Alloy build needs to be updated to properly use it as well. As we had some issues with minification after updating our tooling recently, we need to ensure this won't happen again.","New Feature",None,Resolved,"2017-12-07 11:22:12","2017-12-07 11:22:12",0
"Alloy Framework","Alloy: Update underscore to the latest version (1.8.3)","Underscore should be updated to the latest version to support the newest functionality of underscore. Since 1.6 a lot of new functions have been added to underscore.    I created a PR: https://github.com/appcelerator/alloy/pull/852",Improvement,Critical,Resolved,"2017-09-28 10:00:07","2017-09-28 10:00:07",0
"Alloy Framework","Support Titanium.UI.Android.DrawerLayout","https://jira.appcelerator.org/browse/TIMOB-15910    Usage   ","New Feature",None,Resolved,"2017-08-30 19:17:31","2017-08-30 19:17:31",3
"Alloy Framework","Move Ti.UI.iOS.Toolbar to Ti.UI.Toolbar","Yordan PR: https://github.com/appcelerator/alloy/pull/841  Additional code changes are needed.",Improvement,None,Resolved,"2017-08-30 18:35:56","2017-08-30 18:35:56",2
"Alloy Framework","Allow Android to use Ti.UI.RefreshControl as well","We added refresh-control for Android in TIMOB-1072, but we also need Android to use the Alloy <RefreshControl> tag.",Improvement,High,Closed,"2017-08-27 17:54:46","2017-08-27 17:54:46",0
"Alloy Framework","Unable to use ES6 import/exports in alloy controllers due to bad code generation","If you add imports or exports to an alloy controller, we can now parse the code and handle it in our use of babel/babylon instead of uglify. BUT, we don't hoist the imports/exports to the top of the generated code, so it can become embedded underneath a function which is invalid ES6 code. imports and exports must be moved up to the global top-level or else the code is invalid.    i.e.    On a related note, we don't really handle ES6 imports/exports anyways down the line, but that's another ticket we can address in titanium CLI/build to just use babel transpilation to generate requires out of them (until the wider JS community has settled how to handle module vs script difference and imports/exports)",Bug,High,Resolved,"2017-08-02 16:54:56","2017-08-02 16:54:56",5
"Alloy Framework","Alloy doesn't compile external app.js","If your Alloy project has an `app.js` in a subdirectory (example: `lib/app.js`), it is not compiled.    So, if you have a pre-processor constant like `OS_IOS` or `OS_ANDROID` in this file,  the result is a runtime error because no var defined `OS_IOS` is found.    *This is a critical issue, because Alloy produces a broken app!*    PR: https://github.com/appcelerator/alloy/pull/836",Bug,Critical,Closed,"2017-06-23 13:32:48","2017-06-23 13:32:48",2
"Alloy Framework","Alloy: exports.baseController does not work since 1.10.0 (Regression)","since 1.10.0 exports.baseController = 'name' does not work.    I attached simple project with three controllers   * Base  * BasedOnBase with exports.baseController = 'base' in js  * BasedOnBaseXML with <Alloy baseController=Base> in xml    With Alloy 1.9.11 I got correct result in both cases:      but with Alloy 1.10.x I get correct code only for  BasedOnBaseXML    for BasedOnBase I get:  ",Bug,Critical,Closed,"2017-06-20 13:58:39","2017-06-20 13:58:39",2
"Alloy Framework","WPATH function to match updated require-handling in Titanium 6","This should also fix WPATH function to match updated require-handling in Titanium 6   ",Bug,High,Closed,"2017-06-14 21:45:34","2017-06-14 21:45:34",2
"Alloy Framework","Compile process appears to fail when optimizing files with OS_* declarations ","h5.Description    When running alloy compile on the studentfutter app, it will error out with the below, at first glance it appears to be choking on the Ti API usage I think https://github.com/hansemannn/studentenfutter-app/blob/2855926288f8ada820b947336f4d3dbd9f5f0f4e/app/lib/android/actionbar.js        h5.Steps to reproduce    # Download studenfutter https://github.com/hansemannn/studentenfutter-app  # Run {{alloy compile --config platform=ios}}    h5.Actual    Compile process will error out with the above    h5.Expected    Compile process should not error out",Bug,None,Closed,"2017-05-26 14:34:28","2017-05-26 14:34:28",3
"Alloy Framework","Broken Require data-binding event translation. Custom events on Required views are being applied to the required root View instead of the required Controller itself, causing an error.","When requiring a view with data binding, for instance:          the following errors is firing:    {code}  [ERROR] :  Script Error {  [ERROR] :      column = 18;  [ERROR] :      line = 40;  [ERROR] :      message = undefined is not a function (evaluating '__alloyId146.getViewEx({\n                recurse: true\n            }).on(\click\, doSomething)');  [ERROR] :      stack = __alloyId148\ntriggerEvents\ntrigger\n_onModelEvent\ntriggerEvents\ntrigger\nset\nsuccess\n\nonload;  [ERROR] :  }  {code}      due to this processed code:    {code:javascript}   doSomething ? __alloyId146.getViewEx({                  recurse: true              }).on(click, doSomething) : __defers[__alloyId146.getViewEx({recurse:true})!click! doSomething] = true;  {code}    which should be:    {code:javascript}  doSomething ? __alloyId146.on(click, doSomething) : __defers[__alloyId146!click! doSomething] = true;  {code}",Bug,Critical,Resolved,"2017-05-22 13:35:55","2017-05-22 13:35:55",3
"Alloy Framework","Alloy: Keep Changelog up to date","It would be great if the changelog will be updated periodically to reflect the changes:  https://github.com/appcelerator/alloy/blob/master/CHANGELOG.md    If another resource exists (JIRA/Appcelerator docs link?), please link to it in this CHANGELOG.md file and remove the rest of its contents so that the changelog can be found on a single resource only.",Improvement,Critical,Closed,"2017-04-18 12:11:21","2017-04-18 12:11:21",1
"Alloy Framework","Alloy: Update gitignore for default project","When creating a new alloy project with the open source {{ti}} tool it uses the .gitignore from {{Alloy/template/gitignore.txt}}. This file isn't in sync with {{alloy/templates/default/.gitignore}} yet.    PR: https://github.com/appcelerator/alloy/pull/821    *Reproduce:*        ",Bug,Critical,Resolved,"2017-03-24 17:22:24","2017-03-24 17:22:24",1
"Alloy Framework","Broken Widget event translation. Custom events on Widgets are being applied to the Widget's root View instead of the Widget's Controller itself, causing an error.","It only occurs when data binding.    *Steps to reproduce:*  # Create an app.  # Create a widget that triggers an event against its own controller, say event.  # Create a Model.  # Add a TableView to index.js  # Add a Collection for the model to index.js  # Configure the TableView for data binding.  # Add a TableViewRow as a template for the databound TableView.  # Add the widget to the template TableViewRow using the <Widget id='test' ...> Alloy tag.  # Add an onEvent handler to the widget tag.  # Build the app.    *Actual Result:*  App throws *{color:red}undefined is not a function{color}* error    Resources/<platform>/alloy/controllers/<yourcontroller>.js shows:  {code:JavaScript}onEvent ? test.getViewEx({     recurse: true  }).on(event, <yourhandlermethod>) : __defers[test.getViewEx({recurse:true})!event!<yourhandlermethod>] = true;",Bug,Critical,Resolved,"2017-03-03 18:13:46","2017-03-03 18:13:46",5
"Alloy Framework","Add optimizingExeptions option to config.json","This PR make you can skip the file when doing an optimization manually.  There are no reason to optimize js files which doesn't depends on alloy.    Community PR : https://github.com/appcelerator/alloy/pull/818",Improvement,Critical,Resolved,"2017-02-25 01:52:15","2017-02-25 01:52:15",3
"Alloy Framework","Widget files are optimized twice during compilation","When MVC generation step of alloy compile, widget files are optimized.  So there is no reason to optimize widget file on OPTIMIZING step again.    Community PR: https://github.com/appcelerator/alloy/pull/805",Improvement,High,Resolved,"2017-02-25 00:55:17","2017-02-25 00:55:17",3
"Alloy Framework","XML: Require LeftNavButtons/RightNavButtons not working","Require LeftNavButton/RightNavButton working while LeftNavButtons/RightNavButtons not working    example  {code:xml|title=index.xml}  <Alloy>   <NavigationWindow>    <Window class=container>     <Require src=navbar />     <Label id=label>Hello, World</Label>    </Window>   </NavigationWindow>  </Alloy>  {code}    {code:xml|title=navbar.xml}  <Alloy>   <LeftNavButtons>    <Button>Btn1</Button>    <Button>Btn2</Button>   </LeftNavButtons>  </Alloy>  {code}    compiled code problem  {code:javascript|title=Resources/iphone/alloy/controllers/navbar.js}      var leftNavButtons = [];      $.__views.__alloyId2 = Ti.UI.createButton({          title: aaa,          id: __alloyId2      });      leftNavButtons.push($.__views.__alloyId2);      $.__views.__alloyId3 = Ti.UI.createButton({          title: bbb,          id: __alloyId3      });      leftNavButtons.push($.__views.__alloyId3);      // >>>>> THIS IS THE ERROR <<<<< //      void 0.leftNavButtons = leftNavButtons;      $.__views.navbar && $.addTopLevelView($.__views.navbar);  {code}    while LeftNavButton compile to  {code:javascript|title=Resources/iphone/alloy/controllers/navbar.js}      $.__views.__alloyId2 = Ti.UI.createButton({          title: Btn1,          id: __alloyId2      });      __parentSymbol.leftNavButton = $.__views.__alloyId2;      $.__views.navbar && $.addTopLevelView($.__views.navbar);  {code}",Bug,Critical,Resolved,"2017-02-02 10:17:56","2017-02-02 10:17:56",3
"Alloy Framework","npm node_modules are erroring when compiling","I believe it was said that Ti SDK 6.0.0+ came with full node support. This should include installation of npm modules as well. Sadly, a lot of modules are not passing the compilation process of titanium, because they do not follow a certain convention.    One of those error messages would be:        Testcase:    Create a package.json (regular npm setup) inside app/lib so the packages come available during runtime. Install for instance `mocha` (https://www.npmjs.com/package/mocha). There are many more packages that will fail the compilation process once installed into /app.    `app/lib/package.json`        run `npm install` in this directory to install the module.    I recommend installing a lot of packages, and determine if they pass the Alloy compiler. Every compilation should pass.  ",Bug,Critical,Reopened,"2017-01-31 14:07:53","2017-01-31 14:07:53",1
"Alloy Framework","Update uglify-js and moment.js","Ran {{nsp check}}, two alloy dependencies, {{uglify-js@2.4.15}} and {{moment@2.10.6}}, are returning {{Regular Expression Denial of Service}}.     This ticket is to track the progress of updating uglify-js from 2.4.15 to *2.6.1* and moment.js from 2.10.6 to *2.17.1*.    Note:   ECMAScript 5.1 doesn't permit newline characters in string literals. It requires {{\n}}. According to [903|https://github.com/mishoo/UglifyJS2/pull/903] Uglify also doesn't like it in versions 2.6.2 and after, thus failed some of the test apps. For now, updating to uglify-js@2.6.1 should correct nsp errors. We need to look into alloy compiler if we need a major uglify upgrade. ",Improvement,High,Resolved,"2017-01-27 06:48:52","2017-01-27 06:48:52",5
"Alloy Framework","iPad Splash Screen Orientation - No Landscape","This one is pretty simple. Create a generic new alloy project and, and edit the trap.xml file like so:    <enable-launch-screen-storyboard>false</enable-launch-screen-storyboard>  ...  <key>UISupportedInterfaceOrientations~ipad</key>    <array>      <string>UIInterfaceOrientationLandscapeRight</string>    </array>    LandscapeLeft won't work either. When the app is launched, the splash screen will appear in portrait mode.",Bug,Medium,Closed,"2017-01-20 01:29:57","2017-01-20 01:29:57",1
"Alloy Framework","iOS: Warning message thrown when using <View> in <AlertDialog> (Android-only)","When using the {{<View>}} tag in {{<AlertDialog}} on iOS, a warning is thrown, also the platform is set to Android. ",Bug,Medium,Closed,"2017-01-14 12:27:10","2017-01-14 12:27:10",1
"Alloy Framework","Add support for Backbone 1.3.3 and Underscore 1.8.3","Currently Alloy uses backbone 0.9.2 as default, and there is an ability to upgrade to 1.1.2 through the config.json as per documentation: [https://wiki.appcelerator.org/display/guides2/Alloy+Backbone+Migration].     However, the current release of backbone is 1.3.3. There should be support for this version in Alloy too.    And I assume it wouldn't hurt updating the default backbone version either, but I guess thats a breaking change and perhaps another ticket. ",Improvement,Critical,Closed,"2017-01-09 14:40:10","2017-01-09 14:40:10",1
"Alloy Framework","Upgrade underscore.js to version 1.8.3","Upgrade underscore.js to version 1.8.3 from the current version of 1.6.0.    Community PR: https://github.com/appcelerator/alloy/pull/700",Improvement,Medium,Resolved,"2016-12-27 23:02:45","2016-12-27 23:02:45",0
"Alloy Framework","Alloy: Support multiple restrict files","ALOY-1216 is a PR to allow compile only one specific file.  This PR supports compiling several specific files.    example:      ",Improvement,High,Closed,"2016-11-24 04:12:41","2016-11-24 04:12:41",3
"Alloy Framework","getWidgetDirectories does not respect theme config.json","We have multiple themes for our Alloy/Titanium application, and each theme needs to have a different sent of dependencies.    However, dependencies set in app/themes/theme_name/config.json are not checked when returning widget directories:  https://github.com/appcelerator/alloy/blob/5991de44082a492d143612cc2175b7eef30d36e6/Alloy/utils.js#L286    (For reference, this theme config.json _is_ observed when generating the CFG.js file:  https://github.com/appcelerator/alloy/blob/977a2c147e809ccd1c05d197d54828c3e7660150/Alloy/commands/compile/compilerUtils.js#L827)",Bug,Critical,Closed,"2016-09-13 17:37:04","2016-09-13 17:37:04",2
"Alloy Framework","Cannot use Ti.UI.iOS.TabbedBar in ListView template","When using the following code inside an Alloy view, the Alloy compiler will crash:    Code:      Crash:  ",Bug,High,Closed,"2016-10-27 12:25:59","2016-10-27 12:25:59",3
"Alloy Framework","Special text property value is not parsed correctly","In the new version we found an error... We get a compiler error. This is caused in the XML file by     text=#js:dtgL('report46')    Fun fact when i build the project via command line : ti build —platform ios    it works... so it has to be something in the Studio itsself",Bug,Critical,Closed,"2016-10-07 08:14:51","2016-10-07 08:14:51",3
"Alloy Framework","Replace wrench with fs-extra","Alloy uses {{wrench.js}} extensively throughout its code base, however the module have been  deprecated. We should replace it with another module to do filesystem operations, i.e. fs-extra.",Story,None,Closed,"2016-10-18 22:21:50","2016-10-18 22:21:50",5
"Alloy Framework","Alloy uses old require-paths with new require-behavior","We introduced an updated require-handling in Titanium 6 that matches the full NodeJS specs for handling all kind of files and data structures. Although we are save for older require-paths, we should update the Alloy-internal require-calls as well. Example log:    It will only be shown in the DEBUG log-level, but adjusting it internally would be the cleanest way here. Thx!",Bug,Medium,Closed,"2016-10-18 19:13:37","2016-10-18 19:13:37",8
"Alloy Framework","Replace Ti.Ui.iPhone with Ti.Ui.iOS in Alloy","Since 5.4.0.GA we facing a lot of warnings messages because Alloy using Ti.iPhone namespace, I just replaced it with Ti.IOS    PR: https://github.com/appcelerator/alloy/pull/795",Bug,Critical,Resolved,"2016-09-15 06:14:56","2016-09-15 06:14:56",3
"Alloy Framework","Alloy: Support iOS 10 <RefreshControl> tag in Ti.UI.ScrollView","We introduced the {{Ti.UI.RefreshControl}} usage in the {{Ti.UI.ScrollView}} in TIMOB-23524. It is a new iOS 10 feature we exposed to the proxy. Now we need the Alloy parser-binding to use it in the XML like we already can do with the {{Ti.UI.TableView}} and {{Ti.UI.ListView}}.",Improvement,High,Closed,"2016-09-13 12:17:09","2016-09-13 12:17:09",5
"Alloy Framework","ListView: Custom widget support in templates","Currently there does not seem to be support for adding custom widgets in Listview templates. Please add widget support to ListView.","New Feature",High,Resolved,"2013-08-23 19:40:11","2013-08-23 19:40:11",13
"Alloy Framework","UI elements are not created properly with formFactor property in style","When I use a conditional style I know the style only applies if the conditions are met. If not, a default style will be applied. For example:    *index.xml*  {code:xml}  <Label>Hello, World</Label>  {code}    *index.tss*  {code:javascript}  Label[platform=ios formFactor=tablet]:{      color: red  }  {code}    On iPad the label will be red, but it will render as black on other devices.    But this is not the case when I’m styling a NavigationWindow for a specific platform:    *index.xml*    {code:xml}  <Alloy>      <NavigationWindow>          <Window>              <Label>Hello, World</Label>          </Window>      </NavigationWindow>  </Alloy>  {code}    *index.tss*    {code:javascript}  NavigationWindow[platform=ios formFactor=tablet]:{}  {code}    Launching the app on an iPhone, Alloy don’t create the NavigationWindow:    {code:javascript}      $.__views.index = Ti.UI.iOS.createNavigationWindow(function() {          var o = {};          Alloy.isTablet && Alloy.deepExtend(true, o, {              window: $.__views.__alloyId0,              id: index          });          return o;      }());  {code}    The app crash with the error message: *“Invalid type passed to function”*.    Why a style determines if create or not the element? The correct code could be:    {code:javascript}      $.__views.index = Ti.UI.iOS.createNavigationWindow(function() {          var o = {};          Alloy.isTablet && Alloy.deepExtend(true, o, {          });            Alloy.deepExtend(true, o, {              window: $.__views.__alloyId0,              id: index          });          return o;      }());  {code}",Bug,High,Closed,"2016-08-04 13:15:55","2016-08-04 13:15:55",3
"Alloy Framework","Add a CLI command to extract i18n strings from alloy code and update the strings.xml files (ALSO for XML files)","Now that Alloy 1.2 allows to use L() in XML files, this tool must scan XML files, apart the classic JS and TSS files.    I've been tested it and it is not doing it actually.","New Feature",Low,Resolved,"2013-08-19 11:18:25","2013-08-19 11:18:25",1
"Alloy Framework","Replace Uglify with Babylon","At the moment, Uglify has limited support of ES6 features. https://github.com/mishoo/UglifyJS2/issues/448. Consider moving to using Babylon. https://github.com/babel/babylon    ",Story,None,Resolved,"2016-08-11 18:23:06","2016-08-11 18:23:06",0
"Alloy Framework","Receiving <SearchView> is only available in Android when compiling tableview despite platform=android attribute being present","h2. Problem  We have a number of views with tableviews that use the SearchView component. When compiling for iOS, we receive this warning:    {code:none}  [WARN]  <SearchView> is only available in Android  [WARN]  To get rid of this warning, add platform=android to your <SearchView> element  {code}      However, our SearchView elements already have the platform attribute set to android.    h2. Test case  {code:lang=xml|title=index.xml}  <Alloy>      <Window>          <TableView>              <SearchBar platform=ios/>              <SearchView ns=Ti.UI.Android platform=android/>          </TableView>      </Window>  </Alloy>  {code}    h2. Logs  {code:lang=none|title=console}  [INFO] [index.xml] view processing...  [INFO]   style:      index.tss  [INFO]   view:       index.xml  [WARN] <SearchView> is only available in Android  [WARN] To get rid of this warning, add platform=android to your <SearchView> element  [INFO]   controller: index.js  [TRACE] - Processing builtins module...  [TRACE] - Processing optimizer module...  [TRACE] - Processing compress module...  [INFO]   created:    Resources/iphone/alloy/controllers/index.js  [DEBUG]   map:        build/map/Resources/iphone/alloy/controllers/index.js.map  [INFO]   created:     Resources/iphone/alloy/styles/index.js  {code}  h2. Notes  I believe the error is in commands/compile/parsers/Ti.UI.TableView.js:49. It currently reads:    {code:javascript}  if (node.getAttribute('platform') !== 'android') {  {code}    I believe it should read:    {code:javascript}  if (child.getAttribute('platform') !== 'android') {  {code}  ",Bug,High,Resolved,"2016-07-27 16:55:30","2016-07-27 16:55:30",1
"Alloy Framework","iOS: Localised splash screen is not visible","When I add the splash screen in the app/i18n/en/ path I am not able to see the splash screen. I get black screen.    *Steps to reproduce:*  1. Create an alloy project  2. Place a splash screen image In app/i18n/en/ folder   3. Run the app on simulator    *Expected:* Splash screen should be visible when the app launches.  *Actual:* A black screen is shown instead of splash screen image.    Reference: http://docs.appcelerator.com/platform/latest/#!/guide/Icons_and_Splash_Screens-section-29004897_IconsandSplashScreens-LocalizedSplashScreens",Bug,High,Closed,"2016-06-02 12:26:12","2016-06-02 12:26:12",3
"Alloy Framework","Add ability to pass cancel attribute to Option element for OptionDialog","{quote}As a developer,  I want to be able to mark an option as being the option to use for cancelling an OptionDialog in Alloy XML,  So that I can use OptionDialog in view without dependency on controller.  {quote}    Currently, I can do this:        However, if an option is not displayed due to conditional code, then the index number will no longer be valid.    Proposed new attribute:      ",Improvement,Medium,Closed,"2016-06-17 20:13:21","2016-06-17 20:13:21",3
"Alloy Framework","ERROR: Alloy is not defined","I have an Android project integrated with _iamyellow.net_ Push Notification module.    Erroneous scenario generated by following steps.  1. App is closed manually in background   2. There is a notification in notification bar for the app  3. App is opened by tapping on the notification.  4. An error with Alloy is not defined, sourced build/android/assets/alloy.js, is appeared.  Please refer screenshot in attachment.  5. App sticks at default screen after receiving error.    Please consider this as high priority issue.    Regards.",Bug,Critical,Resolved,"2016-04-29 15:13:59","2016-04-29 15:13:59",3
"Alloy Framework","Destroy Model in Alloy doesn't seem to be working","Hi,  Trying to delete models using destroy() events seems not working.  Steps to reproduce :  1. Create a simple Alloy project.  2.Create a model TestUser.js    3. Copy the following code in index.js     4. Run this project    Destroy Model in Alloy doesn't seem to be working, because I get same log before and after destroy();    Log      Environment         Thanks",Bug,Critical,Closed,"2016-06-05 17:42:37","2016-06-05 17:42:37",8
"Alloy Framework","Support newer versions of Underscore / Lodash","{quote}This is different than ticket ALOY-1168: https://jira.appcelerator.org/browse/ALOY-1168{quote}    ALOY-1168 is about replacing the shipped version of underscore.   This ticket is about supporting apps where underscore is replaced by the developer.   I still think that ALOY-1168 should be implemented and I have developed it in a fork (https://github.com/mobilehero/adamantium/tree/feature/underscore-to-lodash), but I am having issues w/ the tests.    Currently, Alloy allows developer to replace the current version of underscore with a different version (or with lodash) by putting the updated underscore.js file in the directory: /app/lib/alloy.    However, the issue is that the code that Alloy generates for a controller that uses databinding, references the old version of _.template.       There are probably several different ways this could be solved to support both old and new versions of Underscore.   One might be to check the version of underscore.  I think the function was changed in 1.7.0.    Let me know if you think there is a workable solution and I can create a PR and tests for it.  Thanks!!    ",Improvement,Medium,Resolved,"2016-04-25 14:45:54","2016-04-25 14:45:54",0
"Alloy Framework","iOS: Support Ti.UI.iOS.Stepper in Alloy","https://jira.appcelerator.org/browse/TIMOB-6305 adds support for the new Stepper UI element on iOS. We should include the alloy-change just from the beginning","New Feature",High,Closed,"2016-04-22 17:05:05","2016-04-22 17:05:05",3
"Alloy Framework","[Alloy] Alloy sql adapter db_file to be function","    https://github.com/appcelerator/alloy/pull/788","New Feature",Critical,Resolved,"2016-04-21 10:54:56","2016-04-21 10:54:56",5
"Alloy Framework","Fix no such file or directory when doing alloy new","When creating a new alloy project, the creation process should be more careful when platform template folder doesn't not exist.    h6. Reproduce Step  {{appc new}} titanium app    h6. Expected Output  The app should be created with no error.    h6. Actual Output  {{Error: ENOENT: no such file or directory}} ",Bug,Critical,Closed,"2016-04-20 19:33:56","2016-04-20 19:33:56",3
"Alloy Framework","iOS, Android: Global styles is not overridden by local styles for orientationModes.","h6. Description  If we set orientationModes on window in app.tss file portrait, landscape both and any individual tss file only portrait then portrait mode does not work for individual tss.    h6. Steps to reproduce  1. Just create an alloy project.  2. Replace this app.tss and index.tss file,  3. Run this code in device or emulator.  4. Rotate device.  5. It does not stop.      h6. actual behaviour  If device rotate, the app orientation change.  h6. Expected behaviour  Since orientation Modes PORTRAIT for the index.tss file so it should be always portrait.    {code:title=app.tss}  Window: {    orientationModes: [Ti.UI.PORTRAIT,Ti.UI.LANDSCAPE_LEFT,Ti.UI.LANDSCAPE_RIGHT],    backgroundColor: red  }  ",Bug,Critical,Closed,"2016-04-01 20:10:17","2016-04-01 20:10:17",5
"Alloy Framework","Bug/Regression: Data binding always returns string values","For ALOY-443 (Alloy 1.5.0) we started to use {{_.template()}} for complex model data binding.    With ALOY-1368 and ALOY-1369 we also adopted this method for complex collection data binding.    Since {{_.template()}} always returns a string, it doesn't work for binding objects, e.g. an attributedString as the attached test case:        h2. Original description    Just tested that, using alloy v1.8.2 and v1.8.5 I was unable to set the `attributedString` property via a `ListItem` template.  Using alloy 1.7.35 everything is working fine.    I attach a simple test project that contains a `ListView` with a template composed by two labels.  On the first label I set the `text` property with a simple model string and on the second one i set the `attributedString`.    For the first label everything is working correctly (as expected) and for the second one is working only using v1.7.35 of alloy.",Bug,High,Closed,"2016-03-31 10:03:15","2016-03-31 10:03:15",8
"Alloy Framework","Regression: Model instance data binding no longer works","Data binding of local model instances throws an exception in Alloy 1.8.3 and 1.8.4 because of [this line change|https://github.com/appcelerator/alloy/pull/769/files#diff-a59a2178e486f81366775c39e5393695L521] to resolve ALOY-1369.    *XML*        *compiled*    {code:js}          $.__alloyId4.text = _.template({$.modelinstance.foo}, {              modelinstance: transformed          }, {              interpolate: /\{([\s\S]+?)\}/g          });          $.__alloyId5.text = _.template({$.modelinstance.foo} {$.modelinstance.bar}, {              modelinstance: transformed          }, {              interpolate: /\{([\s\S]+?)\}/g          });  {code}",Bug,Critical,Closed,"2016-03-30 14:41:20","2016-03-30 14:41:20",5
"Alloy Framework","Data binding fails when binding string or model attribute name has dash, space or quote","Alloy data binding can't handle complex bindings strings or model attributes names that contain a dash, space or quotes.    This is in part because of the way it renders the compiled {{\_.template()}} code, but also because of limitations in {{\_.template()}} itself:  http://stackoverflow.com/a/15956433/4626813        *index.js*    {code:js}  var test = {    a: 'a',    'a-b': 'a-b',    'a b': 'a b',    'ab': 'ab',    a'b: a'b  };    Alloy.Models.mymodel.set(test);  Alloy.Collections.mymodel.reset([test]);    $.index.open();  ",Bug,High,Closed,"2016-03-29 13:25:26","2016-03-29 13:25:26",5
"Alloy Framework","Travis does not test against known good generated code because it targets Linux only","While working on ALOY-1474 and local tests I ran into 355 failures to match against known good generated code, while Travis didn't fail at all.    After submitting https://github.com/appcelerator/alloy/pull/775 I noticed Travis logs don't mention the tests against the known good generated code at all:        while locally it fails:        I also saw this test only runs on darwin:  https://github.com/appcelerator/alloy/blob/master/test/specs/compile.js#L173    We don't specify an OS:  https://github.com/appcelerator/alloy/blob/master/.travis.yml    Which seems to make Travis to only test on Linux:  https://travis-ci.org/appcelerator/alloy/builds/118954721    Unfortunately enabling osx on Travis fails:  https://travis-ci.org/appcelerator/alloy/jobs/118956715    Because of:  https://github.com/travis-ci/travis-ci/issues/2311    Which can be workaround like:  https://github.com/travis-ci/travis-ci/issues/2311#issuecomment-171180704    Which I did:  https://github.com/appcelerator/alloy/pull/775/files#diff-354f30a63fb0907d4ad57269548329e3L1    And now Travis is failing 355 tests on OSX just like local:  https://travis-ci.org/appcelerator/alloy/builds/118959856    I've checked all 355 failures and all were expected because of tests that were not updated for tickets like ALOY-1355, ALOY-1237 and ALOY-1335, so generated new known good code for all.",Story,High,Closed,"2016-03-28 12:42:10","2016-03-28 12:42:10",5
"Alloy Framework","Alloy compile tests should show diff with known good generated code","Currently when compile tests fail they show:    !Screen Shot 2016-03-28 at 13.06.58.png!    There's two problems with this:    1. It is showing both the message and the stack trace, last is of no use  2. It is not showing what actually is different    I expect it to give:    !Screen Shot 2016-03-28 at 13.06.20.png!",Story,High,Closed,"2016-03-28 12:33:57","2016-03-28 12:33:57",5
"Alloy Framework","Regression: Model data binding no longer works","For  ALOY-1369 I changed the interpolation of binding templates:  https://github.com/appcelerator/alloy/pull/769/files#diff-a59a2178e486f81366775c39e5393695R571    As found by [~<USER> this caused a regression in data binding of models without a transform method:  https://jira.appcelerator.org/browse/ALOY-1254?focusedCommentId=380741&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-380741    Creating test app and fix.",Bug,Critical,Closed,"2016-03-28 08:31:47","2016-03-28 08:31:47",5
"Alloy Framework","Alloy: Alloy/studio disregards variables that are not being used. ","When a breakpoint gets hit, if at the end of that function you step-into, the next JS function will make the debugger stop.    To reproduce:  # Create an Alloy app  # Copy the following code into index.js:    #Set a breakpoint at line 8 and try to step in too.    Actual result:  The debugger stops at the {{onInterval}} function    Expected result  The debugger should not stop at the {{onInterval}} function    Studio removes any variables that are not being used like a b and c in the snippet above. Maybe we could disabled this when in debugging an app as oppose to running it. When debugging the users will most likely want to see un-used variables they are using strictly for testing purposes. If its not too much work , maybe we can consider this improvement/new feature. Thanks!    ",Improvement,Medium,Open,"2015-05-11 22:17:57","2015-05-11 22:17:57",8
"Alloy Framework","Complex data binding for individual model doesn't work with transform() method","The complex data binding introduced by ALOY-443 does not work if the model has a {{transform()}} method:        Compiles to:    {code:js}      var __alloyId13 = function() {          $.__alloyId2.title = _.isFunction(Alloy.Models.user.transform) ? Alloy.Models.user.transform()[foo] : _.template(<%=user.foo%>, {              user: Alloy.Models.user.toJSON()          });          $.__alloyId3.title = _.isFunction(Alloy.Models.user.transform) ? Alloy.Models.user.transform()[foo] : _.template(the <%=user.foo%>, {              user: Alloy.Models.user.toJSON()          });          $.__alloyId4.title = _.isFunction(Alloy.Models.user.transform) ? Alloy.Models.user.transform()[foo] : _.template(<%=user.foo%> - <%=user.bar%>, {              user: Alloy.Models.user.toJSON()          });      };  ",Bug,Critical,Closed,"2016-03-16 12:22:48","2016-03-16 12:22:48",5
"Alloy Framework","Destroy calling off on variables that may be undefined","If you have an Alloy component that uses databinding and has conditional code defined in the xml, the destroy function is not taking into consideration the fact that the component may be undefined before calling the `off` function.    Alloy xml:     {code:xml}              <TableViewRow id=trainer_row layout=composite class=listitem_row hasChild=true onClick=$.togglePicker if=$.args.editmode>                          <View height=50 top=0 layout=composite touchEnabled=false>                              <Label text=Trainer class=listitem_settings_name touchEnabled=false />                              <Label text={mymodel.trainer_name} class=listitem_settings_value_haschild touchEnabled=false />                          </View>                          <Picker id=trainer width=350 height=150 visible=false onChange=$.onChange top=40>                              <Column dataCollection=trainer>                                  <Row title={name} value={id} />                              </Column>                          </Picker>                      </TableViewRow>  {code}    Generated code:     {code:javascript}    if ($.args.editmode) {           // ------ only showing relevant code  ------             var __alloyId287 = Alloy.Collections[trainer] || trainer;          __alloyId287.on(fetch destroy change add remove reset, __alloyId288);          }        exports.destroy = function() {          __alloyId281.off(fetch destroy change add remove reset, __alloyId282);          __alloyId293.off(fetch destroy change add remove reset, __alloyId294);          __alloyId314.off(fetch destroy change add remove reset, __alloyId315);          __alloyId330.off(fetch destroy change add remove reset, __alloyId331);   Alloy.Models.mymodel.off(fetch change destroy, __alloyId346);      };    {code}    In this case, `__alloyId281` is actually undefined because it was declared and a value assigned inside the conditional if block.      This is a pretty serious issue as I believe the error that occurs is stopping the other (existing) `off` functions from being called and causing a memory leak.    ",Bug,Medium,Resolved,"2016-02-25 14:50:54","2016-02-25 14:50:54",3
"Alloy Framework","Allow baseController as attribute of Alloy xml tag","As a developer,  I want to add an attribute of baseController to the root Alloy xml tag in an Alloy Controller,  So that I can define the baseController of a new controller without having to create a .js file.          Added PR:  https://github.com/appcelerator/alloy/pull/761  ","New Feature",High,Resolved,"2016-02-22 15:49:23","2016-02-22 15:49:23",3
"Alloy Framework","Support Ti.UI.iOS.BlurView in XML","With TIMOB-20176 resolved for the 5.4.0 SDK, the Alloy version shipping with CLI 5.4.0 should include support for {{Ti.UI.iOS.BlurView}} in XML.    The view must be added to an ImageView.","New Feature",None,Resolved,"2016-02-13 18:56:29","2016-02-13 18:56:29",3
"Alloy Framework","Support Ti.UI.iOS.MenuPopup in XML","With TIMOB-5812 resolved for the 5.2.0 SDK, Alloy should support this in XML for the version to be included in Unified CLI 5.2.0.    See classic API at:  http://docs.appcelerator.com/platform/latest/#!/api/Titanium.UI.iOS.MenuPopup    The view is not added to any parent and wants a list of strings as items, just like an OptionDialog","New Feature",Medium,Closed,"2016-02-13 18:49:03","2016-02-13 18:49:03",5
"Alloy Framework","Add support for LivePhotoView under Ti.UI.iOS namespace","With TIMOB-19666 resolved for 5.2, the Alloy version shipping with the 5.2 CLI should support defining the {{Ti.UI.iOS.LivePhotoView}} in XML.","New Feature",Medium,Closed,"2016-02-13 16:39:34","2016-02-13 16:39:34",3
"Alloy Framework","Alloy doesn't cast true/false attributes as booleans","Textarea does not want to add a new line when I'm pressing return key (from my keyboard) when I run the application as a Mobile Web Preview in Browser. However it works great when running in an Android Emulator.    Steps to reproduce :    1) Create a new project (use the Two-Tabbed Alloy Application sample)  2) In the project, replace index.xml with the one in the attachment files.  3) Run the application as a Mobile Web Preview in Browser  4) Try to type in the textarea, and push return key from your keyboard  5) It will loose focus instead of adding a new line.",Bug,Low,Resolved,"2014-02-14 20:15:55","2014-02-14 20:15:55",3
"Alloy Framework","Annotation doesn't appear in only Alloy Map","I followed this example:    http://docs.appcelerator.com/platform/latest/#!/api/Modules.Map-method-createAnnotation    but if i create the map with Alloy, the map is ok but the annotation doesn't appear. With this example (no Alloy) all work well:    http://docs.appcelerator.com/platform/latest/#!/guide/iOS_Map_Kit    i think there are a bug with annotation in Alloy.",Bug,Critical,Closed,"2016-02-04 09:44:35","2016-02-04 09:44:35",5
"Alloy Framework","Alloy: add support for xhigh on iOS in measurement builtin","{{dpToPX}} and {{pxToDP}} methods of the measurement module should support HD Retina iOS    https://github.com/appcelerator/alloy/blob/master/Alloy/builtins/measurement.js",Improvement,Critical,Resolved,"2016-02-08 16:29:57","2016-02-08 16:29:57",3
"Alloy Framework","Generating `Resources/alloy.js` from template is not required when selective compile","Community PR: https://github.com/appcelerator/alloy/pull/751    When compiling only app/alloy.js, generating Resources/alloy.js from template is not required.  Because Resource/alloy.js is not user's code but builtin code. So when compiling specific controller and alloy.js only, Generate Resource/alloy.js should be skipped.    \\  h5. Reproduce steps  # delete all file of Resources folder.  # run : alloy compile -q ios --config file=app/alloy.js  # you can check compiling result on Resource  {{Resources/iphone/alloy.js}} is generated from template  But {{Resources/iphone/alloy.js}} is not optimized. It has uncompiled CONSTANT such as OS_MOBILEWEB. it makes undefined error on runtime.    ",Bug,Low,Resolved,"2016-02-08 20:16:54","2016-02-08 20:16:54",3
"Alloy Framework","Warning on compile: moment construction falls back to js Date","Alloy spits out a Moment.js warning on compile and a long stack trace on debug-level:        Source (but there's probably more):  https://github.com/appcelerator/alloy/blob/master/Alloy/utils.js#L572    PS: We fixed same issue for 360 in APPTS-6100",Bug,None,Closed,"2016-02-04 08:54:16","2016-02-04 08:54:16",0
"Alloy Framework","Controller template should no longer declare args variable","Since Alloy 1.6.0 (by ALOY-1092) the compiled controllers [have the following line|https://github.com/appcelerator/alloy/blob/master/Alloy/template/component.js#L20]:        Still, our [template for new controllers|https://github.com/appcelerator/alloy/blob/master/Alloy/template/controller.js] has:        Clearly this is no longer needed. The template can be emptied and the availability of {{$.args}} should be documented. I'll create a separate TIDOC ticket for that.",Improvement,Low,Closed,"2016-01-06 15:54:07","2016-01-06 15:54:07",1
"Alloy Framework","iOS Attributed Strings are not showing","h6.Issue Description  Using Attributed String for label in Alloy, it is not showing up in iOS. Where as the same is working properly for Android and in classic.     h6.Steps to reproduce  //Alloy   # Create a new simple project application in alloy  # Open the index.xml view  # Add the next Label:     # Open the index.tss Style   # Add the next style:     # Run    // Classic (Working project)  # Create a new cassic default application project  # Open the app.js file  # Replace the content with the next code:    # Run",Bug,Medium,Closed,"2016-01-04 21:20:44","2016-01-04 21:20:44",3
"Alloy Framework","Sample Todo App TextField text color to black","Community PR: https://github.com/appcelerator/alloy/pull/702",Improvement,Low,Closed,"2015-12-16 21:57:46","2015-12-16 21:57:46",1
"Alloy Framework","Add Arabic lang to builtin MomentJS","Community PR: https://github.com/appcelerator/alloy/pull/741  {quote}  Arabic Saudi Arabic is the common use from GCC countries, Yemen, Egypt and Sudan.  Also using Arabic number ١ ٢ ٣ ٤ ٥ ٦ ٧ ٨ ٩ instead of English  {quote}",Improvement,Medium,Closed,"2015-12-16 21:05:23","2015-12-16 21:05:23",2
"Alloy Framework","Alloy selective compilation broken since ALOY-1332","Since [this commit|https://github.com/feons/alloy/commit/25855c1f342eecf6cb6e69dca007d05ebde1771b#diff-ddbdb7300fa15590afdfee9246ac61fcR177], Alloy's selective compilation is broken since the {{Resources}}'s {{alloy.js}} file gets replaced each and every time the alloy compile command is called.    Instead, the fix should look if there's a file restriction, and not replace {{alloy.js}} if this restriction does not affect this file.    This is particularly problematic when using some compilation watcher (aka. tishadow + grunt-tishadow), which look for changes in the {{Resources}} folder to re-launch the app. With the current change, the app will be refreshed using a template-based {{alloy.js}} file (not a recompiled one).",Bug,Critical,Closed,"2015-12-14 17:32:48","2015-12-14 17:32:48",3
"Alloy Framework","Use Alloy's deepExtend to handle conditional on-device style inheritance","Alloy selectors provide ways to overload style rules based on switches (formFactor, OS, conditional rules, etc.). Say the TSS is somehow:    {code}  ...  .title-home: {   bottom: 4,  },  .title-home[formFactor=tablet]: {   bottom: 8  },  ...  {code}    The generated code will look like:    {code}  Alloy.deepExtend(true, o, {      bottom: 4  });  Alloy.isTablet && _.extend(o, {      bottom: 8  });  {code}    If this works fine with most of the properties, this is particularly annoying with font or nested properties. For instance,     {code}  .title-home: {   font: {    fontFamily: Delius-Regular,    fontSize: 11   }  },  .title-home[formFactor=tablet]: {   font: {    fontSize: 22   }  },  {code}    will result in the font name being simply ignored on tablets, as {{_.extend()}} is not a deepExtend method. We're lucky, Alloy provides a {{deepExtend()}} implementation which we may want to use. I therefore propose to switch from {{_.extend()}} to Alloy's {{deepExtend}} implementation. This will allow much more efficient ways of integrating complex graphical interfaces, with style inheritances all across the app:    {code:xml}  <Label class=fonticon icon-row-right icon-arrow-md icon-arrow-right white />  {code}    All styles are merged deeply, and it becomes unnecessary to repeat over and over the font name.    I _know_ that this change may break many tests, but I strongly believe that this behavior is the right way styles _should_ work, in the sake for development efficiency.",Bug,Critical,Closed,"2015-11-27 10:41:20","2015-11-27 10:41:20",5
"Alloy Framework","Windows: App crashes with 'Cannot find variable: OS_BLACKBERRY","h5.Description    When building an Alloy app for Windows Platform the app crashes with the below error      The error originates from [this line in alloy.js|https://github.com/appcelerator/alloy/blob/1fb9878e769c6afee6f46516c08b4708830e26a6/Alloy/lib/alloy.js#L486] and removing the OS_BLACKBERRY check allows the app to launch.        h5.Steps to reproduce     1. Create an Alloy app using {{appc new}}  2. Build the app to Windows Platform using {{appc run -p windows}}    h5.Actual Result     App crashes with the below           h5.Expected result    App should not crash",Bug,High,Closed,"2015-11-16 23:34:31","2015-11-16 23:34:31",1
"Alloy Framework","Add PreviewContext element to XML views","Alloy should support the new {{Ti.UI.iOS.createPreviewContext}}.    * A PreviewContext can be added to most views via their {{previewContext}} property.  * The PreviewContext itself has a {{preview}} property which must be assigned a single View.  * The PreviewContext also has an {{actions}} property for one or more actions or action groups.    ","New Feature",None,Closed,"2015-11-04 11:51:27","2015-11-04 11:51:27",8
"Alloy Framework","Alloy: module-tag in Alloy element effects all controller-views","The attached app-folder demonstrates that when you use the {{module}} tag on the {{<Alloy>}} tag of one view, this will be applied to *all* other controller-views as well.    1. Compile the app.  2. Open {{Resources/iphone/controllers/testWindow.js}}.  3. Confirm that it has {{(require(testModule).createWindow || Ti.UI.createWindow)}} for all views as well, while only {{app/views/index.xml}} has has the {{module}} tag.    Found by [~<USER>",Bug,Medium,Closed,"2015-11-01 18:49:35","2015-11-01 18:49:35",3
"Alloy Framework","Blackberry still appears in the assets folder","*Details:* Blackberry still appears in the assets folder.    *Note:* This is not a regression since this occurs with the current GA stack.    *Steps to reproduce:*  # Create a mobile project with {{appc new}}  # In the mobile project, go to app > assets    *Actual:* Blackberry folder still exists; see attachment.  *Expected:* The Blackberry folder should not exist.",Bug,None,Closed,"2015-10-30 00:34:47","2015-10-30 00:34:47",1
"Alloy Framework","iOS: packaged app icons for new projects needs to be updated","Since TI SDK 5.0.0, we support app icons resizing, placing them into assets catalog etc, so we should do a clean up on the app icons to reduce the number of warnings being shown now.    1. All app icons should NOT have alpha channel.  2. Remove unsupported app icons.    See current trace when there's no DefaultIcon.png or DefaultIcon-ios.png:      *OR* we can just remove all the ios app icons in the assets folder,  and only have DefaultIcon.png in the root of the project to avoid confusion.",Improvement,Medium,Closed,"2015-10-29 01:31:23","2015-10-29 01:31:23",1
"Alloy Framework","Styles not applied when an element uses another namespace","When an Alloy view element uses another namespace styles are no longer applied. When you set {{ns}} to the default {{Ti.UI}} it still works, but any other value will not.    *index.xml*    {code:xml}  <Alloy>      <Window>          <View />          <View ns=Ti.UI />          <View ns=Ti.UI.Android />      </Window>  </Alloy>  {code}    *index.tss*    {code}  'View': {   backgroundColor: 'red'  }  {code}    *Compiled code*    {code:javascript}      $.__views.__alloyId0 = Ti.UI.createView({          backgroundColor: red,          id: __alloyId0      });      $.__views.index.add($.__views.__alloyId0);      $.__views.__alloyId1 = Ti.UI.createView({          backgroundColor: red,          id: __alloyId1      });      $.__views.index.add($.__views.__alloyId1);      $.__views.__alloyId2 = Ti.UI.Android.createView({          id: __alloyId2      });  {code}",Bug,None,Closed,"2015-10-28 12:43:27","2015-10-28 12:43:27",5
"Alloy Framework","Support CardView in XML","Titanium SDK 5.1.0 introduces a new view container for Android called CardView.  http://appcelerator.github.io/appc-docs/latest/#!/api/Titanium.UI.Android.CardView    We should support it in XML and implicitly set the namespace to Ti.UI.Android.    Example XML of sample in API docs:  ","New Feature",None,Closed,"2015-10-14 22:25:12","2015-10-14 22:25:12",5
"Alloy Framework","DefaultIcon(-platform).png should be theme-able","The new {{/DefaultIcon.png}} which has platform specific versions at {{/DefaultIcon-<platform>.png}} should be theme-able via Alloy.    We probably need a similar approach as with {{i18n}} and {{platform}} since we can't overwrite the {{DefaultIcon.png}} in the project root, so we have to do it at build-time.    - https://github.com/appcelerator/alloy/pull/662/files#diff-ddbdb7300fa15590afdfee9246ac61fcR327  - https://github.com/appcelerator/alloy/pull/662/files#diff-6487ccfa4909144bbc33134e4d85bdddR159    Kindly pointed out by [~<USER>:  https://twitter.com/<USER>status/654326054488834048","New Feature",None,Closed,"2015-10-14 17:46:43","2015-10-14 17:46:43",5
"Alloy Framework","Alloy: Default top-level ID doesn't take if-attribute into account","While ALOY-851 is said to be fixed, the following:    {code:xml}  <Alloy>      <TabGroup if=Alloy.Globals.requiredVersion>    <Require src=list />    <Require src=apis />    <Require src=console />   </TabGroup>     <Window if=!Alloy.Globals.requiredVersion>    <Label>This sample requires Titanium 5.1 or later</Label>   </Window>    </Alloy>  {code}    still compiles to:    {code:javascript}      if (Alloy.Globals.requiredVersion) {          var __alloyId11 = [];          $.__views.__alloyId12 = Alloy.createController(list, {              id: __alloyId12          });          __alloyId11.push($.__views.__alloyId12.getViewEx({              recurse: true          }));          $.__views.__alloyId14 = Alloy.createController(apis, {              id: __alloyId14          });          __alloyId11.push($.__views.__alloyId14.getViewEx({              recurse: true          }));          $.__views.__alloyId16 = Alloy.createController(console, {              id: __alloyId16          });          __alloyId11.push($.__views.__alloyId16.getViewEx({              recurse: true          }));          $.__views.index = Ti.UI.createTabGroup({              tabsBackgroundColor: white,              tabsTintColor: Alloy.CFG.brandPrimary,              tabs: __alloyId11,              id: index          });          $.__views.index && $.addTopLevelView($.__views.index);      }      if (!Alloy.Globals.requiredVersion) {          $.__views.__alloyId17 = Ti.UI.createWindow({              backgroundColor: #fff,              barColor: Alloy.CFG.brandPrimary,              navTintColor: #FFF,              translucent: false,              titleAttributes: {                  color: #FFF              },              id: __alloyId17          });          $.__views.__alloyId17 && $.addTopLevelView($.__views.__alloyId17);          $.__views.__alloyId18 = Ti.UI.createLabel({              text: This sample requires Titanium 5.1 or later,              id: __alloyId18          });          $.__views.__alloyId17.add($.__views.__alloyId18);      }  {code}    which shows that the negative condition does not give the ID index to the window, which it should.",Bug,Medium,Closed,"2015-10-12 09:08:02","2015-10-12 09:08:02",5
"Alloy Framework","Support use of $.args.* in any XML attribute or TSS property","We now support using {{$.args}} in XML {{if=$.args.foo}} attributes. However, it would be very useful if you could use it as value of any attribute, as well as value in TSS.    The following should then result in a Window containing a label that says _bar_:    *index.xml*  {code:xml}  <Alloy>   <Window class=container>    <Require src=foo foo=bar />   </Window>  </Alloy>  {code}    *foo.xml*  {code:xml}  <Alloy>   <Label text=$.args.foo />  </Alloy>  {code}    Currently this compiles to:    {code:javascript}      $.__views.foo = Ti.UI.createLabel({          text: $.args.foo,          id: foo      });  {code}    If you try to use {{$.args.foo}} in TSS it will fail to compile with:    {code}  [ERROR] Expected Alloy, L, Ti, Titanium, WPATH, [, false, null, true, undefined, {, comment, end of line, number, string or whitespace but $ found.  {code}","New Feature",None,Closed,"2015-10-09 12:54:36","2015-10-09 12:54:36",2
"Alloy Framework","Update out-of-date Alloy dependencies.","There are a number of out-dated Alloy dependencies, we should update them to the latest stable versions.    {quote}  colors can be updated from 0.6.0-1 to 1.1.2 (Installed: none, Latest: 1.1.2)  pkginfo can be updated from 0.2.2 to 0.3.0 (Installed: none, Latest: 0.3.0)  commander can be updated from 0.6.1 to 2.8.1 (Installed: none, Latest: 2.8.1)  wrench can be updated from 1.3.9 to 1.5.8 (Installed: none, Latest: 1.5.8)  jsonlint can be updated from 1.5.1 to 1.6.2 (Installed: none, Latest: 1.6.2)  uglify-js can be updated from 2.4.15 to 2.4.24 (Installed: none, Latest: 2.4.24)  source-map can be updated from 0.1.9 to 0.5.1 (Installed: none, Latest: 0.5.1)  moment can be updated from 2.7.0 to 2.10.6 (Installed: none, Latest: 2.10.6)  node.extend can be updated from 1.0.10 to 1.1.5 (Installed: none, Latest: 1.1.5)  {quote}",Story,High,Resolved,"2015-10-08 19:24:31","2015-10-08 19:24:31",3
"Alloy Framework","Alloy: Remove alpha channel from DefaultIcon.png","Xcode does not accept app icons with alpha channel in it, please remove the alpha channel for DefaultIcon.png",Bug,Critical,Closed,"2015-10-08 08:42:25","2015-10-08 08:42:25",1
"Alloy Framework","Add bugs URL to package.json","Adding a URL to the location of where bugs are filed makes it easier for developers.    ",Improvement,High,Closed,"2015-10-06 17:33:05","2015-10-06 17:33:05",5
"Alloy Framework","Alloy.jmk compile:app.js event never fires","According to:    https://wiki.appcelerator.org/pages/viewpage.action?pageId=35620079    a compile:app.js event fires after the app.js is created and before it's written to disk.    This never happens and the event is ignored.",Bug,Critical,Closed,"2015-03-02 16:35:44","2015-03-02 16:35:44",5
"Alloy Framework","Alloy: Picker not working in ListView template","I use a Picker inside a itemTemplate in a ListView. When not using any eventListener, the picker works (but is useless). Once i assign an event like onChange=doSomething, the app crashed when being opened and says:    undefined is not an object (evaluating '$.__views.picker.addEventListener');    Expected behaviour: The picker inside a ListView can have events.  Given behaviour: The picker inside a ListView cannot have events and the app crashes immediately.    Example code will be available soon!    ",Bug,Critical,Closed,"2015-03-01 12:31:36","2015-03-01 12:31:36",3
"Alloy Framework","iTunesArtwork is being copied into Resources/iphone instead of project root","The iTunesArtwork and iTunesArtwork@2x files are being copied from the assets/iphone directory into the Resources/iphone directory when actually they should be copied in to the project root.",Bug,None,Closed,"2015-09-25 18:40:12","2015-09-25 18:40:12",0
"Alloy Framework","deepclean.js syntax error in line 17: missing semicolon;","Upgraded to Appcelerator Studio 5 and changed the tiapp.xml for the app (I have been in the process of developing for several months now targeted for iOS/iPad) to use Titanium SDK 5.0.0 GA.    Experienced the following issue any time I try to build the app (iOS app for iPad 2):    deepclean.js regenerates itself and results in a missing semicolon.    This is traceable to a syntax error in the GitHub source code    https://github.com/appcelerator/alloy/blob/12310dda3b987292ee1bbbbcfdd129af6b6c5cfc/hooks/deepclean.js    I have not enough experience with the platform to know how to proceed in resolving this issue.    ",Bug,Critical,Resolved,"2015-09-20 22:07:07","2015-09-20 22:07:07",1
"Alloy Framework","Alloy: Support Node text for TextField and TextArea","The following sample and attached screenshot shows that {{TextArea}} and {{TextField}} do not support using node text to set the {{value}} property.        This is in line with [documentation|http://docs.appcelerator.com/platform/latest/#!/guide/Alloy_XML_Markup-section-35621528_AlloyXMLMarkup-PropertyMapping] so not a bug, but a feature request.",Improvement,None,Resolved,"2015-09-16 10:58:18","2015-09-16 10:58:18",3
"Alloy Framework","Alloy needs to have a consistent behavior with Ti on App Icons","See related ticket. Currently the behavior in managing the app icons is different. This ticket has to address and make them consistent.  With the related ticket, a DefaultIcon.png WILL BE copied into the project's root when {{alloy new}} is run.    h4. Test cases APPC CLI :  A. Brand new project via Appc. *appc new* *appc run -p ios*  B. *appc run -p ios -T dist-adhoc*  C. Scenario where DefaultIcon.png (use attached [^DefaultIcon.png] in ticket), and ALL icons described [here|http://docs.appcelerator.com/platform/latest/#!/guide/Icons_and_Splash_Screens] exists, but are different from DefaultIcon.png. (This is the situation when a user decide to IGNORE the DefaultIcon.png and have his very own other icons). *appc run -p ios*  D. Scenario where DefaultIcon.png is missing, but ALL icons described [here|http://docs.appcelerator.com/platform/latest/#!/guide/Icons_and_Splash_Screens] exists. (This is the situation when a user updates an existing project to the latest SDK). *appc run -p ios*  E. Scenario where DefaultIcon.png is missing, but SOME icons described [here|http://docs.appcelerator.com/platform/latest/#!/guide/Icons_and_Splash_Screens] are missing. (This is the situation when a user updates an existing project with missing icons to the latest SDK). *appc run -p ios*    h4. Expected Results:  A. Build success. See inside build->iphone->Assets.xcassets and see these files [^defaultContent.png]  B. Build success. See inside build->iphone->build->Products->Release-iphoneos->SGIcon.app->Show Package Content, there's the iTunesArtwork.png and <EMAIL>  C. Build success. User's icons should be prioritized over the use of DefaultIcon.png. See inside build->iphone->Assets.xcassets and see these files [^withDefaultAndAllIcons.png]  D. Build success. See inside build->iphone->Assets.xcassets and see these files [^defaultContent.png]  E. Build Fail. See error prompt       h4. Actual Result:  A. Build success. But the content of build->iphone->Assets.xcassets is inconsistent. [^appcdefaultContent.png] In tooling, we have to remove all the existing icons in the Resources folder so that DefaultIcon.png can do it's job.  ",Improvement,Critical,Closed,"2015-09-10 08:21:30","2015-09-10 08:21:30",5
"Alloy Framework","iOS: Assets Catalog inconsistency between Alloy and Classic","Comparing the folders *Assets.xcassets* in the generated build folder between a classic and alloy project, the alloy *AppIcon.appiconset* and *LaunchImage.launchimage* contains inconsistent images, even though the file naming convention is correct. See attached images for comparison.    h4. Steps to reproduce  1. Create a ti classic project: ti create  2. enter project folder  3. Create Alloy: alloy new  4. Compile Alloy: alloy compile --config platform=ios  5. Build project: ti build -p ios -I 9.0    h4. Expected result  images in assets catalog should be consistent    h4. Actual result  <EMAIL> and <EMAIL> is different from the rest  <EMAIL> and <EMAIL> and <EMAIL> is different from the rest    *Note*: because of this, appc run is seeing the same issue.",Bug,Critical,Resolved,"2015-08-20 08:54:41","2015-08-20 08:54:41",3
"Alloy Framework","Cannot build a new project for iOS due to missing appicons","Cannot build to iOS simulator or device. Error shown during build for missing appicons.    This is a regression as the issue does not occur on 4.1.0.GA    Steps to Reproduce:  1. Create a new titanium project  2. Build it for iOS simulator or device    Actual Result:  An error is shown      Expected Result:  The project should build successfully for iOS",Bug,Critical,Closed,"2015-08-17 12:59:06","2015-08-17 12:59:06",3
"Alloy Framework","Override Alloy theme styles in the app's app/styles folder over the alloy themes","h6.Issue Description    The themes on app have most precedence than the app/styles folder.    h6.Expected behavior    The user need a hierarchical behavior to override the base theme's styles with app specific ones at the app/styles level without changing the theme itself, you can take a look on web technologies because this is how they work over themes. More specifically, titanium should follow this procedure based on some web technologies:    1.Looks for a file in the current app/style directory that matches the view. If the view is “page-1,” then titanium  should look for a file called page-1.  2.If the styles file or is missing or not exist, titanium should look for a template file called “page-1” in the themes.  3.If the file is missing, titanium will look for a generic style in, app/styles/app.tss file.  4.If the style does not exist, titanium will look for a generic style app.tss file on the theme.      h6.Steps to Replicate:   1. Override the app folder attached on a new alloy project  2. View the behavior on the .container color in the app/styles and the theme styles on index.tss    Additional Note:   This behavior was tested on:  Release 4.1.0  Release 4.0.0  Release 3.5.1  ","New Feature",High,Open,"2015-08-14 15:05:23","2015-08-14 15:05:23",8
"Alloy Framework","Cannot use localized strings for AlertDialog ButtonNames in XML","Create a new Alloy project and overwrite the files with the one in the attached ZIP file.  Run the project.    RESULTS:  The dialog displays the localize function and not the value.  See attached screenshot.    OTHER INFO:  Works fine in the TSS.",Bug,None,Resolved,"2015-08-12 01:45:30","2015-08-12 01:45:30",3
"Alloy Framework","LiveView: functions in Alloy.js crash fail to build","h4. Problem Description   When you create a new alloy project and define a function inside alloy.js, If you are using LiveView the application will crash     h4. Sample Code     alloy.js      index.xml      index.tss      index.js       h4. Steps to reproduce     - Create a simple alloy project.  - Update alloy.js, index.xml, index.tss and index.js file with test code  - Enable LiveView in Appcelerator Studio  - Run on iOS simulator  - Project crash and produce errors.    h4. Actual Results      h4. Extra info    This is the error shown:      ",Bug,High,Resolved,"2014-07-15 22:09:34","2014-07-15 22:09:34",8
"Alloy Framework","Windows: App crashes when calling fetch() method on a collection bound to a view","REPRODUCTION:  Create a new Alloy project and overwrite the files with the versions from the attachment.  Run the project in the Windows emulator.    RESULTS:  The app crashes with the following error:      OTHER INFO:  Comment out the Alloy.Collections.book.fetch() method in the app/controllers/index.js file and the application runs fine.  ",Bug,High,Closed,"2015-07-30 22:46:04","2015-07-30 22:46:04",5
"Alloy Framework","Windows: Label not visible when using default app.tss","The [default app.tss|https://github.com/appcelerator/alloy/blob/master/Alloy/template/app.tss] sets the Window backgroundColor to white for all platforms. on Windows the default color of a label is white, making them invisible when using the default {{app.tss}}. Just like we do for Android, we should set the Label color to black.    Note: There might still be issues with other elements that default to white on Windows, like titles in ListViews.",Bug,Low,Closed,"2015-07-02 11:45:48","2015-07-02 11:45:48",3
"Alloy Framework","Alloy styles compilation does not produce the same results accross successive compilations","In some cases, when the developer overloads in a stylesheets some styles defined in the {{app.tss}} files, the alloy compilation won't produce the same resulting javascript accross successive compilations.    Alloy's styler orders style rules to define their priority, but there's a bug with the {{app.tss}} global styles being cached and therefore not correctly being counted by the styler during a compilation phase when {{app.tss}} didn't change.    Steps to reproduce:     * create a new alloy app, replace its {{app}} folder with the one contained in the attached app.zip file   * compile once: {{alloy compile --config platform=ios}}. Check in {{Resources/iphone/alloy/controllers/sum.js}} that the style rules defined in {{app/styles/sum.tss}} are applied correctly   * compile again, the generated javascript in the {{Resources}} directory differ. In particular, the {{Resources/iphone/alloy/controllers/sum.js}} does only contain rules from the {{app.tss}} file.    A PR is being proposed to fix this problem.",Bug,Medium,Resolved,"2015-07-01 09:29:12","2015-07-01 09:29:12",5
"Alloy Framework","TSS conditional statement is ignored by items dynamically generated on runtime","Below is the sample of the TSS condition statement:  .date[if=false]: {   backgroundColor: #f00   }    This always gets executed, even if logically it shouldn't be.  It happens to elements created on runtime by this code:    label = $.UI.create('Label', { text: displayDate, classes: ['date']} );",Bug,Critical,Resolved,"2014-12-27 00:37:13","2014-12-27 00:37:13",5
"Alloy Framework","ActionView views with an ID cannot be found under $ because they are created after merge","ALOY-1175 fixed this issue for IDs set on {{<MenuItem>}} but it is still an issue for views under {{<ActionView>}}. Because they are created after the controller merges {{$.__views}} with {{$}} you cannot access the views via {{$.<id>}}.    *index.xml*    {code:xml}  <Alloy>      <Window>          <Menu>              <MenuItem title=Open showAsAction=Titanium.Android.SHOW_AS_ACTION_ALWAYS>                  <ActionView>                      <View id=myViewInActionView backgroundColor=red>                       <Button onClick=changeColor>Change Color</Button>                      </View>                  </ActionView>              </MenuItem>          </Menu>                  </Window>  </Alloy>  {code}    *index.js*    {code:javascript}  $.index.open();     function changeColor() {    $.myViewInActionView.backgroundColor = 'green';  }  {code}",Bug,Medium,Closed,"2015-06-25 11:16:10","2015-06-25 11:16:10",5
"Alloy Framework","RSS sample should be removed in favour of Studio version","The RSS sample in the Alloy repository...  https://github.com/appcelerator/alloy/tree/master/samples/rss    .. should be removed to avoid confusion now Studio has an updated version:  https://github.com/appcelerator-developer-relations/Sample.RSS",Improvement,Medium,Closed,"2015-06-22 15:51:55","2015-06-22 15:51:55",3
"Alloy Framework","Support CommandBar in XML markup","Windows Phone has a platform-specific feature called the CommandBar, similar to the Android Action Bar or iOS Toolbar.  The Titanium.UI.Windows.CommandBar object is assigned an array of buttons and separators to its items property for it to display.    For a classic Titanium example, see: https://appcelerator.github.io/appc-docs/latest/#!/api/Titanium.UI.Windows.CommandBar    Example of an Alloy view using the CommandBar  ","New Feature",None,Resolved,"2015-06-20 00:15:33","2015-06-20 00:15:33",5
"Alloy Framework","Pass model config to migration functions","It will be nice if sql sync adapter will pass model config to migration functions. It will get access to model columns inside migration for example.        Community PR: https://github.com/appcelerator/alloy/pull/684",Improvement,Low,Closed,"2015-05-07 00:05:04","2015-05-07 00:05:04",3
"Alloy Framework","Alloy's deepExtend is broken","Since [this commit|https://github.com/appcelerator/alloy/commit/84c9470d9932a5ad762f8220db79802d91ec4c86], the {{deepExtend()}} method present in Alloy is broken, as deeply merged properties get overwritten three line below.    The method should not state:      but:        As a consequence, this method is purely useless.",Bug,Critical,Resolved,"2015-05-27 22:25:00","2015-05-27 22:25:00",5
"Alloy Framework","Code documentation contains links to out-dated Titanium docs","The (code) documentation in the Alloy repository contains links to the now out-dated Titanium documentation, where it should be updated to link to the Platform documentation:    https://github.com/appcelerator/alloy/search?utf8=%E2%9C%93&q=%22titanium%2Flatest%22",Bug,Low,Closed,"2015-05-25 08:32:45","2015-05-25 08:32:45",2
"Alloy Framework","Building an alloy project with Titanium CLI on Windows fails","h5.Description    When building an Alloy project on Windows using the Titanium CLI the build fails with the following error            h5.Steps To Reproduce    1. On a Windows machine using the Titanium CLI create a new project {{ti create}}  2. Convert the project to Alloy using {{alloy new}} from within the project directory  3. Run the project using {{ti build}}    h5.Actual Result    The project build will fail with the error above    h5.Expected Result    The project should build successfully",Bug,Medium,Closed,"2015-05-22 22:15:59","2015-05-22 22:15:59",5
"Alloy Framework","Android templates should use nine-patch images","Since both Google and [we|http://docs.appcelerator.com/platform/latest/#!/guide/Icons_and_Splash_Screens-section-29004897_IconsandSplashScreens-Androidsplashscreenconsiderations] recommend using nine-patch for splash images, our templates should do so as well.    The new [Alloy|https://github.com/appcelerator/alloy/blob/master/platforms/android/project/app/assets/android/images/res-long-port-hdpi/default.png] splash images would work fine as a nine-patch image as they are.",Improvement,High,Open,"2015-05-21 08:34:23","2015-05-21 08:34:23",5
"Alloy Framework","Update builtin moment.js library to 2.10.6 (or latest)","Moment.js has changed how it handles time zones/UTC. Took me forever to figure out why my calls to {{moment().utcOffset();}} didn't work.",Sub-task,Critical,Closed,"2015-05-12 20:28:41","2015-05-12 20:28:41",5
"Alloy Framework","a directory ending with .js causes Alloy compiler error","This bug is related to [ALOY-920], which introduced a fix for the specific case of {{should.js}}.    When building an Alloy project containg a library directory named with a {{.js}} suffix, the compiler fails:        The {{getJsFiles()}} Alloy compiler method filters which files have to be optimized, as in https://github.com/appcelerator/alloy/blob/master/Alloy/commands/compile/index.js#L1017  This method fails to exclude items which are directories ending with {{.js}}, and {{uglifyjs.parse()}} then throws an error.    A pull request has been submitted at https://github.com/appcelerator/alloy/pull/683",Bug,Critical,Closed,"2015-04-13 11:03:46","2015-04-13 11:03:46",5
"Alloy Framework","Windowsphone not in platforms list in manifest.json","The manifest.json in the SDK is missing windowsphone (or windows) from the platforms array. This is causing windowsphone assets to be in a default alloy project on Mac, as well as windowsphone assets to be included in a packaged APK, on Mac.  File is: {{Titanium/mobilesdk/osx/4.0.0.Beta2/manifest.json}}    *Steps to reproduce issue*:  1. Open Studio  2. Create a new project (default Alloy template)  3. Package the project for Android store  4. Navigate to the APK and rename it to a .zip file  5. Extract the zip    *Actual Results*:  2. Notice that there is a windowsphone folder/assets in the {{app/assets}} folder  5. Notice that there are windowsphone assets in {{/assets/Resources}} of the extracted APK    *Expected Results*:  There should not be windowsphone resources in the project or APK",Bug,Medium,Closed,"2015-04-03 19:26:39","2015-04-03 19:26:39",3
"Alloy Framework","Map DocumentViewer to Ti.UI.iOS instead of deprecated Ti.UI.iPad namespace","The {{DocumentViewer}} tag is currently [mapped|https://github.com/appcelerator/alloy/blob/master/Alloy/common/constants.js#L195] to the {{Ti.UI.iPad}} namespace, while that has been deprecated since Ti SDK 3.0.0 in favour of {{Ti.UI.iOS}}.    * PR on master: https://github.com/appcelerator/alloy/pull/673/files",Bug,Medium,Resolved,"2015-03-24 18:15:09","2015-03-24 18:15:09",1
"Alloy Framework","restrictionPath missing in parseAlloyComponent for controller without corresponding view","As reported at https://github.com/<USER>TiShadow/issues/388#issuecomment-73190579 Alloy optimizes all JS files when using the selective compile feature implemented in ALOY-1216.    Community PR to resolve this: https://github.com/appcelerator/alloy/pull/661    Needs verification and testing.    ",Bug,High,Resolved,"2015-02-19 16:45:31","2015-02-19 16:45:31",3
"Alloy Framework","Remove BB from Alloy","Remove BB from Alloy: platform variables, config.json variables, any platform-specific checks in the compiler, BB-specific parsers, hooks, constants, and tests. Make sure also sample apps and tests for BB are removed.",Improvement,High,Closed,"2015-02-18 18:29:19","2015-02-18 18:29:19",5
"Alloy Framework","iOS: Misleading error message when controller file not found","When Alloy can't find a controller on iOS, it gives a message saying that a module (controllerName) for architecture (arm7/arm64) can't be found. very confusing, becuase it sounds like there's a native module problem.    {code:title=index.js}  Alloy.createController('foo');  {code}",Bug,High,Closed,"2015-02-18 15:59:35","2015-02-18 15:59:35",5
"Alloy Framework","iOS: ListView blank during redraw","h4. Problem Description  After a large model update, find that the listview display only shows what was on  displayed, and the rest is blank. The scroll bar shows that I have new records, but is displaying blank lines.  If I load a new screen with the same ListView code or flip to another screen and come back, the data display is correct. If I quit and come back in, it is clean and all data is displayed. Is clearly a screen redraw problem I'm having.  Have even done a simple code test version, within my App, and still have the same problem.    Was working perfectly with 3.3.    This same problem is happening in other screens with ListView as well of my App.     h4. STEPS TO TEST:  - Create a simple alloy project.  - Update project with test code -  Link: https://github.com/PeterTippett/ListViewBugTest  - Run on iOS device/simulator  -List view doesn’t refresh/load data (screenshot 1) but update it’s count value. If we run the project again, then data loads as expected (screenshot 2). But when we refresh/load data again, then a visible section of screen only shows data, others can’t (screenshot 3&4).    Screenshot Link: http://oi57.tinypic.com/ve17rp.jpg    h4. EXPECTED RESULT:  It’s not working as expected.    h4. Extra info  An error appears in Xcode - TiUIListViewProxy.m (marked in x) Thread 1: EXC_BAD_ACCESS(code=1, address=Oxe)    TiUIListViewProxy.m Thread 1: EXC_BAD_ACCESS(code=1, address=Oxe) - marked with xxxx    {quote}  Assertion failure in -[UITableView _endCellAnimationsWithContext:], /SourceCache/UIKit/UIKit-3318.0.1/UITableView.m:1582  {quote}  Have built a version that repeats this and done a clean rebuilt of Titanium as well downloading all the latest versions.  https://github.com/PeterTippett/ListViewBugTest - sample code that fails    Have attached three screen shots, one is before an update.  http://developer.appcelerator.com/question/178522/listview-redraw-after-a-large-model-update#comment-220169  {quote}  [INFO] :   Found Titanium plugin id=ti.alloy version=1.0   [INFO] :   Deploy type: development  [INFO] :   Building for target: simulator  [INFO] :   Building using iOS SDK: 8.0  [INFO] :   Building for iOS Simulator: iPhone 6  [INFO] :   Building for device family: universal  [INFO] :   Minimum iOS version: 6.0  {quote}  ",Bug,High,Reopened,"2014-10-19 22:48:54","2014-10-19 22:48:54",13
"Alloy Framework","Nested require with createController getView call causes crash on android","How to reproduce:  # make new alloy project  # add the following files:  ** controllers/index.js    ** controllers/list.js (empty)  ** controllers/test.js (empty)  ** views/index.xml    ** views/list.xml    ** views/test.xml      Same problem exists when doing this inside a Widget with <Widget> and Widget.createController().     This code causes the following crash on starting the app on Android.  ",Bug,Medium,Open,"2014-11-21 15:54:59","2014-11-21 15:54:59",5
"Alloy Framework","Alloy: Widget is loaded - initialized twice","Widget within TableViewSection is initialized twice.    index.xml      widget.xml      widget.js      Console output:  ",Bug,Medium,Resolved,"2014-10-08 11:12:31","2014-10-08 11:12:31",5
"Alloy Framework","Date picker type cannot be specified in the TSS","views/index.xml contains:      styles/index.tss contains:      Result: Date picker shows as expected.    However, when the type definition is moved into the .tss (usual case):    views/index.xml contains:      styles/index.tss contains:      Result: The entire picker is not displayed at all. The class .datePicker is not defined anywhere else in index.tss. Any attempts to assign a date value to the picker results in an app crash.      This was tested on a Samsung Galaxy Note 2 LTE running Android 4.3. Project is based on the Default Alloy Project template.",Improvement,Medium,Closed,"2014-08-21 10:15:19","2014-08-21 10:15:19",5
"Alloy Framework","Set Node 0.10 as minimum supported version","Update the minimum supported version of Node to 0.10.x. Make sure to check for and update any version checks in the code as well as updating the package.json file.",Improvement,None,Resolved,"2015-02-11 15:48:22","2015-02-11 15:48:22",5
"Alloy Framework","Can't re-create index controller after renaming original one","h5. Scenario  I want to refactor an existing Alloy app by moving/re-naming the current index.xml/js/tss controller triad to something else, and then create a new index controller.    h6. Steps:  1. Create a new Alloy app.  2. Rename views/index.xml, styles/index.tss, and controllers/index.js to views/main.xml, styles/main.tss, and controllers/main.js.  3. Create a new index controller:      h6. Results:  Actual:    Expected: I can create a new index controller w/o error.    ",Bug,High,Closed,"2015-02-10 17:31:57","2015-02-10 17:31:57",3
"Alloy Framework","Alloy: Remove all event listeners added via view in $.destroy()","Too make it easier for developers to clean up the event listeners they've added via the XML view ({{onClick}} and other attributes), could we make it so that if you add an event listener that way, that it would also be removed in the {{$.destroy()}} method?    The developer would still be responsible for calling that method and for removing listeners he added in the controller, but it would align nicely with the current behaviour of the method where it also cleans up a listener added via the view, which is for the {{<Collection>}} or {{<Model}}> tag.    For reference:  https://github.com/appcelerator/alloy/blob/master/test/apps/basics/markup_events/_generated/ios/alloy/controllers/index.js#L44-L49    Perhaps the {{__defers}} object could be used for this in some way?    We could even go as far as extending the Backbone {{$.listenTo()}} method that if its first argument is a proxy, then it would both pass it on to that proxies' {{addEventListener}} method and queue it for removal in {{$.destroy}} at the same time.","New Feature",Low,Resolved,"2015-02-10 11:57:42","2015-02-10 11:57:42",8
"Alloy Framework","Binding notation should allow mixed variables and plain text","Alloy's databinding syntax lets you mix binding selectors and plain text in some ways, but not others. What is permitted and what is not supported is not obvious or intuitive.    Binding should simply replace the variable wherever it is present.        Some complex binding was enabled through ALOY-443, but not all combinations.     Relates to https://github.com/EtnaTraining/MoviesDemo/issues/2",Improvement,None,Open,"2015-02-09 15:09:52","2015-02-09 15:09:52",8
"Alloy Framework","Annotate Alloy API docs with GitHub URL","To support TIDOC-2058, the following PR adds an {{@editurl}} field to the JSDuck docs for each public class.    https://github.com/appcelerator/alloy/pull/659    Ideally, this would be done by a doc build script (like we do for Titanium), but since there are just a few Alloy docs to annotate, this seemed a more direct approach.","New Feature",Medium,Resolved,"2015-02-02 15:51:49","2015-02-02 15:51:49",2
"Alloy Framework","--deploy-type ignored on android builds for emulator and device","h4. Problem Description  The argument --deploy-type or -D is ignored if the target is android, always generating 'development' for emulator and 'test' for device, even if specified the other way. iOS works fine. I didn't test all the others platforms.    h4. Steps to reproduce  Since we use these settings to trigger our testing scripts, figured I'd give it a test. Ti.App.deployType seems to work fine here. But your settings from the config.json file do not.  added the following to my alloy.js to test faster:      Results:  Genymotion Google Nexus 5 - 5.0.0 - API 21 - 1080x1920 (5.0.0)        Genymotion Samsung Galaxy S5 - 4.4.4 - API 19 - 1080x1920 (4.4.4)        Device Samsung S4        h4. Steps to reproduce  I used these commands for testing:                  h4. Extra info  Seems like CFG.js doesn't get updated under resources once you switch the deployType flag. Deleting the content of Resources (aka forcing regeneration of CFG.js) will go and use the right config.",Bug,High,Closed,"2014-12-22 21:51:49","2014-12-22 21:51:49",5
"Alloy Framework","Mapping sample: add readme, remove map key","Add a readme file to the samples/mapping app that describes the steps that an Android developer would need to follow to run the app (obtain a key, which file to update, etc.) Include a reference to the Guides where the we describe how to obtain a key.     Also, update the JMK file to remove the old key (commented out currently). Replace it with something like {{// Paste your key here}}",Improvement,Medium,Resolved,"2015-01-20 19:33:57","2015-01-20 19:33:57",2
"Alloy Framework","Update to jasmine 2.x","Update the jake test libs to use Jasmine 2.x (latest stable). As necessary, update existing tests to support changes.    We're using Jasmine 1.2. As of this writing, the current version is 2.1.3. The 2.x branch offers improved matchers, refactored code for better performance, plus new features such as {{beforeAll()}}. ",Sub-task,High,Open,"2015-01-19 18:43:40","2015-01-19 18:43:40",5
"Alloy Framework","iOS: ListView filling template incorrectly","The ListView is not filling out incorrectly. The first label #faultyLabel should be replace with text and have a backgroundColor=magenta, but what's happening is a new label is appearing behind the next line, with its backgroundColor=magenta and the text either not displayed or displayed out of view.    Create a new Alloy project and drop the three attached files to see the issue. The ListView works correctly in Android (screenshot also attached)",Bug,High,Resolved,"2014-08-13 17:47:23","2014-08-13 17:47:23",5
"Alloy Framework","Selective compilation can fail with platform-specific controllers and throws Exception incorrectly","Per email from <USER> the compilation-optimization technique implemented in [PR625|https://github.com/appcelerator/alloy/pull/625] will fail in certain cases. He suggests the following changes be made to fix these issues:    * https://github.com/xavierlacot/alloy/pull/1  * https://github.com/xavierlacot/alloy/pull/2     Investigate and implement, add tests",Bug,Critical,Resolved,"2015-01-15 14:33:54","2015-01-15 14:33:54",3
"Alloy Framework","To Do sample app - validate() fails to prevent invalid (empty) items from being added","The model definition in the test/apps/models/todo app includes a validation check. If a model doesn't pass this check, it should not be added to the database. However, empty items are being added.     Per the [Backbone docs|http://backbonejs.org/#Model-validate], you override the validate function with your own code. If a model fails validation, you return any string and save() will be prevented. ",Bug,Medium,Closed,"2015-01-13 19:31:28","2015-01-13 19:31:28",3
"Alloy Framework","social.js authorize UI crashes on android","Upon calling the 'authorize' method, the loading view opens and then immediately crashes, resulting in the following error.     [INFO] :   libc: Fatal signal 11 (SIGSEGV) at 0x00000014 (code=1), thread 2206 (KrollRuntimeThr)    The behavior is consistent. However, if I open and close a facebook authorize dialog before opening the twitter authorize dialog, the twitter dialog will usually work. The issue may lie in the popIn animation: it appears that the window expands beyond the mobile screen viewport, and will crash at about the time the window should zoom back into the viewport.   See the attached video for a demo of the bug.     Functionality is fine in iOS v 8.1.     Other notes:  * Line 514 of the social.js file makes us of the deprecated Ti.UI.AUTODETECT_NONE   * The default navigation/action bar at the top becomes visible",Bug,High,Closed,"2014-11-24 15:39:25","2014-11-24 15:39:25",3
"Alloy Framework","iOS: Events on Custom Template of ListView does not work well, when add Scrollable View into Template","IOS: Events on Custom Template of ListView does not work well, when add Scrollable View into Template    h6.Reproduce:  1.Run the following test case on Alloy Project.    h6.Problem:  When add onSingletap event to Label inside template, it works well.  But If add same event to scrollable View  inside template, build will failed with undefined error.    h6.Test Case:  {code:title=index.js}  var view1 = Ti.UI.createView({ backgroundColor:'#123', width:200});  var view2 = Ti.UI.createView({ backgroundColor:'#246', width:200});  var view3 = Ti.UI.createView({ backgroundColor:'#48b', width:200});    var dataSet = [{    scroll: {    views:[view1, view2, view3],   },   properties:{    height: 200,          selectionStyle: 0   },  }];  $.section.appendItems(dataSet);    function testClick(e) {   Ti.API.info(test single tap);  };    $.index.open();  {code}    {code:xml}  <Alloy>   <Window class=container>    <ListView id=listView defaultItemTemplate=template>    <Templates>                          <ItemTemplate name=template>                         <Label buildId=label left=0 text=test width=Ti.UI.SIZE color=black onSingletap=testClick/>                                <ScrollableView bindId=scroll backgroundColor=white clipViews=false left=100 showPagingControl=ture width=200 />                                           </ItemTemplate>                  </Templates>                  <ListSection id=section headerTitle=Test/>    </ListView>   </Window>  </Alloy>  {code}      Here is the [Wiki Ref|https://wiki.appcelerator.org/display/guides2/Alloy+ListView+Guide#AlloyListViewGuide-HandlingEventsonTemplateViews]",Bug,High,Closed,"2015-01-09 05:26:08","2015-01-09 05:26:08",3
"Alloy Framework","Fix failing Travis test `[FAIL] alloy install plugin --> is supported`","Travis builds are failing with {{\[FAIL\] alloy install plugin --> is supported}}    Failures are caused by recent changes for ALOY-1173 and ALOY-1207",Bug,Critical,Resolved,"2015-01-07 18:58:17","2015-01-07 18:58:17",3
"Alloy Framework","Support Widgets and Require in ListItem Templates","Currently, it is not possible to use <Widget> or <Require> within a ItemTemplate like this:        Alloy Compiler fails with error:        as described in https://jira.appcelerator.org/browse/ALOY-611",Improvement,Critical,Resolved,"2014-08-26 13:52:27","2014-08-26 13:52:27",0
"Alloy Framework","Widgets can not be used in ListView Templates","When leveraging templates in a ListView, the alloy compiler fails when trying to compile an ItemTemplate that contains a Widget tag.",Improvement,Medium,Resolved,"2014-08-07 04:20:19","2014-08-07 04:20:19",13
"Alloy Framework","ALLOY: prevent parsing of {{ }} in alloy views.","Alloy is currently catching and interpreting {{ }} as an alloy binding when it should only catch { }.    This change is needed for https://github.com/<USER>nano.",Bug,Medium,Closed,"2015-01-06 08:23:07","2015-01-06 08:23:07",3
"Alloy Framework","TextField with proxy property causes compile error as ItemTemplate","h3. index.xml  {code:xml}  <Alloy>    <Window id=settingsWin title=Settings class=container tabBarHidden=true>      <ListView id=listView defaultItemTemplate=template allowsSelection=false>        <Templates>          <ItemTemplate id=inputTemplate name=inputTemplate>            <TextField              platform=ios              borderStyle=Ti.UI.INPUT_BORDERSTYLE_BEZEL              keyboardToolbarColor=#999 keyboardToolbarHeight=40              top=10 height=35 width=300              value=Focus to see keyboard with toolbar>                      <!-- Sets the keyboardToolbar property -->              <KeyboardToolbar>                <Toolbar>                  <Items>                    <Button systemButton=Ti.UI.iPhone.SystemButton.CANCEL />                    <FlexSpace/>                    <Button systemButton=Ti.UI.iPhone.SystemButton.CAMERA />                    <FlexSpace/>                    <Button style=Ti.UI.iPhone.SystemButtonStyle.DONE>Send</Button>                  </Items>                </Toolbar>              </KeyboardToolbar>                    </TextField>          </ItemTemplate>        </Templates>           <ListSection headerTitle=Login Id id=idSection>          <ListItem template=inputTemplate textfield:value=/>        </ListSection>      </ListView>    </Window>  </Alloy>  {code}    h3. index.js  {code:javascript}  $.settingsWin.open();  {code}    h3. Console output  {code}  Titanium Command-Line Interface, CLI version 3.4.1, Titanium SDK version 3.4.1.GA  Copyright (c) 2012-2014, Appcelerator, Inc.  All Rights Reserved.  Please report bugs to http://jira.appcelerator.org/  [DEBUG] :  Detecting modules in /Users/<USER>Library/Application Support/Titanium/modules  [DEBUG] :  Detected android module: com.appcelerator.apm 1.0.10 @ /Users/<USER>Library/Application Support/Titanium/modules/android/com.appcelerator.apm/1.0.10  [DEBUG] :  Detected android module: facebook 3.0.2 @ /Users/<USER>Library/Application Support/Titanium/modules/android/facebook/3.0.2  [DEBUG] :  Detected android module: facebook 3.0.3 @ /Users/<USER>Library/Application Support/Titanium/modules/android/facebook/3.0.3  [DEBUG] :  Detected android module: ti.cloudpush 3.3.0 @ /Users/<USER>Library/Application Support/Titanium/modules/android/ti.cloudpush/3.3.0  [DEBUG] :  Detected android module: ti.cloudpush 3.3.4 @ /Users/<USER>Library/Application Support/Titanium/modules/android/ti.cloudpush/3.3.4  [DEBUG] :  Detected android module: ti.map 2.1.4 @ /Users/<USER>Library/Application Support/Titanium/modules/android/ti.map/2.1.4  [DEBUG] :  Detected android module: ti.map 2.2.2 @ /Users/<USER>Library/Application Support/Titanium/modules/android/ti.map/2.2.2  [DEBUG] :  Detected commonjs module: ti.cloud 3.2.3 @ /Users/<USER>Library/Application Support/Titanium/modules/commonjs/ti.cloud/3.2.3  [DEBUG] :  Detected commonjs module: ti.cloud 3.2.5 @ /Users/<USER>Library/Application Support/Titanium/modules/commonjs/ti.cloud/3.2.5  [DEBUG] :  Detected commonjs module: ti.cloud 3.2.7 @ /Users/<USER>Library/Application Support/Titanium/modules/commonjs/ti.cloud/3.2.7  [DEBUG] :  Detected iphone module: com.appcelerator.apm 1.0.10 @ /Users/<USER>Library/Application Support/Titanium/modules/iphone/com.appcelerator.apm/1.0.10  [DEBUG] :  Detected iphone module: com.appcelerator.urlSession 1.0.1 @ /Users/<USER>Library/Application Support/Titanium/modules/iphone/com.appcelerator.urlSession/1.0.1  [DEBUG] :  Detected iphone module: facebook 3.1.1 @ /Users/<USER>Library/Application Support/Titanium/modules/iphone/facebook/3.1.1  [DEBUG] :  Detected iphone module: ti.coremotion 1.0.1 @ /Users/<USER>Library/Application Support/Titanium/modules/iphone/ti.coremotion/1.0.1  [DEBUG] :  Detected iphone module: ti.map 2.0.2 @ /Users/<USER>Library/Application Support/Titanium/modules/iphone/ti.map/2.0.2  [DEBUG] :  Detected iphone module: ti.map 2.0.4 @ /Users/<USER>Library/Application Support/Titanium/modules/iphone/ti.map/2.0.4  [DEBUG] :  Detected iphone module: ti.touchid 1.0 @ /Users/<USER>Library/Application Support/Titanium/modules/iphone/ti.touchid/1.0  [DEBUG] :  Detecting plugins in /Users/<USER>dev/Studio_Workspace/TestApplication/plugins  [DEBUG] :  Detected plugin: ti.alloy @ /Users/<USER>dev/Studio_Workspace/TestApplication/plugins/ti.alloy  [DEBUG] :  Detecting plugins in /Users/<USER>Library/Application Support/Titanium/plugins  [DEBUG] :  Detected plugin: com.appcelerator.test @ /Users/<USER>Library/Application Support/Titanium/plugins/com.appcelerator.test  [DEBUG] :  Looking for Titanium plugin id=ti.alloy version=1.0  [INFO] :   Found Titanium plugin id=ti.alloy version=1.0   [DEBUG] :  Titanium SDK iOS directory: /Users/<USER>Library/Application Support/Titanium/mobilesdk/osx/3.4.1.GA/iphone  [INFO] :   Deploy type: development  [INFO] :   Building for target: simulator  [INFO] :   Building using iOS SDK: 8.1  [INFO] :   Building for iOS Simulator: iPhone 5s  [DEBUG] :  UDID: xxxx  [DEBUG] :  Simulator type: iphone  [DEBUG] :  Simulator version: 8.1  [INFO] :   Building for device family: universal  [DEBUG] :  Setting Xcode target to Debug  [DEBUG] :  Setting Xcode build OS to iphonesimulator8.1  [DEBUG] :  Xcode installation: /Applications/Xcode.app/Contents/Developer  [DEBUG] :  iOS WWDR certificate: installed  [DEBUG] :  Building for the following architectures: armv7 armv7s i386  [INFO] :   Minimum iOS version: 6.0  [INFO] :   Debugging disabled  [INFO] :   Profiler disabled  [INFO] :   Forcing rebuild: /Users/<USER>dev/Studio_Workspace/TestApplication/build/iphone/build-manifest.json does not exist  [INFO] :   Initiating prepare phase  [INFO] :   Found Alloy app in /Users/<USER>dev/Studio_Workspace/TestApplication/app  [INFO] :   Executing Alloy compile: /usr/local/bin/node /usr/local/bin/alloy compile /Users/<USER>dev/Studio_Workspace/TestApplication/app --config platform=ios,version=0,simtype=none,devicefamily=universal,deploytype=development,target=simulator --no-colors  [DEBUG] :         .__  .__                  [DEBUG] :  _____  |  | |  |   ____ ___.__.  [DEBUG] :  \__  \ |  | |  |  /  _ <   |  |  [DEBUG] :   / __ \|  |_|  |_(  <_> )___  |  [DEBUG] :  (____  /____/____/\____// ____|  [DEBUG] :       \/                 \/  [DEBUG] :  Alloy 1.5.1 by Appcelerator. The MVC app framework for Titanium.  [DEBUG] :  ----- CONFIGURATION -----  [DEBUG] :  raw config = platform=ios,version=0,simtype=none,devicefamily=universal,deploytype=development,target=simulator  [DEBUG] :  platform = ios  [DEBUG] :  version = 0  [DEBUG] :  simtype = none  [DEBUG] :  devicefamily = universal  [DEBUG] :  deploytype = development  [DEBUG] :  target = simulator  [DEBUG] :  project path = /Users/<USER>dev/Studio_Workspace/TestApplication  [DEBUG] :  app path = /Users/<USER>dev/Studio_Workspace/TestApplication/app  [DEBUG] :    [DEBUG] :  ----- CONFIG.JSON -----  [DEBUG] :  dependencies = {}  [INFO] :   [config.json] regenerating CFG.js from config.json...  [DEBUG] :  {  [DEBUG] :  dependencies: {},  [DEBUG] :  sourcemap: true,  [DEBUG] :  autoStyle: false,  [DEBUG] :  adapters: [  [DEBUG] :  localStorage,  [DEBUG] :  properties,  [DEBUG] :  sql  [DEBUG] :  ]  [DEBUG] :  }  [DEBUG] :    [DEBUG] :  ----- CLEANING RESOURCES -----  [DEBUG] :  Removing orphaned controllers ...  [DEBUG] :  Removing orphaned models ...  [DEBUG] :  Removing orphaned styles ...  [DEBUG] :  Removing orphaned sync adapters...  [DEBUG] :  Removing orphaned assets and libs...  [DEBUG] :    [DEBUG] :  ----- BASE RUNTIME FILES -----  [DEBUG] :    [INFO] :   ----- MVC GENERATION -----  [INFO] :   [global style] writing to cache...  [INFO] :   [index.xml] view processing...  [INFO] :   style:      index.tss  [INFO] :   view:       index.xml  [DEBUG] :  /usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract._ItemArray.js:58  [DEBUG] :        return state.itemsArray + '.push(' + s.parent.symbol + ');';  [DEBUG] :                                                     ^  [ERROR] :  : Cannot read property 'symbol' of undefined  [DEBUG] :      at Object.CU.generateNodeExtended.post (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract._ItemArray.js:58:52)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/base.js:14:17)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/default.js:10:27)  [DEBUG] :      at parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.Button.js:30:30)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/base.js:11:17)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.Button.js:14:27)  [DEBUG] :      at Object.exports.generateNode (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:316:48)  [DEBUG] :      at Object.exports.generateNodeExtended (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:253:17)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract._ItemArray.js:55:16  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract._ItemArray.js:37:4)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/base.js:11:17)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract._ItemArray.js:18:27)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract.Items.js:15:48)  [DEBUG] :      at Object.exports.generateNode (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:316:48)  [DEBUG] :      at Object.exports.generateNodeExtended (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:253:17)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract._ItemContainer.js:51:15  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract._ItemContainer.js:31:4)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/base.js:11:17)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract._ItemContainer.js:20:27)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.iOS.Toolbar.js:11:52)  [DEBUG] :      at Object.exports.generateNode (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:316:48)  [DEBUG] :      at Object.exports.generateNodeExtended (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:253:17)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/_ProxyProperty.js:43:14  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/_ProxyProperty.js:32:4)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/base.js:11:17)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/_ProxyProperty.js:16:27)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/_ProxyProperty.KeyboardToolbar.js:12:37)  [DEBUG] :      at Object.exports.generateNode (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:316:48)  [DEBUG] :      at Object.exports.generateNodeExtended (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:253:17)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.TextField.js:48:14  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.TextField.js:30:4)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/base.js:11:17)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.TextField.js:20:27)  [DEBUG] :      at Object.exports.generateNode (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:316:48)  [DEBUG] :      at Object.exports.generateNodeExtended (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:253:17)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract.ItemTemplate.js:64:15  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract.ItemTemplate.js:54:5)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/base.js:11:17)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract.ItemTemplate.js:10:27)  [DEBUG] :      at Object.exports.generateNode (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:316:48)  [DEBUG] :      at Object.exports.generateNodeExtended (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:253:17)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.ListView.js:131:17  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.ListView.js:122:6  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.ListView.js:48:4)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/base.js:11:17)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.ListView.js:29:27)  [DEBUG] :      at Object.exports.generateNode (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:316:48)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:391:29  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at Object.exports.generateNode (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:386:5)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/index.js:577:28  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at parseAlloyComponent (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/index.js:566:5)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/index.js:258  [DEBUG] :  :6  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/index.js:247:6  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at module.exports (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/index.js:243:4)  [DEBUG] :      at Object.<anonymous> (/usr/local/lib/node_modules/alloy/Alloy/alloy.js:103:46)  [DEBUG] :      at Module._compile (module.js:456:26)  [DEBUG] :      at Object.Module._extensions..js (module.js:474:10)  [DEBUG] :      at Module.load (module.js:356:32)  [DEBUG] :      at Function.Module._load (module.js:312:12)  [DEBUG] :      at Module.require (module.js:364:17)  [DEBUG] :      at require (module.js:380:17)  [DEBUG] :      at Object.<anonymous> (/usr/local/lib/node_modules/alloy/bin/alloy:3:1)  [DEBUG] :      at Module._compile (module.js:456:26)  [DEBUG] :      at Object.Module._extensions..js (module.js:474:10)  [DEBUG] :      at Module.load (module.js:356:32)  [DEBUG] :      at Function.Module._load (module.js:312:12)  [DEBUG] :      at Function.Module.runMain (module.js:497:10)  [DEBUG] :      at startup (node.js:119:16)  [DEBUG] :      at node.js:906:3  [ERROR] :  Alloy compiler failed  {code}",Bug,Medium,Closed,"2014-12-30 00:53:24","2014-12-30 00:53:24",8
"Alloy Framework","Speed compilation by enabling selective compiles of specified files","Community PR https://github.com/appcelerator/alloy/pull/625     * PR needs testing to confirm it works as described and introduces no side-effects/regressions  * Add unit tests  * Open related docs tickets, update ALOY-757 & ALOY-620 as needed.  ",Improvement,Medium,Resolved,"2014-12-29 19:04:23","2014-12-29 19:04:23",5
"Alloy Framework","Samples: Alloy RSS Reader sample does not work on iPad","This is not a regression as the issue occurs in SDK 3.4.0.GA as well.    Steps to Reproduce:  1. Import the Alloy - RSS Reader sample in studio  2. Run the sample project on iPad device or simulator    Actual Result:  The app installs and launches successfully but does not show any content. Only waiting spinner is shown continuously.    Expected Result;  The RSS Reader sample app should show the RSS feeds",Bug,Medium,Resolved,"2014-12-15 09:32:26","2014-12-15 09:32:26",3
"Alloy Framework","Button in Inheritance sample app difficult to click on iOS","Steps    1.Build and run https://github.com/appcelerator/alloy/tree/master/test/apps/advanced/inheritance on an iPhone device or simulator.  2. Try to click the baseDialog button.    Results: Because the button is partially covered by the status bar it's hard to click, even with a mouse pointer.  Expected: Button easy to click with finger or mouse.        ",Improvement,Medium,Resolved,"2014-12-22 15:30:09","2014-12-22 15:30:09",3
"Alloy Framework","Alloy.Controller.UI.create - Option to pass properties","h5. Present behaviour      Image url will be dynamic, so good to make a way to pass it at creation.    h5. Expected behaviour      ",Improvement,Medium,Open,"2014-12-18 06:42:06","2014-12-18 06:42:06",13
"Alloy Framework","TSS: class assignment order affects application of properties which doesn't match CSS rules","The Alloy tss parsing is a bit incorrect. it relies on where in a .tss file a class is defined rather than following CSS common rules:    Example: https://gist.github.com/<USER>a63562fc7e9b7a7f3290    Here the result should give me blue text, but since the BlueText class is above the Icon class, then Alloy let Icon win, even though the BlueText is defined in the end of the class= markup.     This is incorrect - if we want Alloy to mimic CSS. ",Bug,Medium,Open,"2014-08-26 15:17:56","2014-08-26 15:17:56",13
"Alloy Framework","Alloy: Add support ENV and DIST conditions in XML and TSS","To complete the consistency in the options for conditional code in controllers, [config.json|https://jira.appcelerator.org/browse/TC-5135], views and styles, I'd like to ask for support for ENV and DIST conditions in XML and TSS.    h1. Example use case  A feedback button you only want to show in ad-hoc builds and not in store-builds.    h1. Examples    *index.tss*  {code:json}  #feedback[env=production]: {    visible: false  }    #rate[dist=store]: {    visible: true  }  {code}    *index.xml*  {code:xml}  <Alloy>    <Button env=production>Feedback</Button>    <Button dist=store>Rate</Button>  </Alloy>  {code}",Improvement,Low,Open,"2014-12-18 09:36:24","2014-12-18 09:36:24",8
"Alloy Framework","Alloy: Add support for DIST in the Project Configuration File","Recently, in Alloy 1.4.0 {{DIST_ADHOC}} and {{DIST_STORE}} were added the options for [conditional code in controllers|http://docs.appcelerator.com/titanium/latest/#!/guide/Alloy_Controllers-section-34636384_AlloyControllers-ConditionalCode].    I'd like to also have support the same conditions in {{config.json}}.    The use case would be to have different endpoints, keys or other configuration variables for production ad-hoc builds and production store-builds.    Example:    ",Improvement,Medium,Resolved,"2014-12-18 09:27:55","2014-12-18 09:27:55",5
"Alloy Framework","Compile error when a view's attribute contains an escaped quote","The following view:        Will result in the following compile error:        I'd expect this to work fine since the {{}} is escaped?",Bug,Medium,Resolved,"2014-11-12 14:01:58","2014-11-12 14:01:58",8
"Alloy Framework","Alloy: Support os-attribute to views and styles for consistency ","In controllers and {{config.json}} the selector for conditional code for platforms is {{os}}, while in views and styles it is {{platform}}. For the sake of simplification and consistency I'd ask for views and styles to support {{os}} next to {{platform}}.    h1. Examples    *index.tss*  {code:json}  View[os=android]: {    backgroundColor: 'green'  }  {code}    *index.xml*  {code:xml}  <Alloy>    <View os=ios />  </Alloy>  {code}    h1. Related tickets    - https://jira.appcelerator.org/browse/TC-5136  - https://jira.appcelerator.org/browse/TC-5135",Improvement,Medium,Open,"2014-12-18 09:41:04","2014-12-18 09:41:04",5
"Alloy Framework","Alloy: Theme lib folder","Although there's no real difference between the Alloy {{assets}} and {{lib}} folder, themes should also support the latter so that to theme a utility module you have in {{app/lib/util.js}} you no longer need to put this in {{app/themes/mine/assets/util.js}}.    PR incoming..",Improvement,Medium,Resolved,"2014-12-18 08:39:10","2014-12-18 08:39:10",5
"Alloy Framework","Alloy compiler doesn't regenerate controllers if only change is made to the distribution target","When building for a different target environment (development, test or production) conditional code in {{app/alloy.js}} is not updated in {{Resources/\[platform\]/app.js}}. This can cause serious errors when relying on the conditions for particular behaviour in ad-hoc and app store builds.    h1. Test case    1. Create a project: {{ti create -t app -p ios -n conditions --id test.conditions -d .}}  2. Make it Alloy: {{cd conditions && alloy new}}  3. Insert the following snippet in both {{app/alloy.js}} and {{app/controllers/index.js}}:        4. Build the production for Simulator: {{ti build -p ios -b}}  5. Confirm that both {{Resources/iphone/app.js}} and {{Resources/iphone/alloy/controllers/index.js}} only have {{console.debug(if (ENV_DEVELOPMENT));}} which is correct  6. Build for ad-hoc or to device: {{ti build -p ios --target dist-adhoc}}  7. Confirm that {{Resources/iphone/app.js}} still has {{console.debug(if (ENV_DEVELOPMENT));}} while {{Resources/iphone/alloy/controllers/index.js}} is correctly updated to have {{console.debug(if (ENV_PRODUCTION));}}",Bug,Medium,Resolved,"2014-12-12 22:04:41","2014-12-12 22:04:41",8
"Alloy Framework","Alloy launch image for 667h has the wrong filename","It is named {{<EMAIL>}} but should be {{<EMAIL>}} like the classic template has:    https://github.com/appcelerator/titanium_mobile/tree/master/iphone/templates/app/default/template/Resources/iphone    PR: https://github.com/appcelerator/alloy/pull/637",Bug,Critical,Closed,"2014-12-17 16:08:17","2014-12-17 16:08:17",2
"Alloy Framework","Update ti.paint module in HarnessTemplate with a 64-bit compatible version","The HarnessTemplate includes the ti.paint module for use with the test/apps/advanced/native_modules sample. The version included is 32-bit only. Update to a 64-bit version.    Incidentally, there is an Android version of this module. The sample app could be updated to work on both iOS and Android (it is iOS-only currently).",Bug,Medium,Resolved,"2014-12-12 15:14:33","2014-12-12 15:14:33",3
"Alloy Framework","Samples: Remove popover.title because it has been deprecated for iOS8","The sample app: test/apps/ui/popover sets the title for the popover. This property has been deprecated as of SDK 3.5 due to iOS8 API changes. Remove this property from the sample.",Bug,Low,Open,"2014-12-12 15:10:45","2014-12-12 15:10:45",3
"Alloy Framework","Deep merge config.json","Action:  A config.json file with the following contents is added to the project:      Expected result:  Should result in alloy looking for templates in the root directory of the system.     Actual result:  An error is thrown of Arguments to path.join must be strings in the alloy compile due to the rest of the dir paths not being set in the config.json file. allow uses _.defaults and this does a shallow style clone rather then deep.    lo-dash has a fix for this already (well... provided a workaround, the community has made modules from this workaround) ... sadly underscore has not yet fixed this as far as I can tell. Creating a workaround for underscore should not be difficult though    Example use case:  Wanting to override the alloy templates for a project, and so wanting to change the template directory for the project to a custom one",Improvement,Medium,Open,"2014-08-13 03:07:22","2014-08-13 03:07:22",5
"Alloy Framework","Support extending collections from within the adapter","Triage and test community pr https://github.com/appcelerator/alloy/pull/628  ",Improvement,None,Open,"2014-12-04 15:34:48","2014-12-04 15:34:48",5
"Alloy Framework","Alloy Migrations: Template up.down functions do not match documentation","When generating a migration with the Alloy CLI (1.5.1), the generated file has this code:      But documentation uses 'migrator' in place of 'db' for the function parameter.    Since the passed-in object itself has a 'db' parameter, the 'migrator' naming helps to avoid potential confusion.    migrator.db.execute(...)    vs.    db.db.execute(...)",Improvement,Medium,Resolved,"2014-12-02 19:46:55","2014-12-02 19:46:55",3
"Alloy Framework","Support defining controller inheritance in XML","I would like to be able to specify that subTopBar inherits from topBar by defining the baseController relationship in the XML of subTopBar rather than in its JavaScript code.     --- original description follows ---    There is a super controller which name is 'topBar'.  There is a sub controller which inherit from 'topBar', its name is 'subTopBar'.  'subTopBar' has no XML in any views, because I wanna reuse the view of 'topBar'.  (exports.baseController = 'topBar' )    such as the following .jade file described:      When Alloy building, Alloy will try to find the view of the subcontroller when it was required  in XML.    1st    I wanna reuse the view, but I cant create a XML in views directory.  2nd    I can still create it in JS by dynamic without any XML of subcontroller.    In a word:    I am for fear to it is a bug.    I think it would be better for you to check this issue, thx.  ","New Feature",Medium,Open,"2014-07-01 03:45:15","2014-07-01 03:45:15",13
"Alloy Framework","Models: Data not retrieved from/saved to a table altered via migration using a SQL statement","Per http://developer.appcelerator.com/question/178611/data-is-not-saved-in-column-after-alter-table-through-alloy-migration     After applying a migration that alters a table structure, data saved to the new columns is not persisted to the SQLite database.        Sample / test app attached. Also, screenshot of app's database after migration has been applied and a few new models have been added (any labeled Changed were added after the migration and should have a pagecount)    This behavior is present with Alloy 1.6.0-dev, 1.5.1, 1.4.1, and 1.3.1.  ",Improvement,Medium,Open,"2014-10-22 19:42:31","2014-10-22 19:42:31",5
"Alloy Framework","Implicitly set ns attribute for SearchView to Ti.UI.Android","When declaring a SearchView element in XML markup, Alloy should assign it the 'Ti.UI.Android' namespace.  Alloy is currently doing this for a lot of iOS-specific components.    These two items should be equivalent.      ",Improvement,Medium,Resolved,"2014-10-21 23:02:28","2014-10-21 23:02:28",3
"Alloy Framework","Cannot call methods or access properties on MenuItems declared in markup","DESCRIPTION:  Cannot call methods or access properties using the `id` attribute of MenuItems created in XML markup.  Related feature ticket: ALOY-1098    REPRODUCTION:  Run the Alloy application below.  Hit the Expand or Collapse action items or try to expand the action view from the overflow menu.    RESULTS:  Trying to call a method or accessing a property results in 'Cannot read property of undefined` or `Cannot call method X of undefined`.                `index.xml`      `index.js`      Classic Examples:      ",Bug,Critical,Closed,"2014-10-21 22:09:04","2014-10-21 22:09:04",5
"Alloy Framework","Update sync adapters to support promises in addition to callbacks","Per comments at [Hacking alloy to get promises to work|https://github.com/aaronksaunders/tiConnectSampleApp#hacking-of-alloyjs-to-get-promises-to-work], the core model/collection constructors could be modified simply to support using promises in addition to callbacks. As shown in [Aaron's TiConnect sample|https://github.com/aaronksaunders/tiConnectSampleApp/blob/master/app/alloy.js#L22] the change involves returning the results of the sync call.    Resolving this cannot break existing apps, so extensive testing should be done on all platforms.",Improvement,Medium,Closed,"2014-10-20 20:57:12","2014-10-20 20:57:12",5
"Alloy Framework","Add functionality from alloy-smelter to Alloy","The https://github.com/<USER>alloy-smelter offers some nice capabilities that should perhaps be included in Alloy itself. For example, copying/moving/renaming/deleting controllers.    Sub-tickets will be needed to implement the individual features.    Alternately, alloy-smelter could be wrapped, providing alloy foo commands that call to smelter.",Story,Medium,Resolved,"2014-10-20 20:44:37","2014-10-20 20:44:37",5
"Alloy Framework","Properties test sample: Collection view doesn't update after adding first item on Android","Steps:    1. Create an Alloy application from the [models/properties|https://github.com/appcelerator/alloy/tree/master/test/apps/models/properties] sample.  2. Build, run on Android.  3. Click Collections tab.  4. Enter text in input and click add/+ buttton.    Results: New item doesn't appear in TableView.  Expected: Item appears in tableview.    Subsequent items added to the collection appear in the TableView, it's just the first one that doesn't. Works as expected on iOS (sim).",Bug,Medium,Resolved,"2014-10-20 15:18:56","2014-10-20 15:18:56",3
"Alloy Framework","Add DTD or other view XML validation reference for Studio to use","Studio is blissfully unaware of what tags are valid underneath other tags. We just offer the full set to the user. It'd be great if we had something like a DTD so we knew which tags are valid underneath others.    There are other cases where it'd be great to get the input from Alloy rather than Studio hard-code:  i.e. artificial tags (tags that aren't real types, but may behave like other tags/types - LeftNavButton is not a type, but acts like a Button)",Story,Medium,Open,"2014-10-16 18:12:44","2014-10-16 18:12:44",8
"Alloy Framework","SQL runtime error when running models/listview_binding test app","Steps:    1. Build/run https://github.com/appcelerator/alloy/tree/1_5_X/test/apps/models/binding_listview for Android or iOS    Results:   On iOS, the following error is generated:    {quote}  [DEBUG] 2014-10-16 10:02:57.854 binding_listview[31708:445138] [ERROR] A SQLite database error occurred on database '/Users/<USER>Library/Developer/CoreSimulator/Devices/861898C4-B00A-46FE-B8BF-AF20F274270C/data/Containers/Data/Application/8411B43C-2D41-4140-BD17-9F5275B43166/Library/Private Documents/_alloy_.sql': Error Domain=com.plausiblelabs.pldatabase Code=3 An error occured parsing the provided SQL statement. UserInfo=0x7c93c470 {com.plausiblelabs.pldatabase.error.vendor.code=1, NSLocalizedDescription=An error occured parsing the provided SQL statement., com.plausiblelabs.pldatabase.error.query.string=INSERT INTO info (title,subtitle,image) VALUES (?,?,?);, com.plausiblelabs.pldatabase.error.vendor.string=table info has no column named title} (SQLite #1: table info has no column named title) (query: 'INSERT INTO info (title,subtitle,image) VALUES (?,?,?);')  [ERROR] Script Error {  [ERROR]     backtrace = #0 () at file:///Users/<USER>Library/Developer/CoreSimulator/Devices/861898C4-B00A-46FE-B8BF-AF20F274270C/data/Containers/Bundle/Application/DA7AB9EB-0FAB-4D30-BB29-2E1CD5D26933/binding_listview.app/alloy/models/Info.js:54\n#1 Migrate() at file:///Users/<USER>Library/Developer/CoreSimulator/Devices/861898C4-B00A-46FE-B8BF-AF20F274270C/data/Containers/Bundle/Application/DA7AB9EB-0FAB-4D30-BB29-2E1CD5D26933/binding_listview.app/alloy/sync/sql.js:245\n#2 () at file:///Users/<USER>Library/Developer/CoreSimulator/Devices/861898C4-B00A-46FE-B8BF-AF20F274270C/data/Containers/Bundle/Application/DA7AB9EB-0FAB-4D30-BB29-2E1CD5D26933/binding_listview.app/alloy/sync/sql.js:341\n#3 () at file:///Users/<USER>Library/Developer/CoreSimulator/Devices/861898C4-B00A-46FE-B8BF-AF20F274270C/data/Containers/Bundle/Application/DA7AB9EB-0FAB-4D30-BB29-2E1CD5D26933/binding_listview.app/alloy.js:128\n#4 () at file:///Users/<USER>Library/Developer/CoreSimulator/Devices/861898C4-B00A-46FE-B8BF-AF20F274270C/data/Containers/Bundle/Application/DA7AB9EB-0FAB-4D30-BB29-2E1CD5D26933/binding_listview.app/alloy/models/Info.js:59;  [ERROR]     line = 93;  [ERROR]     message = invalid SQL statement;  [ERROR]     nativeLocation = -[TiDatabaseProxy execute:] (TiDatabaseProxy.m:191);  [ERROR]     nativeReason = Error Domain=com.plausiblelabs.pldatabase Code=3 \An error occured parsing the provided SQL statement.\ UserInfo=0x7c93c470 {com.plausiblelabs.pldatabase.error.vendor.code=1, NSLocalizedDescription=An error occured parsing the provided SQL statement., com.plausiblelabs.pldatabase.error.query.string=INSERT INTO info (title,subtitle,image) VALUES (?,?,?);, com.plausiblelabs.pldatabase.error.vendor.string=table info has no column named title};  [ERROR]     sourceId = 299232704;  [ERROR]     sourceURL = file:///Users/<USER>Library/Developer/CoreSimulator/Devices/861898C4-B00A-46FE-B8BF-AF20F274270C/data/Containers/Bundle/Application/DA7AB9EB-0FAB-4D30-BB29-2E1CD5D26933/binding_listview.app/alloy/sync/sql.js;  [ERROR] }   [ERROR] Script Error Module alloy/models/Info failed to leave a valid exports object  {quote}",Bug,Medium,Resolved,"2014-10-16 15:11:16","2014-10-16 15:11:16",3
"Alloy Framework","Test samples/mobileweb: 'Uncaught No support for Titanium.Database' error when running binding_destroy sample","Steps:    1. Build https://github.com/appcelerator/alloy/tree/master/test/apps/models/binding_destroy for mobile web.    Result:   Uncaught No support for Titanium.Database in MobileWeb environment. at / (line 319) application error.    Expected:   Since index.xml declares a mobileweb-specific layout I would expect the sample to work for that platform.",Bug,Medium,Closed,"2014-10-16 14:34:28","2014-10-16 14:34:28",3
"Alloy Framework","Replace underscore with Lo-Dash","Investigate the ramifications of replacing underscore with Lo-Dash. Test Alloy compile-time and runtime code to determine what changes would be needed.     Create a plan for deprecating, then replacing underscore, if that's the option we take. This will include documenting any differences for developers.    Underscore 1.7.* is incompatible with Alloy. So if we stick with that, we'll need a ticket to update Alloy to support the newest underscore releases.  ",Improvement,Medium,Open,"2014-10-15 18:06:40","2014-10-15 18:06:40",5
"Alloy Framework","Update travis.yml to exit w/non-zero value on errors","GitHub builds are marked as passing even when errors are encountered by Travis. Our test scripts must be exiting with a non-zero value in the case of errors.    We should add an {{after_script}} section that exits with 0/non-zero to properly signal build state.    http://docs.travis-ci.com/user/build-configuration/",Improvement,High,Closed,"2014-10-15 17:56:16","2014-10-15 17:56:16",3
"Alloy Framework","Direction arrow in models/binding_dataFunction test sample not correct on Android ","https://github.com/appcelerator/alloy/tree/master/test/apps/models/binding_dataFunction    1. Build and run for Android and iPhone.    Results: Direction arrow on Android is center-aligned; on iOS, the arrow is left-aligned.    Expected: Arrow position same on both platforms.",Bug,Medium,Resolved,"2014-10-15 15:08:17","2014-10-15 15:08:17",2
"Alloy Framework","Compile error when merging backgroundGradient","PR: https://github.com/appcelerator/alloy/pull/588    Review pull request, create test case / sample app to be added to test suite",Bug,High,Closed,"2014-10-14 15:05:57","2014-10-14 15:05:57",3
"Alloy Framework","Alloy: Not possible to hide View inside TextArea","h4. Problem Description  It is not possible to hide a view within TextArea. Properties/Methods `visible`, `hide`, `show` are basically ignored. Works fine in Classic Ti and it worked in Alloy too... (I can't say exactly in what version ,but it worked for sure...).    h4. Testcase  index.js      index.xml      index.tss  {code:tss}  Window: {   backgroundColor: white,   layout: vertical  }    #textArea: {   width: 80%, height: 300,   borderWidth: 1px,   borderColor: gray,   top: 30  }    #redView: {   width: 100, height: 100,   backgroundColor: red  }  {code}    h4. Extra information  The Support Team tested this in Ti Classic, is working just fine. The testcase is in a comment. ",Bug,Low,Open,"2014-10-08 14:24:29","2014-10-08 14:24:29",3
"Alloy Framework","Using $.UI.create on a ListView with Custom Data templates causes to hide rows when templates are created programmatically.","h4. Problem Description  When using the $.UI.create function for ListViews using custom item templates causes the listitems not to show.    h4. Steps to reproduce  1. Create a new mobile project  2. Add this testcase  h4. index.xml:      h4. index.js (Example from docs)      However, switching to Ti.UI.create<Type>() {} works:  index.js:    3. Test in device    h4. Results  According to the Appcelerator documentation Alloy Dynamic Styles Since Alloy 1.2.0, Alloy supports changing styles dynamically or during runtime. There are two methods to support dynamic styling in Alloy. You can either generate a dynamic style dictionary that can be passed to applyProperties or a create method, or modify TSS class styles to an existing component on the fly.    Using $.UI.create in SDK 3.4.0.GA and Alloy 1.5.1 causes listview rows hide. Whether in SDK 3.3.0.GA and Alloy 1.4.0 it works fine.    h4. Extra information  Both examples used to work in Ti SDK 3.3.X and iOS 7.X and Alloy 1.4.X  ",Bug,Medium,Closed,"2014-10-07 09:27:14","2014-10-07 09:27:14",5
"Alloy Framework","Backbone 1.1.2 : <model/property> sample returning unexpected data for model attributes","h5. Problem description  Using Backbone 1.1.2, sample app included in <model/properties> returns unexpected data values when fetching for stored persistent Model data (using properties adapter).    h5. Steps to reproduce  Currently working on narrowing down the sample code. However it can be reproduced by getting the alloy sample for model/properties (https://github.com/appcelerator/alloy/tree/master/test/apps/models/properties )    1. Import the sample code  2. Add backbone support in config.json and in the 'exports.definition = {}' add:    3. Edit models/modelTab.js and add    4. Run  5. Click on Increment a few times. Then close the app.  Result: label is updated accordingly as expected, incrementing the count. Displayed label is something like:    6. Reopen the app  Displayed label is now different than expected, returning a new model with count 0 and the previous created/incremented models.   See attachment.      ",Bug,Medium,Closed,"2014-10-13 23:42:00","2014-10-13 23:42:00",3
"Alloy Framework","MobileWeb: using 'backbone 1.1.2' dependency, app crashes on MobileWeb","h5. Problem description  Accordingly to https://jira.appcelerator.org/browse/ALOY-1074 Backbone 1.1.2 is now selectable in config. json  However, if 1.1.2 is selected, MobileWeb projects are not runnable.     h5. Steps to reproduce  1. Create a new Alloy project  2. Edit config.json and add    3. Run on MobileWeb    Result: Application error is displayed. See screenshot    Using Backbone 0.9.2 it runs as expected.",Bug,Medium,Resolved,"2014-10-13 20:39:10","2014-10-13 20:39:10",3
"Alloy Framework","Replace splash screens & icons for new projects","We need to replace the draft Alloy icons & splash screens used for new projects prior to the 1.6 release.",Improvement,Critical,Closed,"2014-10-10 19:19:55","2014-10-10 19:19:55",3
"Alloy Framework","Update underscore library to latest version","Update underscore lib, per PR https://github.com/appcelerator/alloy/pull/578    Need to update both runtime and build-time versions of the lib.",Improvement,Medium,Closed,"2014-10-10 14:09:27","2014-10-10 14:09:27",3
"Alloy Framework","Alloy Model/Collection tests need to be updated for supporting also Backbone 1.1.2","h5. Problem description  According to https://jira.appcelerator.org/browse/ALOY-576 we are upgrading Backbone version from 0.9.2 to 1.1.2    Backbone 0.9.2 will still there but will be deprecated in Alloy 1.6.0 - also 1.1.2 is going to break old samples and code, therefore need to be updated.     See also docs: https://jira.appcelerator.org/browse/TIDOC-1895  ",Improvement,Critical,Closed,"2014-10-08 20:05:55","2014-10-08 20:05:55",3
"Alloy Framework","Creating sample app from advanced/android_density doesn't copy resolution-specific image folders ","*Steps:*    1. Create a new Alloy app from the advanced/android_density sample         Note that the source android_density code includes the following res-* folders each containing 'theImage.png' at different pixel densities.        2. Examine contents of the generated Alloy project's *appname/app/assets* directory.     *Results*    The res-* folders and contents were not copied into the new project's corresponding assets/android/images folder, as shown below:        *Expected*  The res-* folders and their contents are merged in with the existing assets/android/images folder contents.    ",Bug,Medium,Resolved,"2014-10-07 17:03:32","2014-10-07 17:03:32",5
"Alloy Framework","Update readme to prune outdated information","Text in the Getting Started, Additional Notes, Feedback, Contributing, and Contributors sections is perhaps dated. We should confirm that text still applies and prune outdated or extraneous information as needed.    Add info on the new --testapp attribute in the Running Sample Test Apps section    Update jakelib/readme.md to note commands to use with the new iOS8 simulators (how to launch a specific sim)`  ",Improvement,Medium,Resolved,"2014-10-03 16:50:42","2014-10-03 16:50:42",2
"Alloy Framework","Release Notes: ALOY-1150 note should be removed","h5. Problem description  In Release Notes, the note    should be removed.     ",Bug,Low,Closed,"2014-10-02 23:05:37","2014-10-02 23:05:37",1
"Alloy Framework","MobileWeb: transform using 'Ti.UI.create2DMatrix()' and Dynamic Styling does not work","h5. Problem description  Using Dynamic Styles and the $.addClass method passing a class using the Ti.UI.create2DMatrix method, generates an Application Error.     This is a regression against Alloy 1.4.1.GA  Only occurring on MobileWeb. Works fine on iOS and Android.    h5. Steps to reproduce  Grab ALOY-717 sample code (also used for https://jira.appcelerator.org/browse/ALOY-1149)    1. To reproduce is enough to use the 'transform' class in index.js:      index.tss code interested it:    Run on MobileWeb.    h6. Result  When 'changeClasses()' function is called and transform class is applied, an Application Error is thrown.",Bug,Medium,Resolved,"2014-09-30 20:59:39","2014-09-30 20:59:39",5
"Alloy Framework","Alloy 1.5.0 RC3: Compiler fails on TextArea with child control","Problem:    Placing a child control inside a TextArea that is part of a ListView template causes the Alloy compiler to fail with:    {quote}  [ERROR]  Cannot read property 'symbol' of undefined  [ERROR]  Alloy compiler failed  {quote}    Test:     Build the sample code below.    {code:title=index.xml}  <Alloy>   <Window>          <ListView>              <Templates>                  <ItemTemplate name=tMsg>                      <TextArea bindId=cMsg>                          <Label bindId=lHintText />                      </TextArea>                  </ItemTemplate>              </Templates>              <ListSection>                  <ListItem itemId=liMessage template=tMsg />                                  </ListSection>          </ListView>   </Window>  </Alloy>  {code}      If you remove {{<Label bindId=lHintText />}} from the TextArea control. It compiles fine.      The code above worked fine under Alloy 1.3 and 1.4.    ",Bug,Medium,Closed,"2014-09-26 16:33:38","2014-09-26 16:33:38",5
"Alloy Framework","Alloy: Support async build hooks","I love using [Alloy build hooks|http://docs.appcelerator.com/titanium/latest/#!/guide/Build_Configuration_File_(alloy.jmk)] through {{alloy.jmk}} files. However, I'd like to also start async processes and block the compile process from continuing until they are done.    h1. Example        h1. Solution    The solution could be modeled after the Titanium CLI which already [supports both sync and async hooks|http://docs.appcelerator.com/titanium/latest/#!/guide/Titanium_CLI_Plugins-section-37549163_TitaniumCLIPlugins-ListeningtoHooks].",Improvement,Medium,Open,"2014-09-28 12:07:23","2014-09-28 12:07:23",13
"Alloy Framework","Release notes: there is no date for the 1.5.0 release","h5. Problem description  A date for the 1.5.0 release should be added to the release notes.  Alloy CHANGELOG.md in the Github 1.5.0 branch currently says:      Therefore the current release date (09/29/2014) should be added.  ",Bug,Medium,Closed,"2014-09-29 22:16:01","2014-09-29 22:16:01",1
"Alloy Framework","iOS: Gradient array properties are converted into objects","h5. Problem description  Gradients contain properties as array, for example the 'color' property.   In Alloy, those properties are now converted and passed as objects and an app is crashing if using those properties.     The issue seems to be introduced after ALOY-1051 as is not reproducible using Alloy version 1.4.1 (and Alloy 1.5.0-rc3 as well - see ALOY-1146, where a regression was introduced breaking Aloy-1051), but is reproducible with Alloy 1.5.0-rc, 1.5.0-rc2 and 1.5.0-rc5.  Is therefore a regression.    h5. Steps to reproduce  1. Grab the sample code for ALOY-717 : https://github.com/appcelerator/alloy/tree/master/test/apps/testing/ALOY-717  2. Run the sample app on iOS (any version)  Result: App crashes with an Application Error - Invalid type passed to function at alloy.js  See error log attached and screenshot.     3. Edit index.tss and comment the 'colors' property for .bgGradient class:    and run on iOS devices  Result: app runs fine and no error are thrown.   ",Bug,Critical,Closed,"2014-09-26 23:33:46","2014-09-26 23:33:46",5
"Alloy Framework","Update model template code to include Backbone 1.1.2 support code","Per ALOY-1074, if a developer uses Backbone 1.1.2 (rather than the default 0.9.2), he/she must extend the collection definition to account for a breaking change in backbone.    Add this to the modelcode.js template file to provide guidance to developers attempting to use this feature.    ",Improvement,Medium,Closed,"2014-09-26 15:17:01","2014-09-26 15:17:01",2
"Alloy Framework","iOS: Ti.Map annotations from Model-View binding are not displayed on iPhone 6 simulators ","h5. Problem description  Following ALOY-503, Alloy is supporting Ti.Map.View > Annotation for Model-View binding.  However, when run on iPhone 6 or 6+ simulators, the annotations coming from the Model are not displayed.   The one defined in the XML is displayed correctly.    This is reproducible only on iPhone 6 and 6+ simulators. On 6/6+ devices works as expected.  Also reproducible with the previous Alloy 1.4.1 version.    h5. Steps to reproduce  1. Grab https://github.com/appcelerator/alloy/tree/master/test/apps/testing/ALOY-503 sample code  2. Run on iPhone 6 and 6+ simulators    Result: only XML defined annotation is displayed.   Expected result: 4 annotations should be displayed.    3. Run on another iOS 8 simulator, for example the iPhone 5S  Result: Annotations are all correctly displayed    4. Run on iPhone 6 device  Result: also in this case, annotations are all correctly displayed",Bug,High,Closed,"2014-09-25 22:11:42","2014-09-25 22:11:42",5
"Alloy Framework","Picker values are not correctly returned using Dynamic Styles","h5. Problem description  Using Dynamic Styles classes, some properties of Picker objects are not returned correctly.   It might be related to the fix introduced for ALOY-1051 (and eventually in PR501 for ALOY-1144), as is not reproducible using Alloy 1.4.1 and 1.5.0-rc3, but is reproducible using Alloy versions 1.5.0-rc4 and 1.5.0-rc (or 1.5.0-dev).     h5. Steps to reproduce  1. Run the attached sample code  2. Click on the 'Hello World' label and check console log    Result:       should return:  (and that is what is being returned using 1.4.1 and 1.5.0-rc3)    instead, using Alloy 1.5.0-rc or 1.5.0-rc4, it returns:  ",Bug,High,Closed,"2014-09-23 01:48:47","2014-09-23 01:48:47",8
"Alloy Framework","Add ALOY-1144 test case app to master branch","A community pull request for ALOY-1144 was merged to master. It did not include a test app. I added one for the corresponding PR I created to implement the fix in the 1_5_X branch. This ticket is to add that test app to the test/apps/testing folder for the master branch.",Story,None,Closed,"2014-09-19 15:32:58","2014-09-19 15:32:58",2
"Alloy Framework","Alloy: createStyle turns proxy objects into JS objects","In Alloy 1.5.0 [{{Alloy.createStyle()}}|https://github.com/appcelerator/alloy/blob/master/Alloy/lib/alloy.js#L233] uses a new utility method [{{deepExtend}}|https://github.com/appcelerator/alloy/blob/master/Alloy/lib/alloy.js#L609] to clone the merged properties. However, because of its implementation a proxy object like the transform passed as a default in the following example [will be turned into a JS object|https://github.com/appcelerator/alloy/blob/master/Alloy/lib/alloy.js#L652]:    {code:js}  $.someView.animate($.createStyle({    id: 'someId',    transform: Ti.UI.create2DMatrix().scale(.5, .5),    duration: 500  }));  {code}    I have a PR to fix {{deepExtend}} by checking for {{.__prototype}} before cloning objects:    - https://github.com/appcelerator/alloy/pull/567",Bug,Critical,Closed,"2014-09-19 11:54:42","2014-09-19 11:54:42",3
"Alloy Framework","iOS: ALOY-720 sample: <NavigationGroup> object needs to be changed to <NavigationWindow>","h5. Problem description  <NavigationGroup> is no longer supported for iOS. Instead, NavigationWindow object should be used.     Sample https://github.com/appcelerator/alloy/tree/master/test/apps/testing/ALOY-720 needs to be updated as still using NavigationGroup and currently failing to run.     Ideally, a mobileweb folder using NavigationGroup should be created in the sample.",Bug,Low,Closed,"2014-09-17 18:20:30","2014-09-17 18:20:30",2
"Alloy Framework","iOS, Jake: Harness project from Studio on iPhone simulators might use wrong Sim version","h5. Problem description  Following https://jira.appcelerator.org/browse/ALOY-956, SDK hardcoded version has been removed from tiapp.xml when importing a project in the Harness project.    Using iOS 8 simulators and Studio this could lead to running a wrong Simulator version if running the project just after importing it without first editing tiapp.xml    h5. Steps to reproduce  1. Import Harness project in Studio (included in <alloy repo>/test/projects/Harness  2. Setup a sample test.  For example:    3. Run the project from Studio on iOS8>iPhone6+ simulator    Result: iPhone 5S/iOS8 simulator is launched instead    4. Edit tiapp.xml from Studio. Studio will add tiapp.xml version selected from ti sdk select. Change nothing but save and close. Run the project again on iOS8>iPhone6+ simulator  Result: iPhone6+ simulator is correctly launched now.     h5. Note  Apparently this happens only for iOS 8 simulators.   Been able to launch the desired Simulator version choosing OS v7.1 or v7.0.3 ",Bug,Low,Resolved,"2014-09-17 17:27:40","2014-09-17 17:27:40",3
"Alloy Framework","Windows: The path format for app.js is different from controller files in sourcemap","The sourcemap contains different source location path format for app.js file compared to controller files on Windows platform.    The map file for app.js is :      The map file for index.js is :      Due to the difference of path formats, Studio fails to parse the paths and the debugger fails to stop at the expected breakpoints.    We need to investigate the difference in the path generation and ideally, in order to handle the paths consistently across all platforms, it might be better to have the paths in unix format.",Bug,High,Closed,"2014-09-16 05:11:53","2014-09-16 05:11:53",8
"Alloy Framework","Investigate options for automated testing","Investigate the use of tiO2 for automated runtime testing to improve our test coverage and improve quality for Alloy development.",Story,Medium,Resolved,"2014-09-15 21:46:45","2014-09-15 21:46:45",8
"Alloy Framework","Error creating a new Widget from Studio if config.json is not present","h5. Problem description  If no config.json file is present, creating a new Widget returns an error.    h5. Steps  1. Create a new Alloy project  2. Delete config.json file in the root project folder  3. From Appcelerator Studio, left click and create a new Widget    Result: a problem occurred creating a new widget.  Widget folder is created but config.json file is not found and an error is thrown.      Ideal result would probably be to automatically create a default config.json file and add in there the informations regarding the new created Widget.    If config.json file is removed, then, in order to create a new Widget, the user has to re-create manually a new config.json file just including : {{ {} }}      h5. Note  Not a regression.   ",Bug,Medium,Closed,"2014-09-15 17:12:54","2014-09-15 17:12:54",3
"Alloy Framework","Jake: not able to run project from Studio on Genymotion if not manually editing tiapp.xml","h5. Problem description  After using Jake to import, setup and run an Alloy project in Appcelerator Studio, is not possible to run it on Genymotion emulators if not manually editing first tiapp.xml.    h5. Steps to reproduce  1. Import the Harness project in Appcelerator Studio  2. Import any Alloy project using Jake.  ex.    3. Run on Genymotion simulator the Harness project from Studio.    Result:  App fails to build and run      3. Open tiapp.xml and save. Run again.  Result: project build and run and expected.    Seems to be reproducible only when building/running on Genymotion. Android Emulator and Android device launch as expected.",Bug,Low,Resolved,"2014-09-13 18:58:49","2014-09-13 18:58:49",3
"Alloy Framework","SQL sync adapter: add method or optimize query for bulk-updates","The SQL sync adapter's create/update method is currently best-suited to updating a single model at a time. The query could be optimized, or a separate method could be added to make bulk updates (multiple models in a single operation) so that such changes could be done in a more performant method.    Options might include     - update REPLACE INTO query to pass multiple VALUES  - execute multiple queries, but wrap in transaction so that there's a single atomic operation on the DB    A transaction should be used in either case to provide recovery in the case of an error during the update.",Improvement,Medium,Open,"2014-09-12 16:38:03","2014-09-12 16:38:03",3
"Alloy Framework","iOS: TextField: Textfield is not visible on window when styles applied in tss file","Textfield not visible on window when styles applied in tss  Not a regression. Since issue occurs with 3.3.0.GA also    *Steps to reproduce:*  1. Create Alloy Project. Replace the js files with code mentioned below  2. Run the app.    index.js:      index.xml:      index.tss:      {color:green}*Expected Result:*{color}  2. Textfield must be visible.    {color:red}*Actual Result:*{color}  Textfield is not visible.    Note: if the styles are applied on xml file itself. Then Textfield is visible.      ",Bug,Medium,Closed,"2014-09-12 12:11:50","2014-09-12 12:11:50",2
"Alloy Framework","Add @3x images and new icon sizes to new-app templates and samples","To support the iPhone 6/6+ screen sizes, we will need to add new icons and launch screen images to our new-app templates and samples.    See https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html#//apple_ref/doc/uid/TP40006556-CH27-SW1 for the complete list.    For iPhone 6, launch images:     750 x 1334 (@2x) for portrait  1334 x 750 (@2x) for landscape    For iPhone 6 Plus:    1242 x 2208 (@3x) for portrait  2208 x 1242 (@3x) for landscape    New icons: 180x180, 120x120, 87x87 ",Improvement,High,Closed,"2014-09-09 21:23:04","2014-09-09 21:23:04",3
"Alloy Framework","Alloy 1.5b fails to build a project using Napp Drawer if one of the menus is <Required> ed in.","h4. Expectation  Project to build    h4. Reality  Project doesn't build    ",Bug,Critical,Closed,"2014-09-09 00:32:45","2014-09-09 00:32:45",3
"Alloy Framework"," 'testing/ALOY-1058' sample code is using quoted type value","h5. Problem description  Sample code for ALOY-1058 is using a value for the type property with quotes, while, setting the type from the TSS, it should be used with no quotes.  Not a regression.     From the sample code index.tss, type is defined in this way:      while type should be:      h5. Steps to reproduce  1. Run the sample code  Result: Running the sample, the picker is actually showing DATE as a type when run, but the constant values should be used with no quotes in the TSS.  Here is the compiled code from Resources/iphone/alloy/controller/index.js:      2. Change index.tss picker stile to:      Result: compiled code is:       However, DATE type picker is still shown (not DATE_AND_TIME).  Considering the generated code, this could be a behavior issue relative to how SDK is handling the Picker type property, not Alloy. Investigating and creating a Classic Titanium sample.    3. Change the picker style to:       Result: Picker DATE_AND_STYLE is shown. Compiled code also looks good:      h5. Note  My suggestion for the sample is to use the DATE_AND_TIME picker as type in case of iOS.  i.e.  ",Bug,Medium,Resolved,"2014-09-08 19:32:40","2014-09-08 19:32:40",2
"Alloy Framework","ALOY-1028 sample test is not included in master or 1_5_X branch","ALOY-1028 sample test is not icluded in master or 1_5_X branch  In present in 1_4_X branch (and works fine with latest 1_5_X). ",Bug,Medium,Resolved,"2014-09-08 16:32:04","2014-09-08 16:32:04",2
"Alloy Framework","ui/map sample code error for mobileweb","h5. Problem description  Ui/Map module sample is not runnable on MobileWeb for a typo in the code    h5. Steps to reproduce  1. Import ui/map sample  2. Run in MobileWeb  Result: 'Uncaught reference - ti is not defined at /index.html'    The code for MobileWeb is       ti.map should be changed into Ti.Map.  ",Bug,High,Closed,"2014-09-08 16:05:39","2014-09-08 16:05:39",2
"Alloy Framework","Delete method shouldn't reset model's id","Community PR https://github.com/appcelerator/alloy/pull/547    Model's ID should not be deleted (reset) in the adapter. The problem is that after the Sync is done Backbone will trigger destroy which will execute a method called _onModelEvent -> remove ,but model doesn't have an id anymore ,so it won't be deleted from a collection - set _byId. If you try to add a new model to the collection with the same ID, backbone will not allow you to do that because the ID already exists in the set.",Improvement,Medium,Closed,"2014-09-08 13:23:35","2014-09-08 13:23:35",3
"Alloy Framework","Return values are converted to strings","h5. Problem description    Most return values are converted to strings.    Using Alloy 1.5.0-beta the data returned from       is different than with 1.4.1.GA.  Basically, in 1.5.0-beta, the id is returned as a string.     h5. Steps to reproduce    Get the sample relative to https://github.com/appcelerator/alloy/tree/master/test/apps/testing/ALOY-829    1. Edit index.js of the sample code, and add:      2. Run, click on an entry and check the returned data.  Result: id value in one case is returned as a string.        Using Alloy 1.4.1, both id values are returned as numbers. With 1.5.0-dev, one is returned as a string.  See last comment regarding https://jira.appcelerator.org/browse/ALOY-829: the specific test case fails since the pass condition is to check whether the values are identical.            h5. Additional info  This code in the styler.js file (~line 581):       Is getting output as:      Notice the extra  + before the __alloyId2.get() call. That's what's causing the issue previously described. It will convert most return values to strings, which could cause lots of other issues beyond this specific issue.     ",Bug,Critical,Closed,"2014-09-04 21:39:44","2014-09-04 21:39:44",5
"Alloy Framework","Alloys Data Binding feature does not respect formFactor property","Similar to ALOY-691 the same example fails if using the {{formFactor}} attribute. See following example using Alloy 1.4.1 . It results in a crash.    {code:title=views/index.xml}  <Alloy>      <Collection src=test />      <Window id=index platform=ios formFactor=tablet>          <View id=content dataCollection=test dataFunction=render>              <View></View>          </View>      </Window>      <Window id=index platform=ios formFactor=handheld>          <TableView>              <TableViewRow dataCollection=test dataFunction=render>                  <View></View>              </TableViewRow>          </TableView>      </Window>  </Alloy>      {code:title=models/test.js}  exports.definition = {       configuration : {      columns: {        username:string      },      adapter: {        type: sql,        collection_name: test      },    },       extendModel: function(Model) {         _.extend(Model.prototype, {});         return Model;    },       extendCollection: function(Collection) {         _.extend(Collection.prototype, {});         return Collection;    }  }    exports.destroy = function() {      __alloyId5.off(fetch destroy change add remove reset, render);      __alloyId12.off(fetch destroy change add remove reset, render);  };    'undefined' is not an object (evaluating '__alloyId5.off')  {code}    Link to Q&A: http://developer.appcelerator.com/question/176639/alloys-data-binding-feature-does-not-respect-handheld-property",Bug,Medium,Closed,"2014-07-31 09:17:21","2014-07-31 09:17:21",13
"Alloy Framework","Alloy: Button - Click event doesn't trigger","Click event doesn't trigger correctly. After few (~3) clicks the event is not triggered at all. Button basically behave as it was without any event listener.    Please look at it ASAP.    index.js (only)  ",Bug,Medium,Resolved,"2014-09-02 18:30:42","2014-09-02 18:30:42",8
"Alloy Framework","When using view-model binding, whitespace outside curly braces for ImageViews crashes the app","h5. Problem description  When using view-model binding, putting a whitespace outside curly braces, in the quotes, when using ImageViews, crashes the app    h5. Steps to reproduce  1. Grab the sample code for https://jira.appcelerator.org/browse/ALOY-716 : https://github.com/appcelerator/alloy/tree/master/test/apps/testing/ALOY-716  2. Run on iOS  Result: app crashes with following error:      3. Edit index.xml and remove the space outside the curly braces for the ImageView object, changing into something like this:    and run.  Result: app is not crashing but the binding is also lost, therefore also reopening https://jira.appcelerator.org/browse/ALOY-716    h5. Note  Not reproducible with Alloy 1.4.1, therefore is a regression.",Bug,High,Closed,"2014-09-02 22:33:14","2014-09-02 22:33:14",3
"Alloy Framework","When a new project is created in Appcelerator Studio app.tss should be created","When a new project is created in Appcelerator Studio app.tss should be created since it is not.    This is similar to the alloy.js file which is included as an empty file with instructions as to what would go inside    app.tss holds global styles",Improvement,Medium,Resolved,"2014-08-29 18:41:59","2014-08-29 18:41:59",2
"Alloy Framework","Consistent naming for platform-specific folders","There is a discrepancy in the naming of the folder for iOS-specific resources in the Alloy file structure.    For assets and libs, the folder is called iphone.    For controllers, views, and styles, the folder is called ios.    I think we should have one consistent folder name for Alloy.",Improvement,High,Closed,"2014-08-27 22:11:17","2014-08-27 22:11:17",3
"Alloy Framework","Update extract-i18n command to extract strings from XML files in addition to TSS","Community PR https://github.com/appcelerator/alloy/pull/527    Ticket is to test, confirm functionality and applicability.",Improvement,Medium,Closed,"2014-08-26 15:11:11","2014-08-26 15:11:11",3
"Alloy Framework","Why `alloy compile` install plugin?","We already have `alloy install plugin` command for that. Also `alloy new` install plugin. Inconvenience arise if we try to use locally installed alloy. Instead of using simple combo    we need to set ALLOY_PATH environment variable to plugin.py can find alloy.",Improvement,Medium,Open,"2014-07-26 22:31:24","2014-07-26 22:31:24",5
"Alloy Framework","Allow theming of tiapp.xml e.g. through Alloy themes","Now Alloy supports theming of {{app/config.json}} and {{i18n}} and {{platforms}} on their way, the last thing to tackle for easily building branded apps of a white label codebase is theming {{tiapp.xml}}.    This might me the most challenging one, since I guess the CLI already reads some information from {{tiapp.xml}} before the first hook that Alloy uses is triggered. Also, it will require some serious smarts to know when to overwrite and when to append XML tags and attributes.","New Feature",Medium,Resolved,"2014-07-18 07:57:23","2014-07-18 07:57:23",8
"Alloy Framework","Update graphic assets, including icons, launch images, and store images","Our graphic assets are dated and not all sizes are provided for current platform requirements. Waiting on new graphics from Marketing to proceed.    These graphics would be copied to a new project when created via Studio or {{alloy new}} ",Improvement,Medium,Open,"2014-08-22 20:06:15","2014-08-22 20:06:15",3
"Alloy Framework","sql sync adapter: optimize update method for adding/updating models","Community PR: https://github.com/appcelerator/alloy/pull/518    The proposed change should offer speed improvements but implements no functional changes (in other words, existing code should continue to work).    Per the comment on the PR: Consider adding a batch update method that would be faster because it would process all model changes in a single SQL statement rather than by opening repeated connections to the database. (Likely that's a separate ticket)",Improvement,Medium,Resolved,"2014-08-22 20:01:45","2014-08-22 20:01:45",5
"Alloy Framework","CLI command to create a project from an Alloy test case ","In a recent email thread, [~<USER> had an idea to add an {{alloy}} CLI to create a new Alloy project from a given sample, e.g. {{alloy create_sample basics/simple}}. Moar:    bq. ...The samples are actually installed to the developer’s computer...as is a shell/template app. Such a command could merge the two, putting the resulting files in the developer’s workspace directory.      There is also a [doc ticket|TIDOC-1849] to better expose the samples, but this type of tool enhancement would be nice, too.  ","New Feature",Medium,Resolved,"2014-08-19 22:18:58","2014-08-19 22:18:58",3
"Alloy Framework","Fix case on 'alloy info adapters' command output","alloy info adapters command returns the contents of description in the tag name description. However, alloy info samples (or even templates) have the contents in Description tag/field. Studio is expecting the same tag for all samples, templates and adapters. I believe the tag name has to be Description for all commands.",Bug,Medium,Closed,"2014-08-08 22:10:35","2014-08-08 22:10:35",3
"Alloy Framework","Styles TSS: Support spaces in comma-separated lists of targets in the platform attribute","h5. Improvement description  See ALOY-1090  Spaces in comma-separated lists of targets in the platform attribute could be supported also in styles .TSS.    For example:  1. Create a new project and use the following code:      2. Run on android and ios.    Result:  In this case, no errors are displayed and the only the first target is (android) is currently recognized and styles applied.    Expected result:  Both target platforms should be recognized.",Improvement,None,Resolved,"2014-08-08 18:08:01","2014-08-08 18:08:01",3
"Alloy Framework","Some .svn directories slipped into the GIT repo of Alloy","Dear Alloy guru's, I found some .svn folders in the GIT repo that break an SVN checkout. It's minor I know, but just to let you know. Thanks, <USER>",Bug,Medium,Closed,"2014-07-25 09:41:28","2014-07-25 09:41:28",2
"Alloy Framework","Rollback Theme i18n and platform folders implementations","Remove changes made to Alloy to implement this feature. A better solution has been proposed to handle this at the platform level and Alloy can then use it to more safely theme these folders.",Improvement,High,Closed,"2014-08-04 04:22:38","2014-08-04 04:22:38",2
"Alloy Framework","Widget assets are not copied to the compiled app","In testing widgets, I've found that widget assets are not copied to the compiled app.    Steps to reproduce:    1. Make sure you're using a 1.5.0 branch of Alloy  2. From the repo directory, run {{jake app:run dir=ALOY\-898}} This sample app happens to use the loading widget, which contains a set of graphic assets.  3. When the app opens, click Open Window. You'll see messages in the console that the image assets cannot be found.  4. Copy the file path from one of those log messages. Open Finder and choose Go, Go to Folder. Paste in that path -- before you click Open, change the two instances of %20 to spaces in the path.  5. Right-click Harness.app and choose Show package contents. There should be an images/com.appcelerator.loading folder containing simlinks to a set of PNG assets. It's not there.  6. Change to Alloy 1.4.1 and repeat the preceding steps. The images will be there.",Bug,Critical,Closed,"2014-08-01 21:16:57","2014-08-01 21:16:57",5
"Alloy Framework","Fail build with clear message if controllers/index.js is missing","h6. Problem description  Build fails on Android if the 'asset' folder is being deleted from the app project and is also not present in the Resources files folder.     h6. Steps to reproduce  1. Create a new Alloy project  2. Delete everything in app folder except views/index.xml and controllers/index.tss. Also delete config.json and alloy.js files.   3. Run on Android    Result: app build and does not properly start with error:    ",Bug,Low,Closed,"2014-08-01 01:18:55","2014-08-01 01:18:55",5
"Alloy Framework","<headerview formFactor=handheld> not working and throwing an error","h5. Problem description    formFactor='handheld' is not correctly applied if applied to <HeaderView> object.  Depending on the target, could either be not visible or crashing the app.      h5. Steps to reproduce    Use the following sample code:    h6. index.xml        h6. index.tss      1. Build and run on Android Tablet (tested with Google Nexus 7 4.3)    Expected result:  App runs. Both Headerview and View are not visible.    Result:   App crashes with the following error log:        2. Build run on iOS tablet  Result: app runs. <Headerview> and <View> are not visible as expected    3. Build run on Android and iOS handheld  Result: app runs. <Headerview> however is not displayed, while <View> is correctly displayed as expected.   Expected result: <Headerview> should be displayed.",Bug,Medium,Closed,"2014-07-31 18:49:15","2014-07-31 18:49:15",5
"Alloy Framework","Module for ListView is not working when using SDK 3.2.3","h2. Description  Following ticket ALOY-1082 I tried to create a module for ListView. While the code (pasted below) works fine using SDK 3.3.0.GA, an error is thrown when building with 3.2.3.GA.    h2. Code  Code as proposed by [~<USER> is the following:    lib/customlist.js        index.xml        index.js        h2. Error    Following the error when running the app on iOS Simulator:    ",Bug,Medium,Resolved,"2014-07-31 09:29:34","2014-07-31 09:29:34",3
"Alloy Framework","Remove 'localStorage' adapter support ","Remove 'localStorage' from :   Alloy/commands/generate/targets/model.js  Alloy/commands/info/index.js  Alloy/common/constants.js  Alloy/lib/alloy/sync/  test/projects/Harness/Resources/android/alloy/constants.js  test/projects/Harness/Resources/iphone/alloy/constants.js  test/projects/Harness/Resources/mobileweb/alloy/constants.js  test/specs/info.js",Improvement,Low,Open,"2014-07-30 04:46:21","2014-07-30 04:46:21",3
"Alloy Framework","Alloy: Code Analyzer fails to analyze","Code Analyzer fails to analyze Alloy Project from Studio on Windows system only. But working fine from CLI.     1. Create a default alloy project.  2. Execute the Code Analyzer against Android/Mobileweb platforms.    Actual Result - Shows error message. Please refer the attached log file and screen shot for more clarification.    Expected Result - Code Analyzer should work fine for Alloy project from Studio.    Notes -   1. The same works fine for Classic project.  2. Code Analyzer works fine for Alloy Project from CLI.  3. Code Analyzer works fine for Alloy/Classic on Mac and Ubuntu systems.",Bug,High,Closed,"2014-07-17 12:29:06","2014-07-17 12:29:06",5
"Alloy Framework","Support actionView property of MenuItem in XML markup","    Set actionView of MenuItem using alloy xml markup","New Feature",Medium,Closed,"2014-07-09 10:20:17","2014-07-09 10:20:17",3
"Alloy Framework","Update Popover samples to use contentView in all cases","Adding views to contentView is the preferred technique. Adding views directly to the popover might still work, but our samples should not show that technique.    Need to update:    * test/apps/ui/popover  * test/apps/testing/ALOY-983",Improvement,Medium,Closed,"2014-07-22 19:35:20","2014-07-22 19:35:20",3
"Alloy Framework","Alloy: Update moment.js built-in library to latest version.","The latest version of the moment.js library is v2.7.0, yet Alloy includes an outdated version 2.1.0 as a built in.      There are new features and bug fixes on the new version that we could use. As of now, we have to include moment 2.7.0 as a stand-alone lib on our Alloy project for these new features and cannot use the built-in.",Improvement,Critical,Closed,"2014-07-03 23:15:03","2014-07-03 23:15:03",3
"Alloy Framework","Date or time pickers: cannot use Ti.UI.* type constants, must use Titanium.UI.* abbreviations","The following code will generate an error because it uses {{type: Ti.UI.PICKER_TYPE_DATE_AND_TIME}} rather than {{type: Titanium.UI.PICKER_TYPE_DATE_AND_TIME}}. The same is true with any of the date or time type picker type constants.    h5. view      h5. style  {code:css}  '#testpicker': {    type: Ti.UI.PICKER_TYPE_DATE_AND_TIME  }  {code}  ",Bug,High,Closed,"2014-07-21 20:07:26","2014-07-21 20:07:26",3
"Alloy Framework","Picker: quotes removed from dimension properties with string values during parsing ","with alloy 1.4 if i run {{alloy compile --config platform=android}}    the code in the tss in the widget      is parsed into      (im using ti.ux templates)  ",Bug,Critical,Closed,"2014-07-21 09:05:11","2014-07-21 09:05:11",3
"Alloy Framework","Allow more query options / scope in .tss","The docs state that you have to use Alloy.Globals.* in a .tss query.  You can actually use a local function in a controller too, i.e. `#window[if=myFunc()]` and that will work too.    What won't work however is basing a query off of params passed to the controller instance.  It would work, but the Alloy compiler doesn't allow it - `#window[if=arguments[0].someProp]`    This would be a very powerful addition to the new queries available.  It technically already works in the runtime code (I hardcoded it and tried it)...but it just won't compile right now because we're not allowed to put those characters in the tss query.",Improvement,Medium,Resolved,"2014-07-21 02:24:29","2014-07-21 02:24:29",3
"Alloy Framework","id property of <Picker> other than 'picker' is treated as a variable","If you use id name except 'picker' to Picker, that id will be handled as variable.    h5. view  {code:xml}  <Alloy>    <Picker id=testpicker/>  </Alloy>  {code}    h5. style  {code:css}  '#testpicker': {    type: Ti.UI.PICKER_TYPE_DATE_AND_TIME  }  {code}    h5. compiled code  {code:javascript}  $.__views.testpicker = Ti.UI.createPicker({    type: Ti.UI.PICKER_TYPE_DATE_AND_TIME,    id: testpicker  });  {code}",Bug,High,Closed,"2014-07-18 08:15:38","2014-07-18 08:15:38",3
"Alloy Framework","Views XML: Support spaces in comma-separated lists of targets in the platform attribute","After one hour struggling my mind (since the update from 3.2.3 to 3.3.0) why the same code didn't work, I found a little bug, I suppose its in Alloy 1.4, because changing the SDK from 3.3.0 to 3.2.3 didn't work        For JS only $.index.open();    When compiling to Mobile Web it throws an error undefined open.    The problem was the *space* between *android* and *mobileweb*. After delete it, all works. Previously to the update, the original code worked fine.        Someone have the same issue?.",Improvement,Medium,Closed,"2014-07-18 12:05:48","2014-07-18 12:05:48",3
"Alloy Framework","Alloy support for Windows toolbar[] attribute","It would be very nice to have direct support for the Window.toolbar[] attribute in Alloy  Something like:    <Window id=supportWindow >     <toolbar platform=ios>      <Button id=button1 title=First />      <Button id=button2 title=Second />     </toolbar>    </Window>  ","New Feature",Medium,Resolved,"2014-06-24 10:09:58","2014-06-24 10:09:58",3
"Alloy Framework","Update the _generated code for the advanced/proxy_property_requires test app","Model/collection binding now supports more complex notation, so there are some changes in the generated code. As a result, following test cases are failing because the newly generated code are different.    ",Improvement,None,Closed,"2014-07-16 04:51:13","2014-07-16 04:51:13",1
"Alloy Framework","baseController in widgets should look for local controller","When you try to define a baseController for a widget controller:        The compiled widget controller will have:        Using {{WPATH('foo')}} will only make things worse and result in a path like {{alloy/controllers/my.widget/foo}}.    Related code:    - https://github.com/appcelerator/alloy/blob/6e5496c545d67a4fe60bd967bda55a06d5807611/Alloy/template/component.js#L18  - https://github.com/appcelerator/alloy/blob/624da7094296bdabd5b9e53201948d6f3dac782d/Alloy/commands/compile/index.js#L584    Maybe at the lines mentioned second we can prefix either {{alloy/controllers}} or {{widgetDir}}?    ",Bug,Medium,Open,"2014-06-17 09:46:28","2014-06-17 09:46:28",5
"Alloy Framework","Update Alloy templates","I've prepared a PR with some updates for the Alloy templates:    https://github.com/appcelerator/alloy/pull/480    Changes:    - Re-Organises platform files copied in by new-command to support the next two:  - Moves MarketPlaceArtwork.png to the project root folder to save APK size  - Adds iTunesConnect.png to the project root folder  - Adds iOS7 icons  - Adds iTunesArtwork@2x file (note: upscaled!)  - Optimised all assets, saving more then 1MB or 20%    Ideally the {{iTunesArtwork@2x}} file would be replaced since this one is scaled up.",Improvement,Medium,Closed,"2014-07-15 15:48:09","2014-07-15 15:48:09",3
"Alloy Framework","Allows <Templates> to be children of <Widget>","h2. Description    When creating a ListView in a widget, it is not possible to add the templates as children of the widget.    h2. Sample  The ListView is created as a Widget. XML code:        The Templates should be added in the index.xml:    ","New Feature",Medium,Resolved,"2014-07-14 12:53:14","2014-07-14 12:53:14",3
"Alloy Framework","Improve query selection speed through sync adapter optimizations","Community-submitted pull request: https://github.com/appcelerator/alloy/pull/471    Speed improvements for selecting data",Improvement,Medium,Resolved,"2014-07-09 15:27:54","2014-07-09 15:27:54",3
"Alloy Framework","Compiler fails with misleading message when dataCollection set on ListView rather than ListSection","If the {{dataCollection}} attribute is set on the ListView, as shown below, the Alloy compiler fails with the message that the ItemTemplate must have a name attribute (which it does in the example).        Moving the {{dataCollection}} attribute to the ListSection tag resolves the issue.    This might be primarily a documentation issue -- that the list section is what you bind to your collection. However, the error message should be more meaningful and accurate.",Bug,Medium,Closed,"2014-07-09 14:49:04","2014-07-09 14:49:04",3
"Alloy Framework","Studio: Distorted console view for alloy project launch on emulator","Test Steps:  This is specific to windows.    1. Create an Alloy Project.  2. Launch it on emulator. Observe the console view.    Actual Result:  Distorted console view for alloy project launch on emulator is noticed.Please refer attached screenshot.",Bug,High,Closed,"2014-07-07 12:38:00","2014-07-07 12:38:00",5
"Alloy Framework","Confirm existing adapters support Backbone 1.x","Specifically, check Mads' REST adapter. Provide guidance on updating adapters that don't work.",Improvement,Medium,Closed,"2014-07-07 18:08:38","2014-07-07 18:08:38",3
"Alloy Framework","Enable developers to specify Backbone version in config.json","Enable developers to choose whether to use Backbone 0.9x or 1.x. The default should be 1.x. Support for the older version would be to provide backward compatibility for existing projects that depend on 0.9x behaviors or functionality.",Improvement,Medium,Closed,"2014-07-07 18:06:58","2014-07-07 18:06:58",8
"Alloy Framework","Create a Backbone 1.x compatible sync adapter","To provide for backward compatibility, create a version of the SQL sync adapter that supports Backbone 1.x (current version), leaving the existing adapter for 0.9x compatibility reasons.",Improvement,Medium,Closed,"2014-07-07 18:03:18","2014-07-07 18:03:18",5
"Alloy Framework","Runtime error if Label's text attribute starts with L() alias in quotes","h6. 1. Use following sample      h6. 2. Build and run  Results in Alloy runtime error.  ",Bug,Medium,Closed,"2014-07-02 15:58:25","2014-07-02 15:58:25",2
"Alloy Framework","Support L() in XML as Label text ","For following view,  {{L()}} should work if we've set foo equal to some string in i18n. Now it prints out L('foo') instead    ",Improvement,Low,Closed,"2014-07-02 15:42:20","2014-07-02 15:42:20",3
"Alloy Framework","ListView parser should remove Templates node after processing the templates","Given a project containing a widget and this in index.xml:        The widget receives an arguments object containing two extra {{null}} values which presumably correspond to the ItemTemplate tags. Those should be removed by the Ti.UI.ListView.js parser.    Generated code without this change:      Using child views of Widget other than ListView (such as using a pair of Views) does not pass those null values via the children array.    Workaround: reference the children array like this:      ",Bug,Medium,Closed,"2014-06-30 20:28:17","2014-06-30 20:28:17",5
"Alloy Framework","CLI: `ti clean` should remove/empty `Resources` for Alloy projects","h4. Problem Description  With the Alloy compiler trying to become smarter in compiling only those files that are changed, it happens more often that for different reasons the {{Resources}} directory is not up-to-date anymore. For this reason I'd like to see the {{Resources}} folder emptied or removed with {{ti clean}} and the Studio options using this CLI command. This way I can instruct people to do a clean as a first attempt to resolve compile/build problems.  ",Improvement,Medium,Resolved,"2014-04-09 10:03:32","2014-04-09 10:03:32",3
"Alloy Framework","Blackberry: Default Alloy Project shows incorrect app icon for blackberry","Default Alloy Project shows incorrect app icon for blackberry  Steps to reproduce:  1)Create any default alloy project and install on device.    {color:green}*Expected Result:*{color}  Alloy app icon must be displayed on the device.    {color:red}*Actual Result:*{color}  Instead of Alloy app icon classic app icon is being displayed on device.    This is an issue for Blackberry only.  For Android and iOS it is showing correct app icon.",Bug,Medium,Closed,"2014-06-30 11:49:44","2014-06-30 11:49:44",3
"Alloy Framework","i18n from app must override i18n from widgets","Given a language string in the app's i18n strings.xml file with the same name as a value in a widget's strings.xml file, the app's string must override that of the widget.    To create a test app for this:    1. Copy the ALOY-967 test app  2. Modify the app's i18n/en/strings.xml file to add this new key:  {{<string name=language__intro_text>i18n from app overrides widget</string>}}  3. Build the app and you should see the above string.    Currently, with the 967 test app, you see i18n from com.mylanguage.widget which is coming from the widget.",Bug,Critical,Resolved,"2014-06-24 17:39:19","2014-06-24 17:39:19",5
"Alloy Framework","Windows: Alloy compiler does not show error details when using from Ti Studio","*Shouldn't it show at least the file name?*    \[INFO\] :   Executing Alloy compile: alloy.cmd compile xxxxx\app --config platform=android,version=0,simtype  =none,devicefamily=none,deploytype=development  \[DEBUG\] :         .__  .__                  \[DEBUG\] :  _____  |  | |  |   ____ ___.__.  \[DEBUG\] :  \__  \ |  | |  |  /  _ <   |  |  \[DEBUG\] :   / __ \|  |_|  |_(  <_> )___  |  \[DEBUG\] :  (____  /____/____/\____// ____|  \[DEBUG\] :       \/                 \/  {color:red}  \[ERROR\] Application Installer abnormal process termination. Process exit value was 1  \[ERROR\] :  Error parsing XML file.  \[ERROR\] :  Alloy compiler failed  {color}",Bug,High,Reopened,"2014-05-28 10:20:25","2014-05-28 10:20:25",5
"Alloy Framework","Remove the sample widgets","The widgets have been deprecated and should be removed in the next release. They should be handled as follows:    * If required for functional test apps or the widget sample apps, either move the required widgets into those apps or implement new simple widgets so as to preserve the goal of the demo apps.  * Contact the original author to see if he/she would like to re-take ownership and maintenance of the widget.  * Remove all remaining widgets.",Improvement,Low,Closed,"2014-06-06 17:20:26","2014-06-06 17:20:26",5
"Alloy Framework","Tooling: add script to compile all test apps and add _generated folders","To improve our testing, we should have _generated folders (containing generated code for each platform) that can be compared to with each run of the {{jake test:all}} script.     It should:    * Process each project in the test/apps folder tree  * Compile the app for each platform, saving the results to _generated/PLATFORM/alloy/controllers  * Offer a switch ({{--force}}) which if set, will overwrite existing _generated files    The test/testgen.js looks to accomplish this for an individual sample app. There's also the partially complete tools/compiles.js that might serve similar purpose.",Improvement,Medium,Resolved,"2014-06-05 20:53:23","2014-06-05 20:53:23",8
"Alloy Framework","Alloy: Add support for Alloy.CFG and Alloy.Globals in views","As the attached sample app shows, you can not use {{Alloy.CFG.}} and {{Alloy.Globals.}} in Alloy views. In the compiled code, they will end up as strings:        I would like to see that just like {{Ti.}} the {{Alloy.}} namespace would be detected and used as variable instead of string.",Improvement,Low,Resolved,"2014-05-10 19:29:24","2014-05-10 19:29:24",3
"Alloy Framework","Add defaultNamespace or module attribute to Alloy Tag","Alloy currently has a feature of specifying a module attribute against tags, allowing a custom JS module to be used to create the elements, enabling developers to return modified or different elements.    e.g:    <Label module=ui'>Foo</Label>    It's a very powerful feature and means we can create our custom tags for elements that are OS specific e.g. TitleControl and have that return a TitleControl for iOS (no change) or a Ti.UI.View for Android, with custom title text etc.    It would be useful to be able to add this namespace / module element ONCE so that you don't have to add it to every / multiple tags in a view.    So, adding the ability to specify it in the Alloy tag would mean for every tag instance, the custom module is checked first.    <Alloy module=ui.js> for example?",Improvement,Low,Resolved,"2014-05-16 18:48:30","2014-05-16 18:48:30",5
"Alloy Framework","Add code comments","Add comments to the alloy scripts, specifically to the compile-related files. Code comment structure should be compatible with the TBD code-doc tool.",Improvement,Medium,Resolved,"2014-04-01 21:08:56","2014-04-01 21:08:56",3
"Alloy Framework","Support i18n directory in widgets","Customers have requested support for widget specific i18n localization files.  This would be useful for fully independent UI widgets.","New Feature",High,Resolved,"2014-03-06 14:53:32","2014-03-06 14:53:32",3
"Alloy Framework","Support AndroidView in addition to View as child of AlertDialog","While the API name is AndroidView, Alloy expects child views of AlertDialog to be created with the View tag. It throws an error that Ti.UI.createAndroidView is not a valid method name if you use AndroidView. While it's okay to support View as a shorthand, we should also support AndroidView as a tag.    Reference: http://developer.appcelerator.com/question/163125/cannot-getset-textfield-value-in-alloy#answer-275881    Test case attached with commented-out working code that uses View.",Improvement,Low,Closed,"2014-03-03 15:13:27","2014-03-03 15:13:27",5
"Alloy Framework","Allow platform specific subfolders in lib and vendor directories","Platform specific folders (iphone,android,etc.) in the app/lib and app/vendor directories were not compiling to Resources correctly. The following pull request will fix this.    https://github.com/appcelerator/alloy/pull/337",Improvement,Medium,Closed,"2014-02-27 01:35:56","2014-02-27 01:35:56",2
"Alloy Framework","Alloy: Add attributedString/attributedHintText support","Support for attributedString/attributedHintText in Alloy (XML, TSS).        ","New Feature",Medium,Resolved,"2014-02-19 12:04:35","2014-02-19 12:04:35",5
"Alloy Framework","Non numeric primary key not escaped during query","I am having a weird issue with alloy model generating an unescaped query, even though it uses prepared statement.  To recreate it:     1. Create a model with a non integer primary key.   2. Do a simple model.fetch({id: your_text_id});      It will generate a query like so: SELECT * FROM table_name WHERE some_primary_key = your_text_id  where you would expect something like the following: SELECT * FROM table_name WHERE some_primary_key = 'your_text_id'    quoted from: http://developer.appcelerator.com/question/162301/weird-sqlite-escaping-issue",Bug,Low,Resolved,"2014-02-07 00:21:45","2014-02-07 00:21:45",3
"Alloy Framework","'localStorage' adapter for Alloy Models should be deprecated and no longer used","h5. Improvement description  We should deprecate the usage of the localStorage adapter for Alloy Models.   It could create confusion as only supports MobileWeb and Tizen and is outdated by the 'properties' adapter (that supports all platforms).     See also http://docs.appcelerator.com/titanium/latest/#!/guide/Alloy_Sync_Adapters_and_Migrations-section-36739597_AlloySyncAdaptersandMigrations-Ready-MadeSyncAdapters    Will need updates to documentation that includes sample code to use Properties rather than localStorage. Tizen support has already been removed, so this will focus on only MobileWeb. Make sure the change is communicated in the release notes.",Improvement,Low,Closed,"2014-02-06 00:16:50","2014-02-06 00:16:50",3
"Alloy Framework","Change androidView behavior for optionDialog and similar components","We need to change the androidView behavior for optionDialog (and any other components that support an Android-specific view as a child) so that an AndroidView proxy parser is used rather than creating an arbitrary view.    Need also to communicate the change, as it deprecates old behavior.    Instead of an anroidView being assigned like this:        It should instead be like this, like the rest of the generic view proxy properties:      ",Story,Low,Closed,"2014-01-22 20:09:06","2014-01-22 20:09:06",3
"Alloy Framework","Improve error messages when attempting to bind to complex objects","When attempting to bind to a complex object, such as the following, the resulting error messages are not clear and meaningful.        Generates:    {{'undefined' is not an object (evaluating 'Alloy.Models.photo.on');}}    Which doesn't clearly identify the problem being the attempt to reference the deep object reference {{photo.urls.square_75}}.     As pointed out in the original source of this ticket (http://developer.appcelerator.com/question/161740/alloymodelsphotoon#answer-274198), the solution is to map the object property to an attribute of the model, which could be done by extending the model or collection. Error message could possibly point developers to this solution.",Improvement,Medium,Closed,"2014-01-21 14:45:54","2014-01-21 14:45:54",3
"Alloy Framework","Update uglify-js to 2.4.8 ",,Improvement,High,Closed,"2014-01-10 17:05:00","2014-01-10 17:05:00",8
"Alloy Framework","Compile failing on OSX Mavericks when targeting Windows Server network drives","h2. update (10/24/2013)    A correlation between [~<USER> and [~<USER> shows that the likely culprit for this issue is when a network drive sourced from a Windows Server is used as the project folder when building Alloy on OSX Mavericks.     h2. original    Q&A: http://developer.appcelerator.com/question/158722/titanium-studio-and-os-x-mavericks---error-generating-ast-file-with-jquery    No existing or new Alloy based apps will compile.  Each fails during the optimizing process, usually indicating an issue with the base alloy files.    **Error text;**    [INFO] :   ----- OPTIMIZING -----  [INFO] :   - alloy.js  [INFO] :   - alloy/widget.js  [INFO] :   - alloy/sync/localStorage.js  [INFO] :   - alloy/sync/properties.js  [INFO] :   - alloy/sync/sql.js  [INFO] :   - alloy/sync/util.js  [WARN] :   : ERROR: Unexpected character '' [alloy/sync/util.js:7,1]  [ERROR] :  Error generating AST for /Volumes/concepts/tests/Test44-Vanilla/Resources/alloy/sync/util.js  [ERROR] :  Unexpected character ''  [ERROR] :  line 7, column 1, position 183  [ERROR] :  Alloy compiler failed    **util.js** (system file - after being compiled by Alloy)    function S4() {       return (((1+Math.random())*0x10000)|0).toString(16).substring(1);  };     exports.guid = function() {       return (S4()+S4()+'-'+S4()+'-'+S4()+'-'+S4()+'-'+S4()+S4()+S4());  }     The problem occurs in different files in different code positions and when it is triggered always appears to denote the last character as being at fault.  Simply changing the positions of code in the app does NOT change where the error is triggered - it always appears to be the end of a file that is getting snagged.",Bug,High,Resolved,"2013-10-23 16:40:04","2013-10-23 16:40:04",13
"Alloy Framework","Alloy: Theme i18n and platform folders","I would like to be able to theme the {{i18n}} and {{platform}} folders so that for a white-label app I can keep all brand-specific stuff in the theme folder.    h1. Use case  For example, the i18n strings would include brand-specific texts in multiple languages and the platform folder would include brand-specific Android themes and UrbanAirship configurations.    h1. Implementation  It would be most ideal to not just overwrite the {{i18n}} files, but really merge the strings in the XML. For the platform folder we could just overwrite files, just like we do for {{assets}} and {{lib}} with the {{Resources}} folder.","New Feature",Medium,Resolved,"2013-10-23 09:36:51","2013-10-23 09:36:51",8
"Alloy Framework","Add a shorthand for fetch() adapter","If I get a reference to an ID would be nice to have a shortend like     var model =  Alloy.createModel(...);  model.fetch({ id: 123 });    instead of have to provide a full sql statement    I suggest an implementation approach like this one   https://github.com/<USER>napp.alloy.adapter.restsql#extended-sql-interface  which would make querying the database more object friendly.    Thanks, Luca    (for original Q&A see http://developer.appcelerator.com/question/157222/fetch-single-record-by-id-via-alloy-models)",Improvement,Low,Closed,"2013-09-18 07:51:11","2013-09-18 07:51:11",5
"Alloy Framework","preparing test app phase of compile.js spec intermittently fails on Windows","{code:bash}  jake test:all    #or    jake test:spec[compile.js]  {code}",Bug,Medium,Open,"2013-08-23 03:39:33","2013-08-23 03:39:33",3
"Alloy Framework","When using view-model binding, whitespace inside curly braces disables binding","h2. problem    http://developer.appcelerator.com/question/153856/alloy-update-view-with-fetched-collection    h2. expected    Both labels in the example below should be data bound, regardless of the superfluous whitespace.    ",Bug,Medium,Closed,"2013-06-20 23:48:30","2013-06-20 23:48:30",13
"Alloy Framework","Alloy debugging doesn't work in Widgets","In 3.1.x - Alloy debugging works for controllers (e.g. set a breakpoint and it stops correctly in a controller) but doesn't stop at any breakpoints for widgets.",Bug,High,Open,"2013-05-22 13:24:49","2013-05-22 13:24:49",5
"Alloy Framework","Feature Request - alloy generate controller custom templates and arguments","h2. Problem    It would be awesome to be able to override the default template Alloy generates for a controller/style/view.  Currently, whenever you generate a controller, it creates and empty controller, a style.tss with a .container class, and a view.    You can edit these files in the alloy directory, but you are stuck with just one template.    It would be nice to specify a custom template depending on the controller you are generating.    Examples of things that you could include in custom templates would make Ti/Alloy development much faster:  - a row-like view with horizontally positioned elements with decent looking classes already applied to them with argument assignment already included.  - code to load app libs/modules common in your app  - certain classes you like to use/modify often based on the type of view you're creating  - certain controller conventions/methods/exports etc that you use commonly in a lot of controllers to aid in window management/control flow/memory management/controller    Suggestion would be to have a place in the project to store templates and add to alloy generate controller someController another argument to specify --template someTemplate    In addition, one could conceivably use alloy generate to add custom fields to a template.    i.e. alloy generate controller bookRow --template row --elements ImageView:bookImage:arg Label:bookTitle:arg Button:buyButton    This would take a preconfigured row xml/tss/js (or you could use the default template) and add an ImageView with id bookImage, a Label with id bookTitle, and a Button with id buyButton.  Some sort of flag is passed on bookImage and bookTitle to have stub controller code written to assign the values for this from the args passed to the controller.    h2. Discussions    http://developer.appcelerator.com/question/152233/overriding-alloy-generate","New Feature",Medium,Open,"2013-05-10 23:50:59","2013-05-10 23:50:59",8
"Alloy Framework","Support data-binding for other than Backbone collections","This issue was part of ALOY-504 but now separated.    Now we have the {{dataFunction}} attribute in place, we can manually trigger updating a data-bound view. This issue takes it a step further and asks for the generated data-function to be able to work with general objects/arrays.    index.xml      index.js  {code:JavaScript}  function filterData(data) {    return _.where(data, { title: 'Two' });   }    function transformItem(item) {    var transform = _.clone(item);    transform.title = title + ' ' + _.random(1, 10);    return transform;  }    fillTable([    { title: 'One'   },    { title: 'Two'   },    { title: 'Three' }  ]);      Some notes:    * The {{dataTransform}} and {{dataFilter}} implementations won't need to be changed since the user is responsible for what happens inside these functions and the input and output when called on regular objects would be exactly the same.  * The generated data-function would need to accept an object/array as argument.  * The generated data-function would need to use {{_.each}} instead of a for-loop, because it needs to support any loop-able data.  * In case a {{dataCollection}} attribute was specified, the first line in the generated data-funtion could be changed to {{var models = dataFilter(data || _alloyId*N*);}} so the data-function would both work on the bound collection as well as manually called with custom data.  ","New Feature",High,Open,"2013-04-23 10:13:00","2013-04-23 10:13:00",5
"Alloy Framework","Widget: default new widget platforms do not respect tiapp.xml deployment targets","Widget: default new widget platforms do not respect tiapp.xml deployment targets.    Test Steps:    1. Create Alloy project with all deployment targets (including blackberry and tizen).  2. New > Alloy Widget.    Test Results:    Observe the platforms listed in the widget, only a few targets are present.",Improvement,Low,Resolved,"2013-03-30 18:12:57","2013-03-30 18:12:57",3
"Alloy Framework","Upgrade to Backbone 1.0",,Epic,Medium,Resolved,"2013-03-20 12:45:54","2013-03-20 12:45:54",5
"Alloy Framework","Ability to define a custom namespace to enable Alloy to generate custom widgets","Alloy should allow the user to specify a custom namespace for each widget in XML which modifies the generated code to use the widgets within the specified namespace.    As an example, <Window id=win> generates Ti.UI.createwindow(). The user should be able to specify <Window ns=mcd id=win/>, which Alloy would in turn use to generate mcd.createwindow(). This is useful if the user has their own custom framework with custom widget attributes.","New Feature",Medium,Closed,"2013-03-07 01:14:43","2013-03-07 01:14:43",3
"Alloy Framework","Resolve suboptimal compression from uglify-js v2 update","The v2 update of uglify-js in Alloy, specifically version 2.2.5, has some suboptimal compressions, which are causing the optimizer.js test spec to fail in certain cases. Specifically the issues are around booleans and cascading of variables in assignments. These issues have been logged with the Uglifyjs2 project in the following links:    * https://github.com/mishoo/UglifyJS2/issues/137  * https://github.com/mishoo/UglifyJS2/issues/138    When these issues are resolved and distributed in an npm release, we need to revisit these compressions and testing to ensure that the fixes are in place, and that new uglify-js version has no regressions that impact alloy.",Sub-task,Medium,Closed,"2013-03-01 19:25:27","2013-03-01 19:25:27",5
"Alloy Framework","Orphan file cleanup deletes builtins and widget assets","During the compile process Alloy will attempt to remove files from the Resources directory that are no longer present anywhere in the app folder. Alloy searches a number of locations in the app folder to see if the file is an orphan or not. False negatives should be avoided as they will leave unused files in the project. False positives on the other hand are not really worrisome since those resources will be recreated on the next compile anyway.     With that in mind, there are currently false positives for orphan file deletion for builtins and widgets. Builtins and widgets will be pulled in fresh each time. Again, this will not negatively impact a developer's build process or app in any way, it would just be more true to the logic if these files were left alone during the orphan cleanup phase.",Bug,Low,Closed,"2013-01-26 22:14:34","2013-01-26 22:14:34",3
"Alloy Framework","Enable more complex notation in binding","Allow developers to use syntax like the following in collection/model bindings:        Basically, instead of assuming the whole property needs to be wrapped in \{\}, allow developers to put as many of them in the attribute as they want.",Improvement,High,Closed,"2012-12-21 13:41:13","2012-12-21 13:41:13",8
"Alloy Framework","Ti.UI.Picker has no collection binding","h3. original discussion    http://developer.appcelerator.com/question/145992/databinding-on-picker    h3. problem    Collection binding is not implemented for Ti.UI.Picker as it is for Ti.UI.TableView and other generic Titaniums views (View, Window, ScrollView, etc...).     h3. solution     Support collection binding on Ti.UI.Picker just as it is on TableView. It will need special handling as the Ti.UI.Picker requires custom parsing for columns and rows. Something like this should be how it would work for devs:    ",Improvement,High,Closed,"2012-12-20 17:21:38","2012-12-20 17:21:38",8
"Alloy Framework","CLONE - Studio Dashboard: default and Default Project does not give clear information about Alloy and Project unless description is read.","Steps To Reproduce:    1. On dashboard on studio 3.0, navigate to Develop tab.  2. Notice default and Default Project  & two-tabbed and Tabbed Application names.    Actual:  User does not get clear information from names that one is alloy project and another one is Titanium project unless he reads the description below.    Expected:  Naming convention or icon corresponding must suggest type of Project.",Improvement,High,Resolved,"2012-10-24 23:41:49","2012-10-24 23:41:49",8
